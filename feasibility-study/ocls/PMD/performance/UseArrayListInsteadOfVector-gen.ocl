let violations: Set(ASTNode) = ClassInstanceCreation.allInstances()->select(mInv1 |
  --Scope Conditions
  (not mInv1.originalCompilationUnit.oclIsUndefined()) and
  let c2: ASTNode = if mInv1.type.type.oclIsKindOf(ParameterizedType) then
    mInv1.type.type.oclAsType(ParameterizedType).type.type
  else
    mInv1.type.type
  endif in (not c2.oclIsUndefined()) and
  c2.oclIsKindOf(ClassDeclaration) and
  c2.oclAsType(ClassDeclaration).package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
    fullName.concat(p.name).concat('.')
  ).concat(c2.oclAsType(ClassDeclaration).name) = 'java.util.Vector'
) in
violations->collect(node: ASTNode | 
	let container: NamedElement = node->asOrderedSet()->closure(x |
		if x.oclIsKindOf(AbstractMethodDeclaration) or x.oclIsKindOf(AbstractTypeDeclaration) then
		  x
		else
		  x.oclContainer()
	    endif
	)->last() in 'Violation Found at '.concat(container.originalCompilationUnit.originalFilePath).concat(' on ').concat(container.name)
)->asSequence()
->append('#violations: '.concat(violations->size().toString()))
->append('#files: '.concat(violations.originalCompilationUnit.originalFilePath->asOrderedSet()->size().toString()))
