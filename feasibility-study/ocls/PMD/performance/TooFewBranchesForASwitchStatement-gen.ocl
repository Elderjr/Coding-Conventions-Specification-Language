let violations: Set(ASTNode) = SwitchStatement.allInstances()->select(e1 |
  --Scope Conditions
  (not e1.originalCompilationUnit.oclIsUndefined()) and
  --Filters Conditions
  let totalOfSwitchCases: Integer = e1.statements->select(case | case.oclIsKindOf(SwitchCaseStatement))->size() in
  totalOfSwitchCases <= 2
) in
violations->collect(node: ASTNode | 
	let container: NamedElement = node->asOrderedSet()->closure(x |
		if x.oclIsKindOf(AbstractMethodDeclaration) or x.oclIsKindOf(AbstractTypeDeclaration) then
		  x
		else
		  x.oclContainer()
	    endif
	)->last() in 'Violation Found at '.concat(container.originalCompilationUnit.originalFilePath).concat(' on ').concat(container.name)
)->asSequence()
->append('#violations: '.concat(violations->size().toString()))
->append('#files: '.concat(violations.originalCompilationUnit.originalFilePath->asOrderedSet()->size().toString()))
