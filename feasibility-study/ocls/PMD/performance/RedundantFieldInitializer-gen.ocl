let violations: Set(ASTNode) = (
  VariableDeclarationFragment.allInstances()->select(v1 |
    --Scope Conditions
    (not v1.originalCompilationUnit.oclIsUndefined()) and
    let primitiveType2: OclAny = v1.variablesContainer.type.type in (not primitiveType2.oclIsUndefined()) and
    let lit3: OclAny = v1.variablesContainer.fragments->asOrderedSet()->last().initializer in (not lit3.oclIsUndefined()) and
    (lit3.oclIsKindOf(NumberLiteral)) and
    lit3.oclAsType(NumberLiteral).tokenValue = '0' and
    let c4: OclAny = v1.oclContainer().oclContainer() in (not c4.oclIsUndefined()) and
    (c4.oclIsKindOf(ClassDeclaration) or c4.oclIsKindOf(InterfaceDeclaration) or c4.oclIsKindOf(AnonymousClassDeclaration)) and
    --Filters Conditions
    primitiveType2.oclAsType(PrimitiveType).name.matches('(byte|short|char|int|long)') and
    not (
      let v1Modifier: Modifier = if v1.oclIsKindOf(VariableDeclarationFragment) and 
       v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(FieldDeclaration) then
        v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(FieldDeclaration).modifier
      else if v1.oclIsKindOf(VariableDeclarationFragment) and
       v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationStatement) then
        v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationStatement).modifier
      else if v1.oclIsKindOf(SingleVariableDeclaration) then
        v1.oclAsType(SingleVariableDeclaration).modifier
      else
        null
      endif endif endif in (not v1Modifier.oclIsUndefined()) and
      v1Modifier.inheritance = InheritanceKind::final
    )
  )->union(
    VariableDeclarationFragment.allInstances()->select(v1 |
    --Scope Conditions
    (not v1.originalCompilationUnit.oclIsUndefined()) and
    let primitiveType2: OclAny = v1.variablesContainer.type.type in (not primitiveType2.oclIsUndefined()) and
    let lit3: OclAny = v1.variablesContainer.fragments->asOrderedSet()->last().initializer in (not lit3.oclIsUndefined()) and
    (lit3.oclIsKindOf(NumberLiteral)) and
    let c4: OclAny = v1.oclContainer().oclContainer() in (not c4.oclIsUndefined()) and
    (c4.oclIsKindOf(ClassDeclaration) or c4.oclIsKindOf(InterfaceDeclaration) or c4.oclIsKindOf(AnonymousClassDeclaration)) and
    --Filters Conditions
    primitiveType2.oclAsType(PrimitiveType).name.matches('(float|double)') and
    lit3.oclAsType(NumberLiteral).tokenValue.matches('(0|0\\.0|\\.0f|\\.0d)') and
    not (
      let v1Modifier: Modifier = if v1.oclIsKindOf(VariableDeclarationFragment) and 
       v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(FieldDeclaration) then
        v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(FieldDeclaration).modifier
      else if v1.oclIsKindOf(VariableDeclarationFragment) and
       v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationStatement) then
        v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationStatement).modifier
      else if v1.oclIsKindOf(SingleVariableDeclaration) then
        v1.oclAsType(SingleVariableDeclaration).modifier
      else
        null
      endif endif endif in (not v1Modifier.oclIsUndefined()) and
      v1Modifier.inheritance = InheritanceKind::final
    )
  ))->union(
    VariableDeclarationFragment.allInstances()->select(v1 |
    --Scope Conditions
    (not v1.originalCompilationUnit.oclIsUndefined()) and
    let e2: OclAny = v1.variablesContainer.type.type in (not e2.oclIsUndefined()) and
    (e2.oclIsKindOf(ClassDeclaration) or e2.oclIsKindOf(InterfaceDeclaration) or e2.oclIsKindOf(ParameterizedType) or e2.oclIsKindOf(AnonymousClassDeclaration) or e2.oclIsKindOf(TypeParameter)) and
    let lit3: OclAny = v1.variablesContainer.fragments->asOrderedSet()->last().initializer in (not lit3.oclIsUndefined()) and
    (lit3.oclIsKindOf(NullLiteral)) and
    let c4: OclAny = v1.oclContainer().oclContainer() in (not c4.oclIsUndefined()) and
    (c4.oclIsKindOf(ClassDeclaration) or c4.oclIsKindOf(InterfaceDeclaration) or c4.oclIsKindOf(AnonymousClassDeclaration)) and
    --Filters Conditions
    not (
      let v1Modifier: Modifier = if v1.oclIsKindOf(VariableDeclarationFragment) and 
       v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(FieldDeclaration) then
        v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(FieldDeclaration).modifier
      else if v1.oclIsKindOf(VariableDeclarationFragment) and
       v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationStatement) then
        v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationStatement).modifier
      else if v1.oclIsKindOf(SingleVariableDeclaration) then
        v1.oclAsType(SingleVariableDeclaration).modifier
      else
        null
      endif endif endif in (not v1Modifier.oclIsUndefined()) and
      v1Modifier.inheritance = InheritanceKind::final
    )
  ))->union(
    VariableDeclarationFragment.allInstances()->select(v1 |
    --Scope Conditions
    (not v1.originalCompilationUnit.oclIsUndefined()) and
    let v1Dimensions: Integer = if v1.oclIsKindOf(VariableDeclarationFragment) then
      v1.oclAsType(VariableDeclarationFragment).extraArrayDimensions
    else
      null
    endif in (not v1Dimensions.oclIsUndefined())  and
    v1Dimensions >= 1 and
    let lit2: OclAny = v1.variablesContainer.fragments->asOrderedSet()->last().initializer in (not lit2.oclIsUndefined()) and
    (lit2.oclIsKindOf(NullLiteral)) and
    let c3: OclAny = v1.oclContainer().oclContainer() in (not c3.oclIsUndefined()) and
    (c3.oclIsKindOf(ClassDeclaration) or c3.oclIsKindOf(InterfaceDeclaration) or c3.oclIsKindOf(AnonymousClassDeclaration)) and
    --Filters Conditions
    not (
      let v1Modifier: Modifier = if v1.oclIsKindOf(VariableDeclarationFragment) and 
       v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(FieldDeclaration) then
        v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(FieldDeclaration).modifier
      else if v1.oclIsKindOf(VariableDeclarationFragment) and
       v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationStatement) then
        v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationStatement).modifier
      else if v1.oclIsKindOf(SingleVariableDeclaration) then
        v1.oclAsType(SingleVariableDeclaration).modifier
      else
        null
      endif endif endif in (not v1Modifier.oclIsUndefined()) and
      v1Modifier.inheritance = InheritanceKind::final
    )
  ))->union(
    VariableDeclarationFragment.allInstances()->select(v1 |
    --Scope Conditions
    (not v1.originalCompilationUnit.oclIsUndefined()) and
    let primitiveType2: OclAny = v1.variablesContainer.type.type in (not primitiveType2.oclIsUndefined()) and
    let lit3: OclAny = v1.variablesContainer.fragments->asOrderedSet()->last().initializer in (not lit3.oclIsUndefined()) and
    (lit3.oclIsKindOf(BooleanLiteral)) and
    lit3.oclAsType(BooleanLiteral).value.toString() = 'false' and
    let c4: OclAny = v1.oclContainer().oclContainer() in (not c4.oclIsUndefined()) and
    (c4.oclIsKindOf(ClassDeclaration) or c4.oclIsKindOf(InterfaceDeclaration) or c4.oclIsKindOf(AnonymousClassDeclaration)) and
    --Filters Conditions
    not (
      let v1Modifier: Modifier = if v1.oclIsKindOf(VariableDeclarationFragment) and 
       v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(FieldDeclaration) then
        v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(FieldDeclaration).modifier
      else if v1.oclIsKindOf(VariableDeclarationFragment) and
       v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationStatement) then
        v1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationStatement).modifier
      else if v1.oclIsKindOf(SingleVariableDeclaration) then
        v1.oclAsType(SingleVariableDeclaration).modifier
      else
        null
      endif endif endif in (not v1Modifier.oclIsUndefined()) and
      v1Modifier.inheritance = InheritanceKind::final
    )
  ))
) in
violations->collect(node: ASTNode | 
	let container: NamedElement = node->asOrderedSet()->closure(x |
		if x.oclIsKindOf(AbstractMethodDeclaration) or x.oclIsKindOf(AbstractTypeDeclaration) then
		  x
		else
		  x.oclContainer()
	    endif
	)->last() in 'Violation Found at '.concat(container.originalCompilationUnit.originalFilePath).concat(' on ').concat(container.name)
)->asSequence()
->append('#violations: '.concat(violations->size().toString()))
->append('#files: '.concat(violations.originalCompilationUnit.originalFilePath->asOrderedSet()->size().toString()))
