------- Composite Iteration --------
  ------------- Iteration -------------:
    java::ClassDeclaration.allInstances()->select(class: java::ClassDeclaration |
      ( -- ComplexType Conditions
        let class_1_fields_2 = class.bodyDeclarations->select(class_1_fieldToSelect_2 |
            ( --Variable Conditions
              class_1_fieldToSelect_2.oclIsKindOf(FieldDeclaration) and
              class_1_fieldToSelect_2.oclAsType(FieldDeclaration).modifier.visibility = java::VisibilityKind::public
            ) --End Variable Conditions
        ) in
        class_1_fields_2->size() > 0 and
        class_1_fields_2->asOrderedSet()->size() >= 1 and 
        (not class.name.matches('Bean')) and 
        class.name='SacaRolha!'
      ) -- End ComplexType Conditions
    )->union(
      java::InterfaceDeclaration.allInstances()->select(interface: java::InterfaceDeclaration |
        ( -- ComplexType Conditions
          interface.name='SacaRolha!' and 
          let class_1_fields_2 = interface.bodyDeclarations->select(class_1_fieldToSelect_2 |
              ( --Variable Conditions
                class_1_fieldToSelect_2.oclIsKindOf(FieldDeclaration) and
                class_1_fieldToSelect_2.oclAsType(FieldDeclaration).modifier.visibility = java::VisibilityKind::public
              ) --End Variable Conditions
          ) in
          class_1_fields_2->size() > 0 and
          class_1_fields_2->asOrderedSet()->size() >= 1 and 
          (not interface.name.matches('Bean'))
        ) -- End ComplexType Conditions
      )
    )
  ----------- End Iteration -----------;
  ->intersection(
  ------- Composite Iteration --------
    ------------- Iteration -------------:
      java::ClassDeclaration.allInstances()->select(class: java::ClassDeclaration |
        ( -- ComplexType Conditions
          let class_1_fields_2 = class.bodyDeclarations->select(class_1_fieldToSelect_2 |
              ( --Variable Conditions
                class_1_fieldToSelect_2.oclIsKindOf(FieldDeclaration) and
                class_1_fieldToSelect_2.oclAsType(FieldDeclaration).modifier.visibility = java::VisibilityKind::public
                and 
                not (class_1_fieldToSelect_2.oclAsType(FieldDeclaration).modifier.static)
              ) --End Variable Conditions
          ) in
          class_1_fields_2->size() > 0 and
          class_1_fields_2->asOrderedSet()->size() >= 1 and 
          class.name='SacaRolha!'
        ) -- End ComplexType Conditions
      )->union(
        java::InterfaceDeclaration.allInstances()->select(interface: java::InterfaceDeclaration |
          ( -- ComplexType Conditions
            interface.name='SacaRolha!' and 
            let class_1_fields_2 = interface.bodyDeclarations->select(class_1_fieldToSelect_2 |
                ( --Variable Conditions
                  class_1_fieldToSelect_2.oclIsKindOf(FieldDeclaration) and
                  class_1_fieldToSelect_2.oclAsType(FieldDeclaration).modifier.visibility = java::VisibilityKind::public
                  and 
                  not (class_1_fieldToSelect_2.oclAsType(FieldDeclaration).modifier.static)
                ) --End Variable Conditions
            ) in
            class_1_fields_2->size() > 0 and
            class_1_fields_2->asOrderedSet()->size() >= 1
          ) -- End ComplexType Conditions
        )
      )
    ----------- End Iteration -----------;
    ->union(
    ------------- Iteration -------------:
      java::ClassDeclaration.allInstances()->select(class: java::ClassDeclaration |
        ( -- ComplexType Conditions
          let class_1_fields_2 = class.bodyDeclarations->select(class_1_fieldToSelect_2 |
              ( --Variable Conditions
                class_1_fieldToSelect_2.oclIsKindOf(FieldDeclaration) and
                class_1_fieldToSelect_2.oclAsType(FieldDeclaration).modifier.visibility = java::VisibilityKind::public
                and 
                not (class_1_fieldToSelect_2.oclAsType(FieldDeclaration).modifier.inheritance = java::InheritanceKind::final)
              ) --End Variable Conditions
          ) in
          class_1_fields_2->size() > 0 and
          class_1_fields_2->asOrderedSet()->size() >= 1 and 
          class.name='SacaRolha!'
        ) -- End ComplexType Conditions
      )->union(
        java::InterfaceDeclaration.allInstances()->select(interface: java::InterfaceDeclaration |
          ( -- ComplexType Conditions
            let class_1_fields_2 = interface.bodyDeclarations->select(class_1_fieldToSelect_2 |
                ( --Variable Conditions
                  class_1_fieldToSelect_2.oclIsKindOf(FieldDeclaration) and
                  class_1_fieldToSelect_2.oclAsType(FieldDeclaration).modifier.visibility = java::VisibilityKind::public
                  and 
                  not (class_1_fieldToSelect_2.oclAsType(FieldDeclaration).modifier.inheritance = java::InheritanceKind::final)
                ) --End Variable Conditions
            ) in
            class_1_fields_2->size() > 0 and
            class_1_fields_2->asOrderedSet()->size() >= 1 and 
            interface.name='SacaRolha!'
          ) -- End ComplexType Conditions
        )
      )
    ----------- End Iteration -----------;
    )--close union
  ------- End Composite Iteration --------
  )--close intersection
  
------- End Composite Iteration --------
