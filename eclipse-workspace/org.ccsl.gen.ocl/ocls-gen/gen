--Scope Conditions
MethodInvocation.allInstances()->union(ClassInstanceCreation.allInstances())->select(mInv1 |
  let m2: OclAny = if mInv1.oclIsKindOf(MethodInvocation) then
    mInv1.oclAsType(MethodInvocation).method
  else if mInv1.oclIsKindOf(ClassInstanceCreation) then
    mInv1.oclAsType(ClassInstanceCreation).method
  else
    null
  endif endif in
  (not m2.oclIsUndefined())  and
  m2.oclIsKindOf(MethodDeclaration) and
  let m2params: OrderedSet(SingleVariableDeclaration) = m2.oclAsType(MethodDeclaration).parameters in
  m2params->size() = 0 and
  m2.oclAsType(MethodDeclaration).name = 'toString' and
  let e3: OclAny = if mInv1.oclIsKindOf(MethodInvocation) then
    mInv1.oclAsType(MethodInvocation).expression
  else if mInv1.oclIsKindOf(ClassInstanceCreation) then
    mInv1.oclAsType(ClassInstanceCreation).expression
  else
    null
  endif endif in
  (not e3.oclIsUndefined())  and
  --Remaining Elements Conditions
  ClassDeclaration.allInstances()->exists(c4 |
    c4.package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
      fullName.concat(p.name).concat('.')
    ).concat(c4.oclAsType(BodyDeclaration).name) = 'java.lang.String' and
  --Filter Conditions
  let statement: OclAny = e3->asOrderedSet()->closure(x |
    if x.oclIsKindOf(ParenthesizedExpression) then 
      x.oclAsType(ParenthesizedExpression).expression 
    else if x.oclIsKindOf(Assignment) then 
      x.oclAsType(Assignment).leftHandSide
    else
      x
    endif endif
  )->last() in
  if statement.oclIsKindOf(ClassInstanceCreation) then
    statement.oclAsType(ClassInstanceCreation).type.type = c4
  else if statement.oclIsKindOf(MethodInvocation) then
    if statement.oclAsType(MethodInvocation).method.oclIsKindOf(MethodDeclaration) and (not statement.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
      statement.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.type = c4
    else
      false
    endif
  else if statement.oclIsKindOf(SingleVariableAccess) then
    if statement.oclAsType(SingleVariableAccess).oclAsType(SingleVariableAccess).variable.oclIsKindOf(SingleVariableDeclaration) then
      statement.oclAsType(SingleVariableAccess).variable.oclAsType(SingleVariableDeclaration).type.type = c4
    else if statement.oclAsType(SingleVariableAccess).variable.oclIsKindOf(VariableDeclarationFragment) then
      statement.oclAsType(SingleVariableAccess).variable.oclAsType(VariableDeclarationFragment).variablesContainer.type.type = c4
    else
     false
    endif endif
  else if statement.oclIsKindOf(InfixExpression) then
    let infixElements: OrderedSet(OclAny) = statement.oclAsType(InfixExpression).extendedOperands->append(statement.oclAsType(InfixExpression).leftOperand)->append(statement.oclAsType(InfixExpression).rightOperand)->asOrderedSet()->closure(x | 
      if x.oclIsKindOf(ParenthesizedExpression) then x.oclAsType(ParenthesizedExpression).expression 
      else if x.oclIsKindOf(InfixExpression) then x.oclAsType(InfixExpression).extendedOperands->append(x.oclAsType(InfixExpression).leftOperand)->append(x.oclAsType(InfixExpression).rightOperand)
      else Set(OclAny){x} endif endif
    )  in 
    if statement.oclAsType(InfixExpression).operator = InfixExpressionKind::PLUS and
       infixElements->exists(stringStatement | --NOT_COUNT
         (stringStatement.oclIsKindOf(ClassInstanceCreation) and stringStatement.oclAsType(ClassInstanceCreation).type.type.name = 'String') or
         (stringStatement.oclIsKindOf(MethodInvocation) and 
         (not stringStatement.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) and
         stringStatement.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.type.name = 'String' ) or
         (stringStatement.oclIsKindOf(SingleVariableAccess) and 
         (let accessType: String = if stringStatement.oclAsType(SingleVariableAccess).variable.oclIsKindOf(VariableDeclarationFragment) then
           stringStatement.oclAsType(SingleVariableAccess).variable.oclAsType(VariableDeclarationFragment).variablesContainer.type.type.name
         else if stringStatement.oclAsType(SingleVariableAccess).variable.oclIsKindOf(SingleVariableDeclaration) then
           stringStatement.oclAsType(SingleVariableAccess).variable.oclAsType(SingleVariableDeclaration).type.type.name
         else
           ''
         endif endif in accessType = 'String')) or
         (stringStatement.oclIsKindOf(StringLiteral) )
       )   
    then
      ClassDeclaration.allInstances()->select(str | str.name = 'String')->asOrderedSet()->first() = c4
    else
      false
    endif
  else if statement.oclIsKindOf(StringLiteral) then
    ClassDeclaration.allInstances()->select(str | str.name = 'String')->asOrderedSet()->first() = c4
  else if statement.oclIsKindOf(ArrayAccess) then
    let arrayAccesses: OrderedSet(OclAny) = statement.oclAsType(ArrayAccess)->asOrderedSet()->closure(x |
      if x.oclIsKindOf(ArrayAccess) then x.oclAsType(ArrayAccess).array else x endif
    ) in
    let arrayDimensions: Integer = if arrayAccesses->last().oclIsKindOf(SingleVariableAccess) then
      arrayAccesses->last().oclAsType(SingleVariableAccess).variable.extraArrayDimensions
    else if arrayAccesses->last().oclIsKindOf(MethodInvocation) and arrayAccesses->last().oclAsType(MethodInvocation).method.oclIsKindOf(MethodDeclaration) 
      and (not arrayAccesses->last().oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
      arrayAccesses->last().oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.type.oclAsType(ArrayType).dimensions
    else
     null
    endif endif in (not arrayDimensions.oclIsUndefined()) and
    let arrayBaseType: OclAny = if arrayAccesses->last().oclIsKindOf(SingleVariableAccess) and arrayAccesses->last().oclAsType(SingleVariableAccess).variable.oclIsKindOf(SingleVariableDeclaration) then
      arrayAccesses->last().oclAsType(SingleVariableAccess).variable.oclAsType(SingleVariableDeclaration).type.type
    else if arrayAccesses->last().oclIsKindOf(SingleVariableAccess) and arrayAccesses->last().oclAsType(SingleVariableAccess).variable.oclIsKindOf(VariableDeclarationFragment) then
      arrayAccesses->last().oclAsType(SingleVariableAccess).variable.oclAsType(VariableDeclarationFragment).variablesContainer.type.type 
    else if arrayAccesses->last().oclIsKindOf(MethodInvocation) and arrayAccesses->last().oclAsType(MethodInvocation).method.oclIsKindOf(MethodDeclaration) 
      and (not arrayAccesses->last().oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
      arrayAccesses->last().oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.type.oclAsType(ArrayType).elementType.type
    else
      null
    endif endif endif in (not arrayBaseType.oclIsUndefined()) and
    if arrayDimensions = arrayAccesses->select(x | x.oclIsKindOf(ArrayAccess))->size() then
      arrayBaseType = c4  
    else
      false
    endif
  else
   false
  endif endif endif endif endif endif
))
