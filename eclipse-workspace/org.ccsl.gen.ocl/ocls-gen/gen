(
  VariableDeclarationFragment.allInstances()->select(varDecl1 |
    let lit2: OclAny = varDecl1.initializer in
    let lit2Value: String = if lit2.oclIsKindOf(BooleanLiteral) then
      lit2.oclAsType(BooleanLiteral).value.toString()
    else
      null
    endif in
    (not lit2Value.oclIsUndefined()) and
    lit2Value = 'false' and
    let primitiveType3: OclAny = varDecl1.variablesContainer.type.type in
    (primitiveType3.oclIsKindOf(PrimitiveTypeBoolean))  
  )
->union(
    VariableDeclarationFragment.allInstances()->select(varDecl1 |
      let lit2: OclAny = varDecl1.initializer in
      (lit2.oclIsKindOf(StringLiteral) or lit2.oclIsKindOf(CharacterLiteral) or lit2.oclIsKindOf(NumberLiteral) or lit2.oclIsKindOf(BooleanLiteral)) and
      let primitiveType3: OclAny = varDecl1.variablesContainer.type.type in
      (primitiveType3.oclIsKindOf(PrimitiveType)) and
      primitiveType3.oclAsType(PrimitiveType).name.matches('(byte|short|char|int|long|float|double)') and
      let literalNameRegex: String = if lit2.oclIsKindOf(StringLiteral) then
        lit2.oclAsType(StringLiteral).escapedValue
      else if lit2.oclIsKindOf(CharacterLiteral) then
        lit2.oclAsType(CharacterLiteral).escapedValue
      else if lit2.oclIsKindOf(NumberLiteral) then
        lit2.oclAsType(NumberLiteral).tokenValue
      else if lit2.oclIsKindOf(BooleanLiteral) then
        lit2.oclAsType(BooleanLiteral).value.toString()
      else if lit2.oclIsKindOf(NullLiteral) then
        'null'
      else
        null
      endif endif endif endif endif in
      (not literalNameRegex.oclIsUndefined()) and
      literalNameRegex.matches('(0|\\.0f|0d)')
    )
  )->union(
    VariableDeclarationFragment.allInstances()->select(varDecl1 |
      let lit2: OclAny = varDecl1.initializer in
      (lit2.oclIsKindOf(NullLiteral)) and
      let c3: OclAny = varDecl1.variablesContainer.type.type in
      (c3.oclIsKindOf(ClassDeclaration) or c3.oclIsKindOf(InterfaceDeclaration))  
    )
  )->union(
    VariableDeclarationFragment.allInstances()->select(varDecl1 |
      let lit2: OclAny = varDecl1.initializer in
      (lit2.oclIsKindOf(NullLiteral)) and
      varDecl1.extraDimensions >= 0  
    )
  )
)
