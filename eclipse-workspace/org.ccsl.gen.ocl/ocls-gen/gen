let violations: Set(ASTNode) = Block.allInstances()->select(block1 |
  --Scope Conditions
  let ifStatement2: OclAny = block1.oclContainer() in (not ifStatement2.oclIsUndefined()) and
  ifStatement2.oclIsKindOf(IfStatement) and
  ifStatement2.oclAsType(IfStatement).elseStatement = block1
)
->reject(node | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc))) 
->select(node: ASTNode | not node.originalCompilationUnit.oclIsUndefined()) in
violations->collect(node: ASTNode | 
	let container: NamedElement = node->asOrderedSet()->closure(x |
        if x.oclIsKindOf(AbstractMethodDeclaration) or x.oclIsKindOf(AbstractTypeDeclaration) then
		  x
		else
		  x.oclContainer()
	    endif
	)->last() in if (not container.oclIsUndefined()) and (not container.originalCompilationUnit.oclIsUndefined()) then
      'Violation Found at '.concat(container.originalCompilationUnit.originalFilePath).concat(' on ').concat(container.name)
    else
      ''
    endif
)->asSequence()->select(violation | violation.size() > 0)
->append('#violations: '.concat(violations->size().toString()))
