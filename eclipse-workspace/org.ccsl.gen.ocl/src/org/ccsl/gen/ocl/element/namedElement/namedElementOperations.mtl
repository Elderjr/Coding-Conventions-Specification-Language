[comment encoding = UTF-8 /]
[module namedElementOperations('http://www.example.org/ccsl/elements/namedElements')]
[import org::ccsl::gen::ocl::element::elementOperations /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /]


[query public getNamedElementConditions(namedElement: NamedElement, varname: String, typecheck: Boolean): OrderedSet(String) = 
OrderedSet(String){
  namedElement.generatesConditionNamedElementForName(varname)
}->select(s | s.trim().size() > 0)
->addAll(namedElement.getElementConditions(varname, typecheck))

/]

[query public getNamedElementConditions(namedElement: NamedElement, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) = 
OrderedSet(String){
  namedElement.generatesConditionNamedElementForName(varname)
}->select(s | s.trim().size() > 0)
->addAll(namedElement.getElementConditions(varname, typecheck, metaclass))
/]

[template public generatesConditionNamedElementForName(namedElement: NamedElement, varname: String) ? (not namedElement.name.oclIsUndefined())]
[varname /].oclAsType(NamedElement).name = '[namedElement.name /]'
[/template]


[template public generatesConditionNamedElementForName(javaClass: JavaClass, varname: String) ? ( (not javaClass.name.oclIsUndefined()) and (javaClass.name.contains('.')) )]
[varname /].package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
  fullName.concat(p.name).concat('.')
).concat([varname /].name) = '[javaClass.name /]'
[/template]