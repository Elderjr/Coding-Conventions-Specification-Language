[comment encoding = UTF-8 /]
[module elementOperations('http://www.example.org/ccsl')  /]
[import org::ccsl::gen::ocl::commom::elementIdentifierService /]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::element::scopeConditionsGeneratorDispatcher /]
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]



[query public getElementConditions(element: Element, varname: String, typecheck: Boolean): OrderedSet(String) = 
OrderedSet(String){
  element.generatesConditionForAncestor(varname)
}->select(s | s.trim().size() > 0)
/]

[template public generatesConditionForAncestor(element: Element, varname: String) ? 
((not element.eContainer().oclIsUndefined()) and (element.eContainer().oclIsKindOf(Element)) and (not isElementRegistered(element.eContainer().oclAsType(Element))))]
[element.generatesMonovaluedFieldConditions(varname, element.eContainer().oclAsType(Element), 'oclContainer()', 'OclAny') /]
[/template]


[template public generatesConditionForProperties(element: CodeElement, varname: String, properties: OrderedSet(Property)) post(trim())]
[for (property: Property | properties) separator (' and ')]
[if property.name = 'public'] [varname /].modifier.visibility = java::VisibilityKind::public[elseif property.name = 'private']
[varname /].modifier.visibility = java::VisibilityKind::private[elseif property.name = 'static']
[varname /].modifier.static[elseif property.name = 'final']
[varname /].modifier.inheritance = java::InheritanceKind::final[/if][/for]
[/template]



