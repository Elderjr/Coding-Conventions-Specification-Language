[comment encoding = UTF-8 /]
[module complexTypeOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::element::elementOperations /]
[import org::ccsl::gen::ocl::element::namedElement::namedElementOperations /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /] 
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]

[query public getComplexTypeConditions(complexType: ComplexType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let newVarname: String = if typecheck then
  varname.printWithCast(metaclass)
else
  varname
endif in
let conditions: OrderedSet(String) = OrderedSet(String) {
  complexType.generatesConditionForFields(newVarname, metaclass),
  complexType.generatesConditionForMethods(newVarname, metaclass)
}->addAll(complexType.getNamedElementConditions(newVarname, false))
->select(s | s.trim().size() > 0) in
if typecheck then
  OrderedSet(String){varname.printKindOfCondition(metaclass)}->addAll(conditions)
else
  conditions
endif
/]

[template public generatesConditionForFields(complexType: ComplexType, varname: String, metaclass: String) ? (complexType.fields->size() > 0)]
[complexType.generatesMultivaluedFieldConditions(varname, complexType.fields, complexType.getOclName().concat('Fields'), 'bodyDeclarations', 'OclAny') /]
[/template]

[template public generatesConditionForMethods(complexType: ComplexType, varname: String, metaclass: String) ? (complexType.methods->size() > 0)]
[complexType.generatesMultivaluedFieldConditions(varname, complexType.methods, complexType.getOclName().concat('Methods'), 'bodyDeclarations', 'OclAny') /]
[/template]
