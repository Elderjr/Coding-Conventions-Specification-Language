[comment encoding = UTF-8 /]
[module instanceCreationOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::element::statement::methodInvocationOperations /]
[import org::ccsl::gen::ocl::element::elementOperations /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /]
[import org::ccsl::gen::ocl::dispatchers::generatesElementConditionsDispatcher /]


[query public getInstanceCreationMatchingMetaclasses(inst: InstanceCreation): OrderedSet(String)=
  OrderedSet(String){'ClassInstanceCreation'}
/]

[query public getInstanceCreationConditions(inst: InstanceCreation, varname: String, typecheck: Boolean): OrderedSet(String) =
let newVarname: String = if typecheck then
  varname.printWithCast('ClassInstanceCreation')
else
  varname
endif in
let conditions: OrderedSet(String) = OrderedSet(String) {
  inst.generatesConditionsForType(varname)
}->addAll(inst.getMethodInvocationConditions(newVarname, false, 'InstanceCreation'))
->select(s | s.isNotEmpty()) in
if typecheck then
  OrderedSet(String){varname.printKindOfCondition('InstanceCreation')}->addAll(conditions)
else
  conditions
endif
/]

[template private generatesConditionsForType(inst: InstanceCreation, varname: String) ? (not inst.type.oclIsUndefined())]
let [inst.type.getOclName() /]: ASTNode = if [varname /].type.type.oclIsKindOf(ParameterizedType) then
  [varname /].type.type.oclAsType(ParameterizedType).type.type
else
  [varname /].type.type
endif in (not [inst.type.getOclName() /].oclIsUndefined()) and
[inst.type.generatesConditions(inst.type.getOclName(), true) /]
[/template]

