[comment encoding = UTF-8 /]
[module literalValueOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils /]

[query public getLiteralMatchingJavaMetaclasses(literal: LiteralValue): OrderedSet(String)= 
  if not literal.type.oclIsUndefined() then
    if literal.type.name = 'string' then
      OrderedSet(String){'StringLiteral'}
    else if literal.type.name = 'character' then
      OrderedSet(String){'CharacterLiteral'}
    else if literal.type.name.matches('short|int|long|float|double') then
      OrderedSet(String){'NumberLiteral'}
    else if literal.type.name = 'boolean' then
      OrderedSet(String){'BooleanLiteral'}
    else if literal.type.name = 'null' then
      OrderedSet(String){'NullLiteral'}
    else
      OrderedSet(String){}
    endif endif endif endif endif
  else
    OrderedSet(String){'StringLiteral', 'CharacterLiteral', 'NumberLiteral', 'BooleanLiteral'}
  endif
/]

[query public getLiteralValueMatchingFieldByJavaMetaclass(literal: LiteralValue, javaMetaclass: String): String = 
  if javaMetaclass = 'CharacterLiteral' or javaMetaclass  = 'StringLiteral' then
    'escapedValue'
  else if javaMetaclass = 'NumberLiteral' then
    'tokenValue'
  else if javaMetaclass = 'BooleanLiteral' then
    'value'
  else
    ''
  endif endif endif
/]

[query public getLiteralConditions(literal: LiteralValue, varname: String): OrderedSet(String) = 
if not literal.value.oclIsUndefined() then
  OrderedSet(String){literal.generatesConditionForValue(varname)}
else
  OrderedSet(String){literal.generatesConditionWhenValueNotSpecified(varname)}
endif
/]

[template public generatesConditionWhenValueNotSpecified(literal: LiteralValue, varName: String)]
([for (type: String | literal.getLiteralMatchingJavaMetaclasses()) separator(' or ')]
[varName /].oclIsKindOf([type /])[/for])
[/template]

[template public generatesConditionForValue(literal: LiteralValue, varName: String)]
[let matchingJavaMetaclasses: OrderedSet(String) = literal.getLiteralMatchingJavaMetaclasses()]
[for (type: String | matchingJavaMetaclasses) separator(' or ')]
([varName.printKindOfCondition(type) /] and [varName.printWithCast(type) /].[literal.getLiteralValueMatchingFieldByJavaMetaclass(type) /] = [literal.generatesLiteralExpressionValue(type) /])[/for]
[/let]
[/template]

[template public generatesLiteralExpressionValue(literal: LiteralValue, javaMetaclass: String)]
[if javaMetaclass = 'CharacterLiteral']
'[literal.value /]'[elseif javaMetaclass = 'StringLiteral' and literal.value.size() > 0]
'"[literal.value /]"'[elseif javaMetaclass = 'StringLiteral' and literal.value.size() = 0]
'""'[else][literal.value /][/if]
[/template]

