[comment encoding = UTF-8 /]
[module operatorExpressionOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /]
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]
[import org::ccsl::gen::ocl::commom::stringUtils /]

[query public getOperatorExpressionConditions(operatorExpression: OperatorExpression, varname: String, typecheck: Boolean): OrderedSet(String) = 
OrderedSet(String){
  operatorExpression.generatesConditionForOperator(varname) ,
  operatorExpression.generatesConditionForOperands(varname)
}->select(s | s.isNotEmpty())
/]

[template public generatesConditionForOperator(operatorExpression : OperatorExpression, varname: String) ? (not operatorExpression.oclIsUndefined())]
[varname /].operator = [if operatorExpression.operator = '+']
InfixExpressionKind::PLUS[elseif operatorExpression.operator = '+=']
AssignmentKind::PLUS_ASSIGN[/if]
[/template]

[template private generatesOperandsLetStatement(operatorExpression: OperatorExpression, varname: String, letName: String) ? (operatorExpression.operands->size() > 0 and operatorExpression.oclIsKindOf(StringConcatenation))]
let [letName /]: OrderedSet(OclAny) = if [varname /].oclIsKindOf(InfixExpression) then
  [varname /].oclAsType(InfixExpression).extendedOperands->asOrderedSet()->append([varname /].oclAsType(InfixExpression).leftOperand)->append([varname /].oclAsType(InfixExpression).rightOperand)
else if [varname /].oclIsKindOf(Assignment) then
  [varname /].oclAsType(Assignment).rightHandSide->asOrderedSet()
else
 OrderedSet(OclAny){}
endif endif
[/template]

[template private generatesOperandsLetStatement(operatorExpression: OperatorExpression, varname: String, letName: String) ? (operatorExpression.operands->size() > 0 and operatorExpression.oclIsKindOf(Assignment))]
let [letName /]: OrderedSet(OclAny) = [varname /].rightHandSide->asOrderedSet()
[/template]

[template public generatesConditionForOperands(operatorExpression: OperatorExpression, varname: String) ? (operatorExpression.operands->size() > 0 and operatorExpression.oclIsKindOf(StringConcatenation))]
[operatorExpression.generatesOperandsLetStatement(varname, operatorExpression.getOclName().concat('Operands')) /]->closure(x | 
  if x.oclIsKindOf(ParenthesizedExpression) then x.oclAsType(ParenthesizedExpression).expression else x endif
) in
[operatorExpression.generatesMultivaluedFieldConditions(operatorExpression.getOclName().concat('Operands'), operatorExpression.operands, 'OclAny') /]
[/template]

