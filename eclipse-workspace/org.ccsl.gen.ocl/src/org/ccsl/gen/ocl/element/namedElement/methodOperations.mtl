[comment encoding = UTF-8 /]
[module methodOperations('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::element::namedElement::namedElementOperations /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /] 
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]

[query public getMethodMatchingJavaMetaclasses(method: Method): OrderedSet(String)= 
OrderedSet(String){'MethodDeclaration', 'ConstructorDeclaration'}
/]


[query public getMethodConditions(method: Method, varname: String, typecheck: Boolean): OrderedSet(String) = 
OrderedSet(String) {
  method.generatesMethodTypecheckCondition(varname, typecheck),
  method.generatesConditionForReturnType(varname),
  method.generatesConditionForParams(varname, typecheck)
}->addAll(method.getNamedElementConditions(varname, typecheck))
->select(s | s.trim().size() > 0)
/]


[template public generatesMethodTypecheckCondition(method: Method, varname: String, typecheck: Boolean) ? (typecheck)]
([for (metaclass: String | method.getMethodMatchingJavaMetaclasses()) separator(' or ')]
[varname.printKindOfCondition(metaclass) /][/for])
[/template]

[template public generatesConditionForReturnType(method: Method, varname: String) ? (not method.returnType.oclIsUndefined())]
(not [varname /].returnType.oclIsUndefined()) and
[method.generatesMonovaluedFieldConditions(varname, method.returnType, 'returnType.type', 'OclAny') /]
[/template]

[template public generatesConditionForParams(method: Method, varname: String, typecheck: Boolean) ? (method.isSet('params'))]
[if typecheck]
[method.generatesMultivaluedFieldConditions(varname, method.params, method.getMethodMatchingJavaMetaclasses(), method.getOclName().concat('Params'), 'parameters', 'SingleVariableDeclaration') /][else]
[method.generatesMultivaluedFieldConditions(varname, method.params, method.getOclName().concat('Params'), 'parameters', 'SingleVariableDeclaration') /][/if]
[/template]