[comment encoding = UTF-8 /]
[module methodOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::element::elementOperations /]
[import org::ccsl::gen::ocl::element::namedElement::namedElementOperations /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /] 
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /] 

[query public getMethodMatchingJavaMetaclasses(method: Method): OrderedSet(String)= 
OrderedSet(String){'MethodDeclaration'}
/]


[query public getMethodConditions(method: Method, varname: String, typecheck: Boolean): OrderedSet(String) = 
let newVarname: String = varname.printVarname(typecheck, 'MethodDeclaration') in
let conditions: OrderedSet(String) = OrderedSet(String) {
  method.generatesConditionForReturnType(newVarname),
  method.generatesConditionForParams(newVarname)
}->addAll(method.getNamedElementConditions(newVarname, false))
->select(s | s.trim().size() > 0) in
if typecheck then
  OrderedSet(String){varname.printKindOfCondition('MethodDeclaration')}->addAll(conditions)
else
  conditions
endif
/]


[template public generatesConditionForReturnType(method: Method, varname: String) ? (not method.returnType.oclIsUndefined())]
[method.generatesMonovaluedFieldConditions(varname, method.returnType, 'returnType.type', 'OclAny') /]
[/template]

[template public generatesConditionForParams(method: Method, varname: String) ? (method.isSet('params'))]
[method.generatesMultivaluedFieldConditions(varname, method.params, method.getOclName().concat('params'), 'parameters', 'SingleVariableDeclaration') /]
[/template]