[comment encoding = UTF-8 /]
[module methodOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::element::elementOperations /]
[import org::ccsl::gen::ocl::element::namedElement::namedElementOperations /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]

[template private printAllConditionsMethod(method: Method, varName: String, exactMatch: Boolean)]
[let allConditions: OrderedSet(String) = OrderedSet(String){
  method.generatesConditionsNamedElement(varName, exactMatch, false),
  method.generatesConditionsForReturnType(varName),
  method.generatesConditionsForParams(varName)
}->select(s | s.trim().size() > 0)]
[for (condition: String | allConditions) separator(' and\n')]
[condition.printStringWithIdentation() /][/for][/let]
[/template]

[template public generatesConditionsMethod(method: Method, varName: String, exactMatch: Boolean, typeCheck:Boolean)]
-- Method Conditions
[if not typeCheck]
[method.printAllConditionsMethod(varName, exactMatch) /][else]
[let newVarName: String = varName.concat('.oclAsType(MethodDeclaration)')]
[let conditions: String = method.printAllConditionsMethod(newVarName, exactMatch)]
[varName /].oclIsKindOf(MethodDeclaration)[if conditions.trim().size() > 0] and
[conditions.printStringWithIdentation() /][/if][/let][/let][/if]
[/template]

[template public generatesConditionsForReturnType(method: Method, varName: String)]
[if (not method.returnType->oclIsUndefined()) and (method.returnType->size() > 0) ]
[let returnType: DataType = method.returnType]
[if returnType.oclIsKindOf(ComplexType)]
[method.generatesGenericConditionsForAttribute(returnType.oclAsType(ComplexType), 'returnType.type', false, varName, false) /][else]
[varName /].returnType.type.name = '[returnType.oclAsType(PrimitiveType).name /]'[/if][/let][/if]
[/template]

[template public generatesConditionsForParams(method: Method, varName: String)]
[if method.isSet('params')]
[method.generatesGenericConditionsForAttribute(method.params, 'parameters', true, varName, false) /] [if method.exact][if method.params->size() > 0] and 
[/if][varName /].parameters->size() = [method.params->size() /][/if][/if]
[/template]

