[comment encoding = UTF-8 /]
[module elementConditionsGeneratorDispatcher('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils/]
[import org::ccsl::gen::ocl::element::statement::instanceCreationOperations /]
[import org::ccsl::gen::ocl::java::javaClassOperations /]

[comment element/namedElement /]
[import org::ccsl::gen::ocl::element::namedElement::complexTypeOperations /]
[import org::ccsl::gen::ocl::element::namedElement::methodOperations /]
[import org::ccsl::gen::ocl::element::namedElement::variableOperations /]
[import org::ccsl::gen::ocl::element::namedElement::vectorVariableOperations /]

[comment element/statement /]
[import org::ccsl::gen::ocl::element::statement::methodInvocationOperations /]
[import org::ccsl::gen::ocl::element::statement::literalValueOperations /]
[import org::ccsl::gen::ocl::element::datatype::primitiveTypeOperations /]
[import org::ccsl::gen::ocl::element::statement::variableDeclarationOperations /]

[comment element/statement/expression /]
[import org::ccsl::gen::ocl::element::statement::expression::stringConcatenationOperations /]
[import org::ccsl::gen::ocl::element::statement::expression::infixExpressionOperations /]

[comment element/statement/controlFlow /]
[import org::ccsl::gen::ocl::element::statement::controlFlow::switchStatementOperations /]




[template private printConditions(element: Element, conditions: OrderedSet(String))]
[for (condition: String | conditions) separator(' and\n')]
[condition.printStringWithIdentation() /][/for]
[/template]

[template public generatesConditions(element: Element, varname: String) /]
[template public generatesConditions(element: Element, varname: String, typecheck: Boolean) /]
[template public generatesConditions(element: Element, varname: String, typecheck: Boolean, metaclass: String)]

[element.generatesConditions(varname, typecheck) /]
[/template]

[comment namedElement/ComplexType /]
[template public generatesConditions(complexType: ComplexType, varname: String)]
[complexType.generatesConditions(varname, complexType.getComplexTypeMatchingMetaclasses()->size() > 1) /]
[/template]

[template public generatesConditions(complexType: ComplexType, varname: String, typecheck: Boolean)]
[complexType.printConditions(complexType.getComplexTypeConditions(varname, typecheck)) /]
[/template]

[template public generatesConditions(complexType: ComplexType, varname: String, typecheck: Boolean, metaclass: String)]
[complexType.printConditions(complexType.getComplexTypeConditions(varname, typecheck, metaclass)) /]
[/template]

[comment namedElement/Variable /]
[template public generatesConditions(var: Variable, varname: String)]
[var.generatesConditions(varname, var.getVariableMatchingJavaMetaclasses()->size() > 1) /]
[/template]

[template public generatesConditions(var: Variable, varname: String, typecheck: Boolean)]
[var.printConditions(var.getVariableConditions(varname, typecheck)) /]
[/template]

[template public generatesConditions(var: Variable, varname: String, typecheck: Boolean, metaclass: String)]
[var.printConditions(var.getVariableConditions(varname, typecheck, metaclass)) /]
[/template]

[comment namedElement/VariableVector /]
[template public generatesConditions(var: VariableVector, varname: String)]
[var.generatesConditions(varname, var.getVariableMatchingJavaMetaclasses()->size() > 1) /]
[/template]

[template public generatesConditions(var: VariableVector, varname: String, typecheck: Boolean)]
[var.printConditions(var.getVectorVariableConditions(varname, typecheck)) /]
[/template]

[template public generatesConditions(var: VariableVector, varname: String, typecheck: Boolean, metaclass: String)]
[var.printConditions(var.getVectorVariableConditions(varname, typecheck, metaclass)) /]
[/template]

[comment namedElement/Method /]
[template public generatesConditions(method: Method, varname: String)]
[method.generatesConditions(varname, method.getMethodMatchingJavaMetaclasses()->size () > 1) /]
[/template]

[template public generatesConditions(method: Method, varname: String, typecheck: Boolean)]
[method.printConditions(method.getMethodConditions(varname, typecheck)) /]
[/template]


[comment datatype/PrimitiveType /]
[template public generatesConditions(primitiveType: PrimitiveType, varname: String)]
[primitiveType.generatesConditions(varname, primitiveType.getPrimitiveTypeMatchingMetaclasses()->size() > 1) /]
[/template]

[template public generatesConditions(primitiveType: PrimitiveType, varname: String, typecheck: Boolean)]
[primitiveType.printConditions(primitiveType.getPrimitiveTypeConditions(varname)) /]
[/template]


[comment statements/InfixExp /]
[template public generatesConditions(infix: InfixExpression, varname: String)]
[infix.generatesConditions(varname, false) /]
[/template]

[template public generatesConditions(infix: InfixExpression, varname: String, typecheck: Boolean)]
[infix.printConditions(infix.getInfixConditions(varname, typecheck)) /]
[/template]

[comment statements/MethodInvocation /]
[template public generatesConditions(methodInv: MethodInvocation, varname: String)]
[methodInv.generatesConditions(varname, methodInv.getMethodInvocationMatchingMetaclasses()->size() > 1) /]
[/template]

[template public generatesConditions(methodInv: MethodInvocation, varname: String, typecheck: Boolean)]
[methodInv.printConditions(methodInv.getMethodInvocationConditions(varname, typecheck)) /]
[/template]

[template public generatesConditions(methodInv: MethodInvocation, varname: String, typecheck: Boolean, metaclass: String)]
[methodInv.printConditions(methodInv.getMethodInvocationConditions(varname, typecheck, metaclass)) /]
[/template]

[comment statements/LiteralValue /]
[template public generatesConditions(literal: LiteralValue, varname: String)]
[literal.generatesConditions(varname, literal.getLiteralMatchingMetaclasses()->size() > 1) /]
[/template]

[template public generatesConditions(literal: LiteralValue, varname: String, typecheck: Boolean)]
[literal.printConditions(literal.getLiteralConditions(varname, typecheck)) /]
[/template]

[comment statements/StringConcatenation /]
[template public generatesConditions(strConcat: StringConcatenation, varname: String)]
[strConcat.generatesConditions(varname, strConcat.getStringConcatenationMatchingMetaclasses()->size() > 1) /]
[/template]

[template public generatesConditions(strConcat: StringConcatenation, varname: String, typecheck: Boolean)]
[strConcat.printConditions(strConcat.getStringConcatenationConditions(varname, typecheck)) /]
[/template]

[comment statements/VarDeclaration /]
[template public generatesConditions(varDecl: VarDeclaration, varname: String)]
[varDecl.generatesConditions(varname, varDecl.getVariableDeclarationMatchingJavaMetaclasses()->size() > 1) /]
[/template]

[template public generatesConditions(varDecl: VarDeclaration, varname: String, typecheck: Boolean)]
[varDecl.printConditions(varDecl.getVariableDeclarationConditions(varname, typecheck)) /]
[/template]

[template public generatesConditions(varDecl: VarDeclaration, varname: String, typecheck: Boolean, metaclass: String)]
[varDecl.printConditions(varDecl.getVariableDeclarationConditions(varname, typecheck, metaclass)) /]
[/template]

[comment statements/InstanceCreation /]
[template public generatesConditions(inst: InstanceCreation, varname: String)]
[inst.generatesConditions(varname, inst.getInstanceCreationMatchingMetaclasses()->size() > 1) /]
[/template]

[template public generatesConditions(inst: InstanceCreation, varname: String, typecheck: Boolean)]
[inst.printConditions(inst.getInstanceCreationConditions(varname, typecheck)) /]
[/template]

[template public generatesConditions(inst: InstanceCreation, varname: String, typecheck: Boolean,  metaclass: String)]
[inst.printConditions(inst.getInstanceCreationConditions(varname, typecheck)) /]
[/template]

[comment statements/controlFlow/SwitchStatement /]
[template public generatesConditions(switch: SwitchStatement, varname: String)]
[switch.generatesConditions(varname, switch.getSwitchStatementMatchingMetaclasses()->size() > 1) /]
[/template]

[template public generatesConditions(switch: SwitchStatement, varname: String, typecheck: Boolean)]
[switch.printConditions(switch.getSwitchStatementConditions(varname, typecheck)) /]
[/template]

[template public generatesConditions(switch: SwitchStatement, varname: String, typecheck: Boolean, metaclass: String)]
[switch.printConditions(switch.getSwitchStatementConditions(varname, typecheck)) /]
[/template]

[comment namedElement/JavaClass /]
[template public generatesConditions(javaClass: JavaClass, varname: String)]
[javaClass.generatesConditions(varname, javaClass.getJavaClassMatchingMetaclasses()->size() > 1) /]
[/template]

[template public generatesConditions(javaClass: JavaClass, varname: String, typecheck: Boolean)]
[javaClass.printConditions(javaClass.getJavaClassConditions(varname, typecheck)) /]
[/template]

[template public generatesConditions(javaClass: JavaClass, varname: String, typecheck: Boolean, metaclass: String)]
[javaClass.generatesConditions(varname, typecheck) /]
[/template]