[comment encoding = UTF-8 /]
[module variableOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::element::elementOperations /]
[import org::ccsl::gen::ocl::element::namedElement::namedElementOperations /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /]
[import org::ccsl::gen::ocl::commom::elementIdentifierService /]
[import org::ccsl::gen::ocl::element::scopeConditionsGeneratorDispatcher /]
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]

[query public getVariableMatchingJavaMetaclasses(variable: Variable): OrderedSet(String)=
  if variable.eContainer().oclIsKindOf(ComplexType) then
    OrderedSet(String){'FieldDeclaration'}
  else if variable.eContainer().oclIsKindOf(Method) then
    OrderedSet(String){'SingleVariableDeclaration'}
  else
    OrderedSet(String){'SingleVariableDeclaration', 'VariableDeclarationFragment'}
  endif endif
/]

[query public getVariableFieldMatchingName(var: Variable, metaclass: String): String =
 if metaclass = 'VariableDeclarationFragment' then
  'variablesContainer.type.type'
 else
  'type.type' 
 endif
/]

[query public getVariableConditions(var: Variable, varname: String, typecheck: Boolean): OrderedSet(String) = 
OrderedSet(String){
  var.generatesConditionsForType(varname)
}->select(s | s.trim().size() > 0)
/]

[query public getVariableConditions(var: Variable, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let newVarname: String = if typecheck then
  varname.printWithCast(metaclass)
else
  varname
endif in
let conditions: OrderedSet(String) = OrderedSet(String) {
  var.generatesConditionsForType(newVarname, metaclass)
}->select(s | s.trim().size() > 0) in
if typecheck then
  OrderedSet(String){varname.printKindOfCondition(metaclass)}->addAll(conditions)
else
  conditions
endif
/]

[template public generatesConditionsForType(var: Variable, varname: String) ? (not var.type.oclIsUndefined())]
[var.generatesMonovaluedFieldConditions(varname, var.type, 'OclAny',
OrderedSet(OrderedSet(String)){
  OrderedSet(String){'FieldDeclaration', 'type.type'},
  OrderedSet(String){'SingleVariableDeclaration', 'type.type'},
  OrderedSet(String){'VariableDeclarationFragment', 'variablesContainer.type.type'}  
}) /]
[/template]

[template public generatesConditionsForType(var: Variable, varname: String, metaclass: String) ? (not var.type.oclIsUndefined())]
[var.generatesMonovaluedFieldConditions(varname, var.type, var.getVariableFieldMatchingName(metaclass), 'OclAny') /]
[/template]