[comment encoding = UTF-8 /]
[module variableOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::element::elementOperations /]
[import org::ccsl::gen::ocl::element::namedElement::namedElementOperations /]
[import org::ccsl::gen::ocl::commom::stringUtils /]

[query public getAllVariableMetaclasses(variable: Variable): OrderedSet(String)=
  if variable.eContainer().oclIsKindOf(ComplexType) then
    OrderedSet(String){'FieldDeclaration'}
  else if variable.eContainer().oclIsKindOf(Method) then
    OrderedSet(String){'SingleVariableDeclaration'}
  else
    OrderedSet(String){'SingleVariableDeclaration', 'VariableDeclarationFragment'}
  endif endif
/]

[template private printAllConditionsVariable(var: Variable, varName: String, metaclassTarget: String)]
[let allConditions: OrderedSet(String) = OrderedSet(String){
  var.generatesConditionsNamedElement(varName, false, false),
  var.generatesConditionsForType(varName, metaclassTarget)
}->select(s | s.trim().size() > 0)]
[for (condition: String | allConditions) separator(' and\n')]
[condition.printStringWithIdentation() /][/for][/let]
[/template]

[template public generatesConditionsVariable(var: Variable, varName: String, typeCheck:Boolean)]
--Variable Conditions
[let metaclassesTarget: OrderedSet(String) = var.getAllVariableMetaclasses()]
[if metaclassesTarget->size() > 1]
[for(metaclassTarget: String | metaclassesTarget) separator(' or ')]
[let variableConditions: String = var.printAllConditionsVariable(varName.concat('.oclAsType(').concat(metaclassTarget).concat(')'), metaclassTarget)]
(
  [varName /].oclIsKindOf([metaclassTarget /]) [if variableConditions.trim().size() > 0 ] and
  [variableConditions.printStringWithIdentation() /]
)[/if][/let][/for][else]
[let variableConditions: String = var.printAllConditionsVariable(varName.concat('.oclAsType(').concat(metaclassesTarget->first()).concat(')'), metaclassesTarget->first())]
[if typeCheck][varName /].oclIsKindOf([metaclassesTarget->first() /][/if] [if variableConditions.trim().size() > 0 ] [if typeCheck] and [/if]
[variableConditions.printStringWithIdentation() /])[/if][/let][/if][/let]
[/template]

[template public getFieldTypeName(var: Variable, metaclassTarget: String)]
[if(metaclassTarget = 'VariableDeclarationFragment')]
variablesContainer.[/if]type.type
[/template]

[template public generatesConditionsForType(var: Variable, varName: String, metaclassTarget: String)]
[if not var.type.oclIsUndefined() and var.type.oclIsKindOf(ComplexType)]
[var.generatesGenericConditionsForAttribute(var.type.oclAsType(ComplexType), var.getFieldTypeName(metaclassTarget), false, varName, true) /][elseif not var.type.oclIsUndefined()]
[varName /].[var.getFieldTypeName(metaclassTarget) /].name = '[var.type.oclAsType(PrimitiveType).name /]'[/if]
[/template]

