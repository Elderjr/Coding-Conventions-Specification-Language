[comment encoding = UTF-8 /]
[module elementModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::elements::namedElement::complexType::complexTypeModule /]
[import org::ccsl::gen::ocl::elements::namedElement::method::methodModule /]
[import org::ccsl::gen::ocl::elements::namedElement::variable::variableModule /]
[import org::ccsl::gen::ocl::services::elementIdentifierService::elementIndentifierService/]


[template public callDefineSelectQuery(element: Element, filters: OrderedSet(AtomicFilter))]
[element.defineSelectQuery(filters) /]
[/template]

[template public callDefineQueryConditions(element: Element, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean)]
[element.defineQueryCondition(contextElement, varName, filters, exactMatch) /]
[/template]

[template public callDefineQueryConditionsProperties(element: Element, varName: String, properties: OrderedSet(Property))]
 [element.defineQueryConditionProperties(varName, properties) /]
[/template]

[template public callAncestorsQueryCondition(element: Element, varName:String, filters: OrderedSet(AtomicFilter))]

[/template]

[template private generateOclAsType(varName: String, targetMetaClass: String)]
[if not targetMetaClass.oclIsUndefined()][varName /].oclAsType([targetMetaClass /])[else][varName /][/if]
[/template]

[template public generateValidName(element: Element, baseName: String)]
[baseName /]_[element.getId() /]
[/template]

[template public generateGenericMultivaluedAttributeCondition(element: Element, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean, values: OrderedSet(Element), targetProperty: String, targetMetaClass: String, letBaseName: String, selectBaseName: String) post(trim())]
[let valuesWithoutContext: OrderedSet(Element) = values->select(x | x <> contextElement)]
[if not valuesWithoutContext->isEmpty()]
[for (value: Element | valuesWithoutContext)]
[let selectName: String =  value.generateValidName(selectBaseName)]
[let condition: String = value.defineQueryCondition(contextElement, selectName.generateOclAsType(targetMetaClass), filters, false)]
let [value.generateValidName(letBaseName) /] = [varName/].[targetProperty /]->select([selectName /]| [if not targetMetaClass.oclIsUndefined()][selectName /].oclIsTypeOf([targetMetaClass /])[/if] [if condition.size() > 0]and [condition /][/if]) in
[/let][/let][/for]
[for (value: Element | valuesWithoutContext) separator(' and ')][value.generateValidName(letBaseName) /]->size() > 0[/for] and
[for (value: Element | valuesWithoutContext) separator('->union(')][value.generateValidName(letBaseName) /][if i <> 1])[/if][/for]->asOrderedSet()->size() [if exactMatch]=[else]>=[/if] [if values->size() = valuesWithoutContext->size()][values->size() /][else][values->size() - 1 /][/if]
[/if][/let]
[/template]