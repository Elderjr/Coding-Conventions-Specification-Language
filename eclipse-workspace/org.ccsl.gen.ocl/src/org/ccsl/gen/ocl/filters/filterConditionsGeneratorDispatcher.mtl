[comment encoding = UTF-8 /]
[module filterConditionsGeneratorDispatcher('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::filters::propertyFilterOperations /]
[import org::ccsl::gen::ocl::filters::regexFilterOperations /]

[template private oclOperator(op: LogicOperator)]
[if op = LogicOperator::AND] and [elseif(op = LogicOperator::OR)] or [else] implies [/if]
[/template]

[template public generatesFilterConditions(filter : Filter) /]

[template public generatesFilterConditions(compositeFilter : CompositeFilter)]
[if compositeFilter.negated]
not ([/if][for(f: Filter | compositeFilter.filters) separator(compositeFilter.operator.oclOperator().concat('\n'))]
[if f.oclIsKindOf(CompositeFilter)]
(
  [f.generatesFilterConditions() /]
)[else]
[f.generatesFilterConditions() /][/if][/for][if compositeFilter.negated])[/if]
[/template]

[template public generatesFilterConditions(atomicFilter : AtomicFilter)]
[if atomicFilter.negated]not ([/if][for(target: Element | atomicFilter.targets) separator(' and ')]
[atomicFilter.generatesSpecificFilterConditions(target) /][/for][if atomicFilter.negated])[/if]
[/template]

[comment dispatchers /]
[template public generatesSpecificFilterConditions(atomicFilter: AtomicFilter, target: Element) /]

[template public generatesSpecificFilterConditions(propertyFilter: PropertyFilter, target: Element)]
[propertyFilter.generatesPropertyFilterConditions(target) /]
[/template]

[template public generatesSpecificFilterConditions(regexFilter: NamedElementRegexMatch, target: Element)]
[regexFilter.generatesRegexFilterConditions(target) /]
[/template]