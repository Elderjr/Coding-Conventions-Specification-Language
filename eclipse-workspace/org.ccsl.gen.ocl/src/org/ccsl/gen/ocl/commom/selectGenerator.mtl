[comment encoding = UTF-8 /]
[module selectGenerator('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::element::scopeConditionsGeneratorDispatcher /]
[import org::ccsl::gen::ocl::filters::filterConditionsGeneratorDispatcher /]



[template private generateFiltersConditions(filters: OrderedSet(Filter))]
[let filterConditions: Sequence(String) = filters.generatesFilterConditions()->select(s: String | s.trim().size() > 0)]
[for(cond: String | filterConditions) separator(' and\n')]
[cond.printStringWithIdentation() /][/for]
[/let]
[/template]

[template public generateSelect(element : Element, filters: OrderedSet(Filter))]
[let scopeConditions: String = element.generatesConditions(element.generateOclVariableName(), false, false)]
[let filterConditions: String = filters->generateFiltersConditions()]
[element.getAllInstances() /]->select([element.generateOclVariableName() /] |
  [scopeConditions.printStringWithIdentation() /] [if scopeConditions.trim().size() > 0 and filterConditions.trim().size() > 0] and
[/if]
  [filterConditions.printStringWithIdentation() /]
)[for(Sequence(Integer){1..scopeConditions.countMatches('->exists')}) ])[/for][/let][/let]
[/template]

[template public getAllInstances(element: Element) /]

[template public getAllInstances(infixExp: InfixExp)]
InfixExpression.allInstances()
[/template]

[template public getAllInstances(methodInvocation: MethodInvocation)]
MethodInvocation.allInstances()
[/template]

[template public getAllInstances(instanceCreation: InstanceCreation)]
ClassInstanceCreation.allInstances()
[/template]


