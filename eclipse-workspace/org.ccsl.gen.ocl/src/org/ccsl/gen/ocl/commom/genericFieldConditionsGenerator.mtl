[comment encoding = UTF-8 /]
[module genericFieldConditionsGenerator('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /]
[import org::ccsl::gen::ocl::dispatchers::generatesElementConditionsDispatcher /]
[import org::ccsl::gen::ocl::commom::elementIdentifierService /]
[import org::ccsl::gen::ocl::commom::stringUtils /]

[query private generatesFieldConditions(element: Element, varname: String, mappedMetaclass: String): String = 
if(mappedMetaclass <> 'OclAny') then
  element.generatesConditions(element.getOclName(), false, mappedMetaclass)
else
  element.generatesConditions(element.getOclName(), true)
endif
/]

[template public generatesLetStatement(element: Element, varname: String, mappedFieldName: String, letOclName: String, letType: String, many: Boolean)]
let [letOclName /]: [letType /] = [varname /].[mappedFieldName /] in (not [letOclName /][if many]->[else].[/if]oclIsUndefined())
[/template]

[template public generatesLetIfObject(element: Element, varname: String, mappedFieldName: String, mappedElementMetaclasses: OrderedSet(String), letOclName: String, letType: String, many: Boolean)]
let [letOclName /]: [letType /] = [for(metaclass: String | mappedElementMetaclasses) separator('else ')]
if [varname /].oclIsKindOf([metaclass /]) then
  [varname /].oclAsType([metaclass /]).[mappedFieldName /]
[/for]
else
  null
[for (Sequence(Integer){1..mappedElementMetaclasses->size()}) separator(' ')]endif[/for] in (not [letOclName /][if many]->[else].[/if]oclIsUndefined()) 
[/template]

[template public generatesLetIfObject(element: Element, varname: String, map: OrderedSet(OrderedSet(String)), letOclName: String, letType: String, many: Boolean)]
let [letOclName /]: [letType /] = [for(entry: OrderedSet(String) | map) separator('else ')]
if [varname /].oclIsKindOf([entry->at(1) /]) then
  [varname /].oclAsType([entry->at(1) /]).[entry->at(2) /]
[/for]
else
  null
[for (Sequence(Integer){1..map->size()}) separator(' ')]endif[/for] in
(not [letOclName /][if many]->[else].[/if]oclIsUndefined()) 
[/template]

[comment Gerar condicoes de atributo monovalorado com acesso direto /]
[template public generatesMonovaluedFieldConditions(element: Element, varname: String, field: Element, mappedFieldName: String, mappedFieldMetaclass: String) ? (isElementRegistered(field))]
[varname /].[mappedFieldName /] = [field.getOclName() /]
[/template]

[template public generatesMonovaluedFieldConditions(element: Element, varname: String, field: Element, mappedFieldName: String, mappedFieldMetaclass: String) ? (not isElementRegistered(field))]
[let fieldConditions: String = field.generatesFieldConditions(varname, mappedFieldMetaclass)]
[element.generatesLetStatement(varname, mappedFieldName, field.getOclName(), mappedFieldMetaclass, false) /][if fieldConditions.isNotEmpty()] and
[fieldConditions.printStringWithIdentation() /][/if][/let]
[/template]

[comment Gerar condicoes de atributo monovalorado com lista de possiveis metaclasses /]
[template public generatesMonovaluedFieldConditions(element: Element, varname: String, field: Element, mappedFieldName: String, mappedFieldMetaclass: String, mappedElementMetaclasses: OrderedSet(String))  ? (isElementRegistered(field))]
[for(metaclass: String | mappedElementMetaclasses) separator('else ')]
if [varname /].oclIsKindOf([metaclass /]) then
  [varname /].oclAsType([metaclass /]).[mappedFieldName /] = [field.getOclName() /]
[/for]
else
  false
[for (Sequence(Integer){1..mappedElementMetaclasses->size()}) separator(' ')]endif[/for]
[/template]

[template public generatesMonovaluedFieldConditions(element: Element, varname: String, field: Element, mappedFieldName: String, mappedFieldMetaclass: String, mappedElementMetaclasses: OrderedSet(String)) ? (not isElementRegistered(field))]
[let fieldConditions: String = field.generatesFieldConditions(varname, mappedFieldMetaclass)]
[element.generatesLetIfObject(varname, mappedFieldName, mappedElementMetaclasses, field.getOclName(), mappedFieldMetaclass, false) /] [if fieldConditions.isNotEmpty()] and
[fieldConditions.printStringWithIdentation() /][/if][/let]
[/template]

[comment Gerar condicoes de atributo monovalorado com um mapeamento(Metaclasse,Propriedade) /]
[template public generatesMonovaluedFieldConditions(element: Element, varname: String, field: Element, mappedFieldMetaclass: String, map: OrderedSet(OrderedSet(String))) ? (isElementRegistered(field))]
[for(entry: OrderedSet(String) | map) separator('else ')]
if [varname /].oclIsKindOf([entry->at(1) /]) then
  [varname /].oclAsType([entry->at(1) /]).[entry->at(2) /] = [field.getOclName() /]
[/for]
else
  false
[for (Sequence(Integer){1..map->size()}) separator(' ')]endif[/for]
[/template]

[template public generatesMonovaluedFieldConditions(element: Element, varname: String, field: Element, mappedFieldMetaclass: String, map: OrderedSet(OrderedSet(String))) ? (not isElementRegistered(field))]
[let fieldConditions: String = field.generatesFieldConditions(varname, mappedFieldMetaclass)]
[element.generatesLetIfObject(varname, map, field.getOclName(), mappedFieldMetaclass, false) /] [if fieldConditions.isNotEmpty()] and
[fieldConditions.printStringWithIdentation() /][/if][/let]
[/template]

[comment Gerar condicoes de atributo multivalorado com acesso direto /]
[template public generatesMultivaluedFieldConditions(element: Element, varname: String, fields: OrderedSet(Element), letOclName: String, mappedFieldName: String, mappedFieldMetaclass: String)]
[let fieldsConditions: String = element.generatesMultivaluedFieldConditions(letOclName, fields, mappedFieldMetaclass)]
[if fieldsConditions.isNotEmpty()]
[element.generatesLetStatement(varname, mappedFieldName, letOclName, 'OrderedSet('.concat(mappedFieldMetaclass).concat(')'), true) /] and
[fieldsConditions.printStringWithIdentation() /][/if][/let]
[/template]

[comment Gerar condicoes de atributo multivalorado com lista de possiveis metaclasses /]
[template public generatesMultivaluedFieldConditions(element: Element, varname: String, fields: OrderedSet(Element), mappedElementMetaclasses: OrderedSet(String), letOclName: String, mappedFieldName: String, mappedFieldMetaclass: String)]
[let fieldsConditions: String = element.generatesMultivaluedFieldConditions(letOclName, fields, mappedFieldMetaclass)]
[element.generatesLetIfObject(varname, mappedFieldName, mappedElementMetaclasses, letOclName, 'OrderedSet('.concat(mappedFieldMetaclass).concat(')'), true) /][if fieldsConditions.isNotEmpty()] and
[fieldsConditions.printStringWithIdentation() /][/if][/let]
[/template]

[template public generatesMultivaluedFieldConditions(element: Element,  letOclName: String, fields: OrderedSet(Element), mappedFieldMetaclass: String)]
[for (field: Element | fields->select(f | not f.isElementRegistered())) separator(' and ')]
[letOclName /]->exists([field.getOclName() /] | 
[let fieldCondition: String = field.generatesFieldConditions(field.getOclName(), mappedFieldMetaclass)]
[if fieldCondition.isNotEmpty()]
  [fieldCondition.printStringWithIdentation() /][else]
  true[/if][/let][/for][if element.oclIsKindOf(CodeElement) and element.oclAsType(CodeElement).exact][if fields->size() > 0] and
[/if][letOclName /]->size() = [fields->size() /][/if]
[/template]