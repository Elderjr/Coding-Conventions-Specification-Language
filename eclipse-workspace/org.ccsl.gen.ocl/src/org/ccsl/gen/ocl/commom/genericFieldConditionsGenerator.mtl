[comment encoding = UTF-8 /]
[module genericFieldConditionsGenerator('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /]
[import org::ccsl::gen::ocl::element::scopeConditionsGeneratorDispatcher /]
[import org::ccsl::gen::ocl::commom::elementIdentifierService /]

[comment Gerar condições de atributo monovalorado com acesso direto /]
[template public generatesMonovaluedFieldConditions(element: Element, varname: String, field: Element, mappedFieldName: String, mappedFieldMetaclass: String) ? (isElementRegistered(field))]
[varname /].[mappedFieldName /] = [field.getOclName() /]
[/template]

[template public generatesMonovaluedFieldConditions(element: Element, varname: String, field: Element, mappedFieldName: String, mappedFieldMetaclass: String) ? (not isElementRegistered(field))]
let [field.getOclName() /] : [mappedFieldMetaclass /] = [varname /].[mappedFieldName /] in 
[if mappedFieldMetaclass <> 'OclAny'][field.generatesConditions(field.getOclName(), false, mappedFieldMetaclass) /][else][field.generatesConditions(field.getOclName(), true) /][/if]
[/template]

[comment Gerar condições de atributo monovalorado com lista de possíveis metaclasses /]
[template public generatesMonovaluedFieldConditions(element: Element, varname: String, field: Element, mappedFieldName: String, mappedFieldMetaclass: String, mappedElementMetaclasses: OrderedSet(String))  ? (isElementRegistered(field))]
[for(metaclass: String | mappedElementMetaclasses) separator('else ')]
if [varname /].oclIsKindOf([metaclass /]) then
  [varname /].oclAsType([metaclass /]).[mappedFieldName /] = [field.getOclName() /]
[/for]
else
  false
[for (Sequence(Integer){1..mappedElementMetaclasses->size()}) separator(' ')]endif[/for]
[/template]

[template public generatesMonovaluedFieldConditions(element: Element, varname: String, field: Element, mappedFieldName: String, mappedFieldMetaclass: String, mappedElementMetaclasses: OrderedSet(String)) ? (not isElementRegistered(field))]
let [field.getOclName() /]: [mappedFieldMetaclass /] = [for(metaclass: String | mappedElementMetaclasses) separator('else ')]
if [varname /].oclIsKindOf([metaclass /]) then
  [varname /].oclAsType([metaclass /]).[mappedFieldName /]
[/for]
else
  null
[for (Sequence(Integer){1..mappedElementMetaclasses->size()}) separator(' ')]endif[/for] in
[if mappedFieldMetaclass <> 'OclAny'][field.generatesConditions(field.getOclName(), false, mappedFieldMetaclass) /][else][field.generatesConditions(field.getOclName(), true) /][/if]
[/template]

[comment Gerar condições de atributo monovalorado com um mapeamento(Metaclasse,Propriedade) /]
[template public generatesMonovaluedFieldConditions(element: Element, varname: String, field: Element, mappedFieldMetaclass: String, map: OrderedSet(OrderedSet(String))) ? (isElementRegistered(field))]
[for(entry: OrderedSet(String) | map) separator('else ')]
if [varname /].oclIsKindOf([entry->at(1) /]) then
  [varname /].oclAsType([entry->at(1) /]).[entry->at(2) /] = [field.getOclName() /]
[/for]
else
  false
[for (Sequence(Integer){1..map->size()}) separator(' ')]endif[/for]
[/template]

[template public generatesMonovaluedFieldConditions(element: Element, varname: String, field: Element, mappedFieldMetaclass: String, map: OrderedSet(OrderedSet(String))) ? (not isElementRegistered(field))]
let [field.getOclName() /]: OclAny = [for(entry: OrderedSet(String) | map) separator('else ')]
if [varname /].oclIsKindOf([entry->at(1) /]) then
  [varname /].oclAsType([entry->at(1) /]).[entry->at(2) /]
[/for]
else
  null
[for (Sequence(Integer){1..map->size()}) separator(' ')]endif[/for] in
[if mappedFieldMetaclass <> 'OclAny'][field.generatesConditions(field.getOclName(), false, mappedFieldMetaclass) /][else][field.generatesConditions(field.getOclName(), true) /][/if]
[/template]



[comment Gerar condições de atributo multivalorado com acesso direto /]
[template public generatesMultivaluedFieldConditions(element: Element, varname: String, fields: OrderedSet(Element), letOclName: String, mappedFieldName: String, mappedFieldMetaclass: String)]
let [letOclName /]: OrderedSet([mappedFieldMetaclass /]) =  [varname /].[mappedFieldName /] in
[for (field: Element | fields) separator(' and ')]
[if isElementRegistered(field)]
[letOclName /]->exists([element.getOclName() /][field.getOclName() /] | [element.getOclName() /][field.getOclName() /] = [field.getOclName() /][else]
[letOclName /]->exists([field.getOclName() /] | 
  [if mappedFieldMetaclass <> 'OclAny'][field.generatesConditions(field.getOclName(), false, mappedFieldMetaclass) /][else][field.generatesConditions(field.getOclName(), true) /][/if]
[/if][/for][if element.oclIsKindOf(CodeElement) and element.oclAsType(CodeElement).exact] [if fields->size() > 0]and
[/if][letOclName /]->size() = [fields->size() /][/if]
[/template]

[comment Gerar condições de atributo multivalorado com lista de possíveis metaclasses /]
[template public generatesMultivaluedFieldConditions(element: Element, varname: String, fields: OrderedSet(Element), mappedElementMetaclasses: OrderedSet(String), letOclName: String, mappedFieldName: String, mappedFieldMetaclass: String)]
let [letOclName /]: OrderedSet([mappedFieldMetaclass /]) =  [for(metaclass: String | mappedElementMetaclasses) separator('else ')]
if [varname /].oclIsKindOf([metaclass /]) then
  [varname /].oclAsType([metaclass /]).[mappedFieldName /]
[/for]
else
  null 
[for (Sequence(Integer){1..mappedElementMetaclasses->size()}) separator(' ')]endif[/for] in
[for (field: Element | fields) separator(' and ')]
[if isElementRegistered(field)]
[letOclName /]->exists([element.getOclName() /][field.getOclName() /] | [element.getOclName() /][field.getOclName() /] = [field.getOclName() /][else]
[letOclName /]->exists([field.getOclName() /] | 
  [if mappedFieldMetaclass <> 'OclAny'][field.generatesConditions(field.getOclName(), false, mappedFieldMetaclass) /][else][field.generatesConditions(field.getOclName(), true) /][/if]
[/if][/for][if element.oclIsKindOf(CodeElement) and element.oclAsType(CodeElement).exact] [if fields->size() > 0]and
[/if][letOclName /]->size() = [fields->size() /][/if]
[/template]
