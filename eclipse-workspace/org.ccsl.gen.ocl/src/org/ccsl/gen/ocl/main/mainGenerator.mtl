[comment encoding = UTF-8 /]
[module mainGenerator('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::dispatchers::filterConditionsGeneratorDispatcher /]
[import org::ccsl::gen::ocl::dispatchers::generatesElementConditionsDispatcher /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementIdentifierService /]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /]
[import org::ccsl::gen::ocl::commom::selectGenerator /]

[template public main(rule: Rule) ? (rule.eContainer().oclIsUndefined())]
[comment @main/]
[file ('gen', false, 'UTF-8')]
let violations: Set(ASTNode) = [rule.generatesOcl() /] in
violations->collect(node: ASTNode | 
	let container: NamedElement = node->asOrderedSet()->closure(x |
        if x.oclIsKindOf(AbstractMethodDeclaration) or x.oclIsKindOf(AbstractTypeDeclaration) then
		  x
		else
		  x.oclContainer()
	    endif
	)->last() in if (not container.oclIsUndefined()) and (not container.originalCompilationUnit.oclIsUndefined()) then
      'Violation Found at '.concat(container.originalCompilationUnit.originalFilePath).concat(' on ').concat(container.name)
    else
      ''
    endif
)->asSequence()->select(violation | violation.size() > 0)
->append('#violations: '.concat(violations->size().toString()))
[/file]
[/template]

[template private generatesOcl(rule: Rule) /]

[template private generatesScopeConditions(rule: AtomicRule) post(trim())]
[let scopeConditions: String = rule.subject.generatesConditions(rule.subject.getOclName(), false)]
[scopeConditions /][/let]
[/template]

[template private generatesRemainingElementsConditions(rule: AtomicRule) post(trim())]
[for(element: Element | rule.ruleElements->select(e | not getElementsWithId()->includes(e))) separator( 'and\n')]
[element.generatesExist(element.getOclName()) /]
[let elementConditions: String = element.generatesConditions(element.getOclName(), false)]
(not [element.getOclName() /].originalCompilationUnit.oclIsUndefined())[if elementConditions.isNotEmpty()] and
[/if][elementConditions /][/let][/for]
[/template]

[template private generatesFiltersConditions(rule: AtomicRule) post(trim())]
[let filterConditions: Sequence(String) = rule.filters.generatesFilterConditions()->select(s| s.isNotEmpty())]
[for(cond: String | filterConditions) separator(' and\n')]
[cond.printStringWithIdentation() /][/for][/let]
[/template]

[template private generatesOcl(rule: AtomicRule)]
[rule.clearAllContexts() /][let scopeConditions: String = rule.generatesScopeConditions()]
[let remainingElementsConditions: String = rule.generatesRemainingElementsConditions()]
[let filtersConditions: String = rule.generatesFiltersConditions()]
[rule.subject.generatesSelect(rule.subject.getOclName()) /]
[for(conditions: String | OrderedSet(String){scopeConditions, remainingElementsConditions, filtersConditions}->select(s | s.isNotEmpty())) separator( ' and\n')]
  --[if conditions = scopeConditions]Scope Conditions[elseif conditions = remainingElementsConditions]Remaining Elements Conditions[else]Filters Conditions[/if]
  [conditions.printStringWithIdentation() /][/for]

[for(Sequence(Integer){1 ..
  (
    scopeConditions.countMatches('->exists') - scopeConditions.countMatches('--NOT_COUNT') + 
    remainingElementsConditions.countMatches('->exists') - remainingElementsConditions.countMatches('--NOT_COUNT') +
    filtersConditions.countMatches('->exists') - filtersConditions.countMatches('--NOT_COUNT')
  )
})])[/for][/let][/let][/let])
->reject(node | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc))) 
[rule.generatesIteratorToSelectContext(rule.subject) /]
[/template]

[template private generatesIteratorToSelectContext(rule: AtomicRule, subject: Element)]
->select(node: ASTNode | not node.originalCompilationUnit.oclIsUndefined())
[/template]
[template private generatesIteratorToSelectContext(rule: AtomicRule, subject: DataTypeAccess)]
->iterate(typeAccess: TypeAccess; acc: OrderedSet(ASTNode) = OrderedSet(ASTNode){} |
  if typeAccess.oclContainer().oclIsKindOf(ASTNode) and (not typeAccess.oclContainer().oclAsType(ASTNode).originalCompilationUnit.oclIsUndefined()) then
    acc->append(typeAccess.oclContainer())
  else if typeAccess.oclContainer().oclIsKindOf(Type) and typeAccess.oclContainer().oclAsType(Type).originalCompilationUnit.oclIsUndefined() then
    acc->append(
      typeAccess.oclContainer().oclAsType(Type).usagesInTypeAccess->closure(accessRec: TypeAccess |
        if accessRec.oclContainer().oclIsKindOf(Type) and accessRec.oclContainer().oclAsType(Type).originalCompilationUnit.oclIsUndefined() then
          accessRec.oclContainer().oclAsType(Type).usagesInTypeAccess
        else if accessRec.oclContainer().oclIsKindOf(AbstractVariablesContainer) or accessRec.oclContainer().oclIsKindOf(ClassInstanceCreation) or accessRec.oclContainer().oclIsKindOf(ArrayCreation) then
          accessRec.oclContainer()
        else
          null
        endif endif
      )->select(x | x <> null and not x.oclIsKindOf(TypeAccess))
    )->flatten()
  else
    acc
  endif endif
)
[/template]
[template private generatesOcl(compositeRule: CompositeRule)]
(
[for (rule: Rule | compositeRule.rules) separator(compositeRule.operator.operation().concat('(\n'))]
[if i = 1]  [rule.generatesOcl() /][else]    [rule.generatesOcl() /])[/if][/for]

)
[/template]

[template private operation(logicOperator: LogicOperator)]
[if logicOperator = LogicOperator::AND]
->intersect[elseif logicOperator = LogicOperator::OR]
->union[/if]
[/template]