[comment encoding = UTF-8 /]
[module mainGenerator('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementIdentifierService /]
[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /] 
[import org::ccsl::gen::ocl::filters::filterConditionsGeneratorDispatcher /]
[import org::ccsl::gen::ocl::element::elementConditionsGeneratorDispatcher /]
[import org::ccsl::gen::ocl::commom::selectGenerator /]



[template public main(rule: Rule) ? (rule.eContainer().oclIsUndefined())]
[comment @main/]
[file ('gen', false, 'UTF-8')]
[rule.generatesOcl() /]
[/file]
[/template]

[template private generatesOcl(rule: Rule) /]

[template private generatesScopeConditions(rule: AtomicRule) post(trim())]
[let scopeConditions: String = rule.scope.generatesConditions(rule.scope.getOclName())]
(not [rule.scope.getOclName() /].originalCompilationUnit.oclIsUndefined())[if scopeConditions.isNotEmpty()] and
[/if][scopeConditions /][/let]
[/template]

[template private generatesRemainingElementsConditions(rule: AtomicRule) post(trim())]
[for(element: Element | rule.auxiliaryElements->select(e | not e.isElementRegistered())) separator( 'and\n')]
[element.generatesExist() /]
[let elementConditions: String = element.generatesConditions(element.getOclName())]
(not [element.getOclName() /].originalCompilationUnit.oclIsUndefined())[if elementConditions.isNotEmpty()] and
[/if][elementConditions /][/let][/for]
[/template]

[template private generatesFiltersConditions(rule: AtomicRule) post(trim())]
[let filterConditions: Sequence(String) = rule.filters.generatesFilterConditions()->select(s| s.isNotEmpty())]
[for(cond: String | filterConditions) separator(' and\n')]
[cond.printStringWithIdentation() /][/for][/let]
[/template]

[template private generatesOcl(rule: AtomicRule)]
[rule.clearAllContexts() /][let scopeConditions: String = rule.generatesScopeConditions()]
[let remainingElementsConditions: String = rule.generatesRemainingElementsConditions()]
[let filtersConditions: String = rule.generatesFiltersConditions()]
[rule.scope.generatesSelect() /]
[for(conditions: String | OrderedSet(String){scopeConditions, remainingElementsConditions, filtersConditions}->select(s | s.isNotEmpty())) separator( ' and\n')]
  --[if conditions = scopeConditions]Scope Conditions[elseif conditions = remainingElementsConditions]Remaining Elements Conditions[else]Filters Conditions[/if]
  [conditions.printStringWithIdentation() /][/for]

[for(Sequence(Integer){1 ..
  (
    scopeConditions.countMatches('->exists') - scopeConditions.countMatches('--NOT_COUNT') + 
    remainingElementsConditions.countMatches('->exists') - remainingElementsConditions.countMatches('--NOT_COUNT') +
    filtersConditions.countMatches('->exists') - filtersConditions.countMatches('--NOT_COUNT')
  )
})])[/for][/let][/let][/let])
[/template]

[template private generatesOcl(compositeRule: CompositeRule)]
(
[for (rule: Rule | compositeRule.rules) separator(compositeRule.operator.operation().concat('(\n'))]
[if i = 1]  [rule.generatesOcl() /][else]    [rule.generatesOcl() /])[/if][/for]

)
[/template]

[template private operation(logicOperator: LogicOperator)]
[if logicOperator = LogicOperator::AND]
->intersect[elseif logicOperator = LogicOperator::OR]
->union[/if]
[/template]