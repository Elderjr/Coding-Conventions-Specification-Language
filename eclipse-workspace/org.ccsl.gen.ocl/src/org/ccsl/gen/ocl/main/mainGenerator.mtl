[comment encoding = UTF-8 /]
[module mainGenerator('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::elementIdentifierService /]
[import org::ccsl::gen::ocl::commom::selectGenerator /]


[query public test(rule: Rule): OrderedSet(String) = OrderedSet(String){'a','b'} /]

[query public map(rule: Rule): OrderedSet(OrderedSet(String)) = 
  let map: OrderedSet(OrderedSet(String)) = OrderedSet(OrderedSet(String)){} in
  if rule.test()->includes('a') then map->append(OrderedSet(String){'a','1'}) else false endif
  
/]
[template public main(rule: Rule) ? (rule.eContainer().oclIsUndefined())]
[comment @main/]
[file ('gen', false, 'UTF-8')]
[rule.generatesOcl() /]
[/file]
[/template]

[template private generatesOcl(rule: Rule) /]

[template private generatesOcl(rule: AtomicRule)]
[rule.clearAllContexts() /][rule.scope.generatesSelect(rule.filters) /]
[/template]

[template private generatesOcl(compositeRule: CompositeRule)]
(
[for (rule: Rule | compositeRule.rules) separator(compositeRule.operator.operation().concat('(\n'))]
[if i = 1]  [else]    [/if][rule.generatesOcl() /]
[if i <> 1]  )[/if][/for]

)
[/template]

[template private operation(logicOperator: LogicOperator)]
[if logicOperator = LogicOperator::AND]
->intersect[elseif logicOperator = LogicOperator::OR]
->union[/if]
[/template]