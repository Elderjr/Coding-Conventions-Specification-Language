WARNING: This analysis could be faster, please consider using Incremental Analysis: https://pmd.github.io/pmd-6.18.0/pmd_userdocs_incremental_analysis.html
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\AbstractDualBidiMap.java:62:   Avoid using redundant field initializer for 'inverseBidiMap'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\AbstractDualBidiMap.java:67:   Avoid using redundant field initializer for 'keySet'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\AbstractDualBidiMap.java:72:   Avoid using redundant field initializer for 'values'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\AbstractDualBidiMap.java:77:   Avoid using redundant field initializer for 'entrySet'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\AbstractDualBidiMap.java:494:  Avoid using redundant field initializer for 'lastKey'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\AbstractDualBidiMap.java:497:  Avoid using redundant field initializer for 'canRemove'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\AbstractDualBidiMap.java:578:  Avoid using redundant field initializer for 'lastValue'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\AbstractDualBidiMap.java:581:  Avoid using redundant field initializer for 'canRemove'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\AbstractDualBidiMap.java:664:  Avoid using redundant field initializer for 'last'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\AbstractDualBidiMap.java:667:  Avoid using redundant field initializer for 'canRemove'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\AbstractDualBidiMap.java:743:  Avoid using redundant field initializer for 'last'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\AbstractDualBidiMap.java:746:  Avoid using redundant field initializer for 'canRemove'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\DualTreeBidiMap.java:311:      Avoid using redundant field initializer for 'last'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\TreeBidiMap.java:111:  Avoid using redundant field initializer for 'nodeCount'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\TreeBidiMap.java:112:  Avoid using redundant field initializer for 'modifications'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\bidimap\TreeBidiMap.java:116:  Avoid using redundant field initializer for 'inverse'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\comparators\BooleanComparator.java:44: Avoid using redundant field initializer for 'trueFirst'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\comparators\ComparatorChain.java:61:   Avoid using redundant field initializer for 'orderingBits'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\comparators\ComparatorChain.java:63:   Avoid using redundant field initializer for 'isLocked'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\comparators\FixedOrderComparator.java:69:      Avoid using redundant field initializer for 'counter'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\comparators\FixedOrderComparator.java:72:      Avoid using redundant field initializer for 'isLocked'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\functors\InstantiateFactory.java:45:   Avoid using redundant field initializer for 'iConstructor'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\ArrayIterator.java:47:       Avoid using redundant field initializer for 'index'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\CollatingIterator.java:43:   Avoid using redundant field initializer for 'comparator'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\CollatingIterator.java:46:   Avoid using redundant field initializer for 'iterators'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\CollatingIterator.java:49:   Avoid using redundant field initializer for 'values'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\CollatingIterator.java:52:   Avoid using redundant field initializer for 'valueSet'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\EntrySetMapIterator.java:46: Avoid using redundant field initializer for 'canRemove'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\FilterIterator.java:41:      Avoid using redundant field initializer for 'nextObjectSet'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\FilterListIterator.java:50:  Avoid using redundant field initializer for 'nextObjectSet'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\FilterListIterator.java:62:  Avoid using redundant field initializer for 'previousObjectSet'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\FilterListIterator.java:67:  Avoid using redundant field initializer for 'nextIndex'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\IteratorChain.java:56:       Avoid using redundant field initializer for 'currentIterator'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\IteratorChain.java:62:       Avoid using redundant field initializer for 'lastUsedIterator'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\IteratorChain.java:68:       Avoid using redundant field initializer for 'isLocked'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\LazyIteratorChain.java:51:   Avoid using redundant field initializer for 'callCounter'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\LazyIteratorChain.java:54:   Avoid using redundant field initializer for 'chainExhausted'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\LazyIteratorChain.java:57:   Avoid using redundant field initializer for 'currentIterator'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\LazyIteratorChain.java:63:   Avoid using redundant field initializer for 'lastUsedIterator'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\ListIteratorWrapper.java:62: Avoid using redundant field initializer for 'currentIndex'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\ListIteratorWrapper.java:64: Avoid using redundant field initializer for 'wrappedIteratorIndex'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\NodeListIterator.java:38:    Avoid using redundant field initializer for 'index'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\ObjectArrayIterator.java:44: Avoid using redundant field initializer for 'index'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\ObjectGraphIterator.java:86: Avoid using redundant field initializer for 'hasNext'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\PeekingIterator.java:38:     Avoid using redundant field initializer for 'exhausted'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\PeekingIterator.java:41:     Avoid using redundant field initializer for 'slotFilled'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\SingletonIterator.java:37:   Avoid using redundant field initializer for 'removed'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\SingletonListIterator.java:32:       Avoid using redundant field initializer for 'nextCalled'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\SingletonListIterator.java:33:       Avoid using redundant field initializer for 'removed'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\ZippingIterator.java:43:     Avoid using redundant field initializer for 'nextIterator'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\iterators\ZippingIterator.java:46:     Avoid using redundant field initializer for 'lastReturned'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\list\CursorableLinkedList.java:411:    Avoid using redundant field initializer for 'currentRemovedByAnother'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\list\SetUniqueList.java:369:   Avoid using redundant field initializer for 'last'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\list\SetUniqueList.java:397:   Avoid using redundant field initializer for 'last'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\map\Flat3Map.java:642: Avoid using redundant field initializer for 'nextIndex'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\map\Flat3Map.java:643: Avoid using redundant field initializer for 'canRemove'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\map\Flat3Map.java:923: Avoid using redundant field initializer for 'nextIndex'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\map\Flat3Map.java:924: Avoid using redundant field initializer for 'currentEntry'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\map\ListOrderedMap.java:681:   Avoid using redundant field initializer for 'last'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\map\ListOrderedMap.java:725:   Avoid using redundant field initializer for 'last'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\map\ListOrderedMap.java:726:   Avoid using redundant field initializer for 'readable'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\map\SingletonMap.java:431:     Avoid using redundant field initializer for 'canGetSet'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\multimap\AbstractMultiValuedMap.java:665:
        Avoid using redundant field initializer for 'current'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\multiset\AbstractMapMultiSet.java:331: Avoid using redundant field initializer for 'lastElement'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\multiset\AbstractMapMultiSet.java:334: Avoid using redundant field initializer for 'canRemove'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\multiset\AbstractMapMultiSet.java:377: Avoid using redundant field initializer for 'last'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\multiset\AbstractMapMultiSet.java:380: Avoid using redundant field initializer for 'canRemove'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\queue\CircularFifoQueue.java:62:       Avoid using redundant field initializer for 'start'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\queue\CircularFifoQueue.java:71:       Avoid using redundant field initializer for 'end'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\queue\CircularFifoQueue.java:74:       Avoid using redundant field initializer for 'full'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\trie\AbstractPatriciaTrie.java:60:     Avoid using redundant field initializer for 'size'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\trie\AbstractPatriciaTrie.java:66:     Avoid using redundant field initializer for 'modCount'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\trie\AbstractPatriciaTrie.java:2099:   Avoid using redundant field initializer for 'fromKey'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\trie\AbstractPatriciaTrie.java:2101:   Avoid using redundant field initializer for 'toKey'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\trie\AbstractPatriciaTrie.java:2103:   Avoid using redundant field initializer for 'expectedModCount'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\trie\AbstractPatriciaTrie.java:2282:   Avoid using redundant field initializer for 'expectedModCount'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\main\java\org\apache\commons\collections4\trie\AbstractPatriciaTrie.java:2321:   Avoid using redundant field initializer for 'hit'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\ClosureUtilsTest.java:44:      Avoid using redundant field initializer for 'count'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\ClosureUtilsTest.java:57:      Avoid using redundant field initializer for 'count'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:67:   Avoid using redundant field initializer for 'collectionA'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:72:   Avoid using redundant field initializer for 'collectionB'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:78:   Avoid using redundant field initializer for 'collectionC'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:83:   Avoid using redundant field initializer for 'collectionD'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:88:   Avoid using redundant field initializer for 'collectionE'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:93:   Avoid using redundant field initializer for 'collectionA2'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:98:   Avoid using redundant field initializer for 'collectionB2'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:104:  Avoid using redundant field initializer for 'collectionC2'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:106:  Avoid using redundant field initializer for 'iterableA'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:108:  Avoid using redundant field initializer for 'iterableB'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:110:  Avoid using redundant field initializer for 'iterableC'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:112:  Avoid using redundant field initializer for 'iterableA2'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\CollectionUtilsTest.java:114:  Avoid using redundant field initializer for 'iterableB2'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\FactoryUtilsTest.java:203:     Avoid using redundant field initializer for 'cCounter'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\FluentIterableTest.java:50:    Avoid using redundant field initializer for 'iterableA'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\FluentIterableTest.java:55:    Avoid using redundant field initializer for 'iterableB'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\FluentIterableTest.java:60:    Avoid using redundant field initializer for 'iterableEven'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\FluentIterableTest.java:65:    Avoid using redundant field initializer for 'iterableOdd'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\FluentIterableTest.java:70:    Avoid using redundant field initializer for 'emptyIterable'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\IterableUtilsTest.java:51:     Avoid using redundant field initializer for 'iterableA'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\IterableUtilsTest.java:56:     Avoid using redundant field initializer for 'iterableB'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\IterableUtilsTest.java:61:     Avoid using redundant field initializer for 'emptyIterable'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\IteratorUtilsTest.java:64:     Avoid using redundant field initializer for 'collectionA'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\IteratorUtilsTest.java:69:     Avoid using redundant field initializer for 'collectionEven'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\IteratorUtilsTest.java:74:     Avoid using redundant field initializer for 'collectionOdd'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\IteratorUtilsTest.java:78:     Avoid using redundant field initializer for 'iterableA'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\bidimap\AbstractOrderedBidiMapDecoratorTest.java:70:      Avoid using redundant field initializer for 'inverse'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\comparators\ComparatorChainTest.java:195:
        Avoid using redundant field initializer for 'colIndex'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\CollatingIteratorTest.java:41:
        Avoid using redundant field initializer for 'comparator'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\CollatingIteratorTest.java:42:
        Avoid using redundant field initializer for 'evens'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\CollatingIteratorTest.java:43:
        Avoid using redundant field initializer for 'odds'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\CollatingIteratorTest.java:44:
        Avoid using redundant field initializer for 'fib'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\FilterListIteratorTest.java:42:
        Avoid using redundant field initializer for 'list'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\FilterListIteratorTest.java:43:
        Avoid using redundant field initializer for 'odds'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\FilterListIteratorTest.java:44:
        Avoid using redundant field initializer for 'evens'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\FilterListIteratorTest.java:45:
        Avoid using redundant field initializer for 'threes'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\FilterListIteratorTest.java:46:
        Avoid using redundant field initializer for 'fours'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\FilterListIteratorTest.java:47:
        Avoid using redundant field initializer for 'sixes'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\FilterListIteratorTest.java:48:
        Avoid using redundant field initializer for 'truePred'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\FilterListIteratorTest.java:49:
        Avoid using redundant field initializer for 'falsePred'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\FilterListIteratorTest.java:50:
        Avoid using redundant field initializer for 'evenPred'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\FilterListIteratorTest.java:51:
        Avoid using redundant field initializer for 'oddPred'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\FilterListIteratorTest.java:52:
        Avoid using redundant field initializer for 'threePred'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\FilterListIteratorTest.java:53:
        Avoid using redundant field initializer for 'fourPred'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\IteratorChainTest.java:37:   Avoid using redundant field initializer for 'list1'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\IteratorChainTest.java:38:   Avoid using redundant field initializer for 'list2'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\IteratorChainTest.java:39:   Avoid using redundant field initializer for 'list3'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\LazyIteratorChainTest.java:37:
        Avoid using redundant field initializer for 'list1'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\LazyIteratorChainTest.java:38:
        Avoid using redundant field initializer for 'list2'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\LazyIteratorChainTest.java:39:
        Avoid using redundant field initializer for 'list3'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\ListIteratorWrapper2Test.java:36:       Avoid using redundant field initializer for 'list1'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\ListIteratorWrapperTest.java:37:        Avoid using redundant field initializer for 'list1'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\ObjectGraphIteratorTest.java:35:        Avoid using redundant field initializer for 'list1'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\ObjectGraphIteratorTest.java:36:        Avoid using redundant field initializer for 'list2'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\ObjectGraphIteratorTest.java:37:        Avoid using redundant field initializer for 'list3'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\ObjectGraphIteratorTest.java:38:        Avoid using redundant field initializer for 'iteratorList'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\UniqueFilterIteratorTest.java:34:       Avoid using redundant field initializer for 'list1'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\ZippingIteratorTest.java:38: Avoid using redundant field initializer for 'evens'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\ZippingIteratorTest.java:39: Avoid using redundant field initializer for 'odds'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\iterators\ZippingIteratorTest.java:40: Avoid using redundant field initializer for 'fib'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\map\CompositeMapTest.java:31:  Avoid using redundant field initializer for 'pass'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\set\UnmodifiableNavigableSetTest.java:37:
        Avoid using redundant field initializer for 'set'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\set\UnmodifiableNavigableSetTest.java:38:
        Avoid using redundant field initializer for 'array'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\set\UnmodifiableSortedSetTest.java:37: Avoid using redundant field initializer for 'set'
D:\git-repositories\Coding-Conventions-Specification-Language\feasibility-study\sample-projects\commons-collections-master\src\test\java\org\apache\commons\collections4\set\UnmodifiableSortedSetTest.java:38: Avoid using redundant field initializer for 'array'