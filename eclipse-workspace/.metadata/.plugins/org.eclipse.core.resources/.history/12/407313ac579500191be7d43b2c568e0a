------- Composite Iteration --------
  ------------- Iteration -------------:
    java::ClassDeclaration.allInstances()->select(class: java::ClassDeclaration |
      (  --complexType conditions
        let class_1_fields_2 = class.bodyDeclarations->select(class_1_fieldToSelect_2 | 
        (  --Variable conditions
      ll class_1_fieldToSelect_2.modifier.visibility = java::VisibilityKind::public
      )  --End Variable Conditions
      ) in
        class_1_fields_2->size() > 0 and
        class_1_fields_2->asOrderedSet()->size() >= 1  and 
        (not class.name.matches('Bean'))
      )  --end complexType conditions
    )->union(
      java::InterfaceDeclaration.allInstances()->select(interface: java::InterfaceDeclaration |
        (  --complexType conditions
          let class_1_fields_2 = interface.bodyDeclarations->select(class_1_fieldToSelect_2 | 
          (  --Variable conditions
        ll class_1_fieldToSelect_2.modifier.visibility = java::VisibilityKind::public
        )  --End Variable Conditions
        ) in
          class_1_fields_2->size() > 0 and
          class_1_fields_2->asOrderedSet()->size() >= 1  and 
          (not interface.name.matches('Bean'))
        )  --end complexType conditions
      )
    )
  ----------- End Iteration -----------;
  ->intersection(
  ------- Composite Iteration --------
    ------------- Iteration -------------:
      java::ClassDeclaration.allInstances()->select(class: java::ClassDeclaration |
        (  --complexType conditions
          let class_1_fields_2 = class.bodyDeclarations->select(class_1_fieldToSelect_2 | 
          (  --Variable conditions
        ll class_1_fieldToSelect_2.modifier.visibility = java::VisibilityKind::public
          and 
        ll not (class_1_fieldToSelect_2.modifier.static)
        )  --End Variable Conditions
        ) in
          class_1_fields_2->size() > 0 and
          class_1_fields_2->asOrderedSet()->size() >= 1
        )  --end complexType conditions
      )->union(
        java::InterfaceDeclaration.allInstances()->select(interface: java::InterfaceDeclaration |
          (  --complexType conditions
            let class_1_fields_2 = interface.bodyDeclarations->select(class_1_fieldToSelect_2 | 
            (  --Variable conditions
          ll class_1_fieldToSelect_2.modifier.visibility = java::VisibilityKind::public
            and 
          ll not (class_1_fieldToSelect_2.modifier.static)
          )  --End Variable Conditions
          ) in
            class_1_fields_2->size() > 0 and
            class_1_fields_2->asOrderedSet()->size() >= 1
          )  --end complexType conditions
        )
      )
    ----------- End Iteration -----------;
    ->union(
    ------------- Iteration -------------:
      java::ClassDeclaration.allInstances()->select(class: java::ClassDeclaration |
        (  --complexType conditions
          let class_1_fields_2 = class.bodyDeclarations->select(class_1_fieldToSelect_2 | 
          (  --Variable conditions
        ll class_1_fieldToSelect_2.modifier.visibility = java::VisibilityKind::public
          and 
        ll not (class_1_fieldToSelect_2.modifier.inheritance = java::InheritanceKind::final)
        )  --End Variable Conditions
        ) in
          class_1_fields_2->size() > 0 and
          class_1_fields_2->asOrderedSet()->size() >= 1
        )  --end complexType conditions
      )->union(
        java::InterfaceDeclaration.allInstances()->select(interface: java::InterfaceDeclaration |
          (  --complexType conditions
            let class_1_fields_2 = interface.bodyDeclarations->select(class_1_fieldToSelect_2 | 
            (  --Variable conditions
          ll class_1_fieldToSelect_2.modifier.visibility = java::VisibilityKind::public
            and 
          ll not (class_1_fieldToSelect_2.modifier.inheritance = java::InheritanceKind::final)
          )  --End Variable Conditions
          ) in
            class_1_fields_2->size() > 0 and
            class_1_fields_2->asOrderedSet()->size() >= 1
          )  --end complexType conditions
        )
      )
    ----------- End Iteration -----------;
    )--close union
  ------- End Composite Iteration --------
  )--close intersection
  
------- End Composite Iteration --------
