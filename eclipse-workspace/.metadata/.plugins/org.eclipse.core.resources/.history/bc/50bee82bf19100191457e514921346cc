[comment encoding = UTF-8 /]
[module filterModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::elements::elementModule /]

[query public getAllAtomicFilters(filters: OrderedSet(Filter)) : OrderedSet(AtomicFilter) =
	filters->select(f | f.oclIsKindOf(AtomicFilter))
/]

[query public getAllCompositeFilters(filters: OrderedSet(Filter)) : OrderedSet(CompositeFilter) =
	filters->select(f | f.oclIsKindOf(CompositeFilter))
/]

[template public symbol(operator: LogicOperators) ? (operator = LogicOperators::AND)]
#AND
[/template]

[template public symbol(operator: LogicOperators) ? (operator = LogicOperators::OR)]
#OR
[/template]

[template public startFilter(filter: Filter, element: Element)
[template public process(filter : Filter, scope: Element) ? (filter.oclIsKindOf(AtomicFilter))]
[scope.createQuery(OrderedSet(AtomicFilter){filter.oclAsType(AtomicFilter)}) /]
[/template]

[template public process(filter : Filter, scope: Element) ? (filter.oclIsKindOf(CompositeFilter))]
[let compositeFilter: CompositeFilter = filter.oclAsType(CompositeFilter)]
[if compositeFilter.operator = LogicOperators::AND]
[let atomicFilters: OrderedSet(AtomicFilter) = compositeFilter.filters->getAllAtomicFilters()]
[let compositeFilters: OrderedSet(CompositeFilter) = compositeFilter.filters->getAllCompositeFilters()]
[scope.createQuery(atomicFilters) /]
[for (filterTmp: CompositeFilter| compositeFilters) separator(compositeFilter.operator.symbol())]
[filterTmp.process(scope)/] 
[/for])
[/let]
[/let]
[else]
[for (filterTmp: Filter| compositeFilter.filters) separator(compositeFilter.operator.symbol())]
[filterTmp.process(scope)/] 
[/for])
[/if]
[/let]
[/template]
