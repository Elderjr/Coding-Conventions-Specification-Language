[comment encoding = UTF-8 /]
[module variableModule('http://www.example.org/ccsl') extends org::ccsl::gen::ocl::elements::namedElement::namedElementModule/]
[import org::ccsl::gen::ocl::commom::stringModule /]

[query public getAllVariableConditions(variable: Variable, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean): Set(String) =
Set(String){
  	''
}->select(condition: String | condition.trim().size() > 0)
->union(variable.getAllNamedElementConditions(contextElement, varName, filters, exactMatch))
/]

[template public generateConditions(variable: Variable, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean, typeCheck: Boolean) overrides generateConditions]
( --Variable Conditions
[if typeCheck]
  [varName /].oclIsKindOf(FieldDeclaration) and
[for (condition: String | variable.getAllVariableConditions(contextElement, varName.concat('.oclAsType(FieldDeclaration)'), filters, exactMatch)) separator('  and ')]
  [condition.printStringWithIdentation() /]
[/for]
[else]
[for (condition: String | variable.getAllVariableConditions(contextElement, varName, filters, exactMatch)) separator('  and ')]
  [condition.printStringWithIdentation() /]
[/for]
[/if]
) --End Variable Conditions
[/template]



