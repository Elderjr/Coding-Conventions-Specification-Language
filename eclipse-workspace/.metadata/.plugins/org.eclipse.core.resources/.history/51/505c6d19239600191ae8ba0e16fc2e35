[comment encoding = UTF-8 /]
[module dispatcherModule('http://www.example.org/ccsl')]


[import org::ccsl::gen::ocl::elements::namedElement::variable::variableModule /]
[import org::ccsl::gen::ocl::elements::namedElement::complexType::complexTypeModule /]
[import org::ccsl::gen::ocl::elements::namedElement::method::methodModule /]
[import org::ccsl::gen::ocl::elements::statements::methodInvocation::methodInvocationModule/]

[template public callTest(element : Element, p: Boolean, filters: OrderedSet(AtomicFilter))]
[element.test(p, filters) /]
[/template]

[template public test(element : Element, p:Boolean, filters: OrderedSet(AtomicFilter))]
Bad
[/template]

[comment NamedElement /]
[template public generateConditions(element: Element, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean, typeCheck: Boolean) ? (element.oclIsTypeOf(NamedElement))]

[/template]

[comment ComplexType /]
[template public generateConditions(element: Element, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean, typeCheck: Boolean) ? (element.oclIsTypeOf(ComplexType))]
[element.oclAsType(ComplexType).generateComplexTypeConditions(contextElement, varName, filters, exactMatch, typeCheck) /]
[/template]

[template public generateSelect(element : Element, filters: OrderedSet(AtomicFilter)) ? (element.oclIsTypeOf(ComplexType))]
[element.oclAsType(ComplexType).generateComplexTypeSelect(filters) /]
[/template]

[comment Variable /]
[template public generateConditions(element: Element, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean, typeCheck: Boolean) ? (element.oclIsTypeOf(Variable))]
[element.oclAsType(Variable).generateVariableConditions(contextElement, varName, filters, exactMatch, typeCheck) /]
[/template]

[template public generatePropertiesConditions(element: Element, varName: String, properties: OrderedSet(Property), exactMatch: Boolean) ? (element.oclIsTypeOf(Variable))]
[element.oclAsType(Variable).generateVariablePropertiesConditions(varName,  properties, exactMatch) /]
[/template]

[comment Method /]
[template public generateConditions(element: Element, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean, typeCheck: Boolean) ? (element.oclIsTypeOf(Method))]
[element.oclAsType(Method).generateMethodConditions(contextElement, varName, filters, exactMatch, typeCheck) /]
[/template]

[comment MethodInvocation /]
[template public generateConditions(element: Element, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean, typeCheck: Boolean) ? (element.oclIsTypeOf(MethodInvocation))]
[element.oclAsType(MethodInvocation).generateMethodInvocationConditions(contextElement, varName, filters, exactMatch, typeCheck) /]
[/template]

[template public generateSelect(element : Element, filters: OrderedSet(AtomicFilter)) ? (element.oclIsTypeOf(MethodInvocation))]
[element.oclAsType(MethodInvocation).generateMethodInvocationSelect(filters) /]
[/template]