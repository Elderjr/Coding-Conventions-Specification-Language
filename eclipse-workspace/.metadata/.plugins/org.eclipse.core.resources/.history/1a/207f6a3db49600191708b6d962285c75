[comment encoding = UTF-8 /]
[module elementModule('http://www.example.org/ccsl')  /]
[import org::ccsl::gen::ocl::commom::filterDispatcherModule /]
[import org::ccsl::gen::ocl::dispatchers::elementDispatcherModule /]
[import org::ccsl::gen::ocl::services::elementIdentifierService::elementIndentifierService /]
[import org::gen::ocl::strings::stringModule /]

[query public getAllElementConditions(element: Element, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean): Set(String) =
Set(String) {
  generateAncestorConditions(element, contextElement, varName, filters, exactMatch),
  generatePropertiesConditions(element, varName, element.properties, exactMatch)
}
->union(filters->select(f: AtomicFilter | f.targets->includes(element)).callGenerateFilterConditions(element, varName)->flatten()->asSet())
->select(condition: String | condition.trim().size() > 0)
/]

[**
 * @param element Ã© um parametro
*/]
[template public generateConditions(element: Element, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean, typeCheck: Boolean) /]

[template public generateSelect(element : Element, filters: OrderedSet(AtomicFilter)) /]

[template private generateAncestorConditions(element: Element, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean)]
[if (not element.eContainer().oclIsUndefined()) and element.eContainer() <> contextElement and element.eContainer().oclIsKindOf(Element)]
  [element.eContainer().oclAsType(Element).callGenerateConditions(element, varName.concat('.oclContainer()'), filters, exactMatch, true) /][/if]
[/template]

[template public generatePropertiesConditions(element: Element, varName: String, properties: OrderedSet(Property), exactMatch: Boolean)]
[for (property: Property | properties) separator (' and ')]
[if property.name = 'public'] [varName /].modifier.visibility = java::VisibilityKind::public[elseif property.name = 'private']
[varName /].modifier.visibility = java::VisibilityKind::private[elseif property.name = 'static']
[varName /].modifier.static[elseif property.name = 'final']
[varName /].modifier.inheritance = java::InheritanceKind::final[/if][/for]
[/template]


[comment generate a default condition of a multivalued attribute /]
[template private generateOclAsType(varName: String, targetMetaClass: String)]
[if not targetMetaClass.oclIsUndefined()][varName /].oclAsType([targetMetaClass /])[else][varName /][/if]
[/template]

[template public generateValidName(element: Element, baseName: String)]
[baseName /]_[element.getId() /]
[/template]


[template public generateGenericMultivaluedAttributeCondition(element: Element, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean, typeCheck: Boolean, values: OrderedSet(Element), targetProperty: String, letBaseName: String, selectBaseName: String)]
[let valuesWithoutContext: OrderedSet(Element) = values->select(x | x <> contextElement)]
[if not valuesWithoutContext->isEmpty()]
[for (value: Element | valuesWithoutContext)]
[let selectName: String =  value.generateValidName(selectBaseName)]
[let condition: String = value.callGenerateConditions(element, selectName, filters, false, typeCheck)]
let [value.generateValidName(letBaseName) /] = [varName/].[targetProperty /][if condition.size() > 0]->select([selectName /] |
    [condition.printStringWithIdentation() /]
)[/if] in
[/let][/let][/for]
[for (value: Element | valuesWithoutContext) separator(' and ')]
[value.generateValidName(letBaseName) /]->size() > 0[/for] and
[for (value: Element | valuesWithoutContext) separator('->union(')]
[value.generateValidName(letBaseName) /][if i <> 1])[/if][/for]->asOrderedSet()->size() [if exactMatch]=[else]>=[/if] [if values->size() = valuesWithoutContext->size()][values->size() /][else][values->size() - 1 /][/if][/if][/let]
[/template]