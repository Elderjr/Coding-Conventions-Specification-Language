------- Composite Iteration --------
  ------------- Iteration -------------:
    blablabla 
   blablabal
    tlablabla
    tlablabal
    java::ClassDeclaration.allInstances()->select(class: java::ClassDeclaration |
      (  --complexType conditions
        (
        test
      )
      
        and 
        (not class.name.matches('Bean'))  and 
        (
        test
      )
      
        (  --Variable conditions
          bla.modifier.visibility = java::VisibilityKind::public
        )  --End Variable Conditions
      let class_1_fields_2 = class.bodyDeclarations->select(class_1_fieldToSelect_2 | 
          --t1
          138
          --t2
          130
      ) in
        class_1_fields_2->size() > 0 and
        class_1_fields_2->asOrderedSet()->size() >= 1
      
      )  --end complexType conditions
    )->union(
      java::InterfaceDeclaration.allInstances()->select(interface: java::InterfaceDeclaration |
        (  --complexType conditions
          (
          test
        )
        
          (  --Variable conditions
            bla.modifier.visibility = java::VisibilityKind::public
          )  --End Variable Conditions
        let class_1_fields_2 = interface.bodyDeclarations->select(class_1_fieldToSelect_2 | 
            --t1
            138
            --t2
            130
        ) in
          class_1_fields_2->size() > 0 and
          class_1_fields_2->asOrderedSet()->size() >= 1
          and 
          (
          test
        )
        
          and 
          (not interface.name.matches('Bean'))
        )  --end complexType conditions
      )
    )
  ----------- End Iteration -----------;
  ->intersection(
  ------- Composite Iteration --------
    ------------- Iteration -------------:
      java::ClassDeclaration.allInstances()->select(class: java::ClassDeclaration |
        (  --complexType conditions
          (
          test
        )
        
          (  --Variable conditions
            bla.modifier.visibility = java::VisibilityKind::public
            and 
            not (bla.modifier.static)
          )  --End Variable Conditions
        let class_1_fields_2 = class.bodyDeclarations->select(class_1_fieldToSelect_2 | 
            --t1
            201
            --t2
            185
        ) in
          class_1_fields_2->size() > 0 and
          class_1_fields_2->asOrderedSet()->size() >= 1
          and 
          (
          test
        )
        
        
        )  --end complexType conditions
      )->union(
        java::InterfaceDeclaration.allInstances()->select(interface: java::InterfaceDeclaration |
          (  --complexType conditions
            (
            test
          )
          
            (  --Variable conditions
              bla.modifier.visibility = java::VisibilityKind::public
              and 
              not (bla.modifier.static)
            )  --End Variable Conditions
          let class_1_fields_2 = interface.bodyDeclarations->select(class_1_fieldToSelect_2 | 
              --t1
              201
              --t2
              185
          ) in
            class_1_fields_2->size() > 0 and
            class_1_fields_2->asOrderedSet()->size() >= 1
            and 
            (
            test
          )
          
          
          )  --end complexType conditions
        )
      )
    ----------- End Iteration -----------;
    ->union(
    ------------- Iteration -------------:
      java::ClassDeclaration.allInstances()->select(class: java::ClassDeclaration |
        (  --complexType conditions
          (
          test
        )
        
          (  --Variable conditions
            bla.modifier.visibility = java::VisibilityKind::public
            and 
            not (bla.modifier.inheritance = java::InheritanceKind::final)
          )  --End Variable Conditions
        let class_1_fields_2 = class.bodyDeclarations->select(class_1_fieldToSelect_2 | 
            --t1
            237
            --t2
            221
        ) in
          class_1_fields_2->size() > 0 and
          class_1_fields_2->asOrderedSet()->size() >= 1
          and 
          (
          test
        )
        
        
        )  --end complexType conditions
      )->union(
        java::InterfaceDeclaration.allInstances()->select(interface: java::InterfaceDeclaration |
          (  --complexType conditions
            (
            test
          )
          
            and 
            (
            test
          )
          
            (  --Variable conditions
              bla.modifier.visibility = java::VisibilityKind::public
              and 
              not (bla.modifier.inheritance = java::InheritanceKind::final)
            )  --End Variable Conditions
          let class_1_fields_2 = interface.bodyDeclarations->select(class_1_fieldToSelect_2 | 
              --t1
              237
              --t2
              221
          ) in
            class_1_fields_2->size() > 0 and
            class_1_fields_2->asOrderedSet()->size() >= 1
          
          )  --end complexType conditions
        )
      )
    ----------- End Iteration -----------;
    )--close union
  ------- End Composite Iteration --------
  )--close intersection
  
------- End Composite Iteration --------
