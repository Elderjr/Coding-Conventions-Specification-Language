[comment encoding = UTF-8 /]
[module variableModule('http://www.example.org/ccsl') /]
[import org::ccsl::gen::ocl::elements::namedElement::namedElementModule /]
[import org::gen::ocl::strings::stringModule /]

[query public getAllVariableConditions(variable: Variable, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean): Set(String) =
Set(String){
  	variable.generateVariablePropertiesCondition(varName, variable.properties)
}->select(condition: String | condition.trim().size() > 0)
->union(variable.getAllNamedElementConditions(contextElement, varName, filters, exactMatch))
/]

[template public generateConditions(element: Element, contextElement: Element, varName: String, filters: OrderedSet(AtomicFilter), exactMatch: Boolean, typeCheck: Boolean) ? (element.oclIsTypeOf(Variable)) post(trim())]
( --Variable Conditions
[if typeCheck]
  [varName /].oclIsKindOf(FieldDeclaration) and
[for (condition: String | element.oclAsType(Variable).getAllVariableConditions(contextElement, varName.concat('.oclAsType(FieldDeclaration)'), filters, exactMatch)) separator('  and \n')]
  [condition.printStringWithIdentation() /]
[/for]
[else]
[for (condition: String | element.oclAsType(Variable).getAllVariableConditions(contextElement, varName, filters, exactMatch)) separator('  and \n')]
  [condition.printStringWithIdentation() /]
[/for]
[/if]
) --End Variable Conditions
[/template]

[template public generatePropertiesConditions(element: Element, varName: String, properties: OrderedSet(Property)) ? (element.oclIsTypeOf(Variable))]
[element.oclAsType(Variable).generateVariablePropertiesCondition(varName, properties) /]
[/template]

[template public generateVariablePropertiesCondition(variable: Variable, varName: String, properties: OrderedSet(Property)) post (trim())]
[for (property: Property | properties) separator (' and ')]
[if property.name = 'public'] [varName /].modifier.visibility = java::VisibilityKind::public
[elseif property.name = 'private'] [varName /].modifier.visibility = java::VisibilityKind::private
[elseif property.name = 'static'] [varName /].modifier.static
[elseif property.name = 'final'] [varName /].modifier.inheritance = java::InheritanceKind::final
[/if]
[/for]
[/template]
