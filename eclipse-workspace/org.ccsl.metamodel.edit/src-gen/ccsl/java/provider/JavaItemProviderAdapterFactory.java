/**
 */
package ccsl.java.provider;

import ccsl.java.util.JavaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class JavaItemProviderAdapterFactory extends JavaAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public JavaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.java.JElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JElementItemProvider jElementItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.java.JElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJElementAdapter() {
		if (jElementItemProvider == null) {
			jElementItemProvider = new JElementItemProvider(this);
		}

		return jElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.java.JClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JClassItemProvider jClassItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.java.JClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJClassAdapter() {
		if (jClassItemProvider == null) {
			jClassItemProvider = new JClassItemProvider(this);
		}

		return jClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.java.JInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JInterfaceItemProvider jInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.java.JInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJInterfaceAdapter() {
		if (jInterfaceItemProvider == null) {
			jInterfaceItemProvider = new JInterfaceItemProvider(this);
		}

		return jInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.java.JMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JMethodItemProvider jMethodItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.java.JMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJMethodAdapter() {
		if (jMethodItemProvider == null) {
			jMethodItemProvider = new JMethodItemProvider(this);
		}

		return jMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.java.JConstructor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JConstructorItemProvider jConstructorItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.java.JConstructor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJConstructorAdapter() {
		if (jConstructorItemProvider == null) {
			jConstructorItemProvider = new JConstructorItemProvider(this);
		}

		return jConstructorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.java.JTryCatch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JTryCatchItemProvider jTryCatchItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.java.JTryCatch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJTryCatchAdapter() {
		if (jTryCatchItemProvider == null) {
			jTryCatchItemProvider = new JTryCatchItemProvider(this);
		}

		return jTryCatchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.java.JTryClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JTryClauseItemProvider jTryClauseItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.java.JTryClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJTryClauseAdapter() {
		if (jTryClauseItemProvider == null) {
			jTryClauseItemProvider = new JTryClauseItemProvider(this);
		}

		return jTryClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.java.JCatchClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JCatchClauseItemProvider jCatchClauseItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.java.JCatchClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJCatchClauseAdapter() {
		if (jCatchClauseItemProvider == null) {
			jCatchClauseItemProvider = new JCatchClauseItemProvider(this);
		}

		return jCatchClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.java.InstanceOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceOfItemProvider instanceOfItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.java.InstanceOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createInstanceOfAdapter() {
		if (instanceOfItemProvider == null) {
			instanceOfItemProvider = new InstanceOfItemProvider(this);
		}

		return instanceOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.java.ThrowStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThrowStatementItemProvider throwStatementItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.java.ThrowStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createThrowStatementAdapter() {
		if (throwStatementItemProvider == null) {
			throwStatementItemProvider = new ThrowStatementItemProvider(this);
		}

		return throwStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.java.JFor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JForItemProvider jForItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.java.JFor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJForAdapter() {
		if (jForItemProvider == null) {
			jForItemProvider = new JForItemProvider(this);
		}

		return jForItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.java.JReturnStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JReturnStatementItemProvider jReturnStatementItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.java.JReturnStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJReturnStatementAdapter() {
		if (jReturnStatementItemProvider == null) {
			jReturnStatementItemProvider = new JReturnStatementItemProvider(this);
		}

		return jReturnStatementItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (jElementItemProvider != null)
			jElementItemProvider.dispose();
		if (jClassItemProvider != null)
			jClassItemProvider.dispose();
		if (jInterfaceItemProvider != null)
			jInterfaceItemProvider.dispose();
		if (jMethodItemProvider != null)
			jMethodItemProvider.dispose();
		if (jConstructorItemProvider != null)
			jConstructorItemProvider.dispose();
		if (jTryCatchItemProvider != null)
			jTryCatchItemProvider.dispose();
		if (jTryClauseItemProvider != null)
			jTryClauseItemProvider.dispose();
		if (jCatchClauseItemProvider != null)
			jCatchClauseItemProvider.dispose();
		if (instanceOfItemProvider != null)
			instanceOfItemProvider.dispose();
		if (throwStatementItemProvider != null)
			throwStatementItemProvider.dispose();
		if (jForItemProvider != null)
			jForItemProvider.dispose();
		if (jReturnStatementItemProvider != null)
			jReturnStatementItemProvider.dispose();
	}

}
