/**
 */
package ccsl.filters.provider;

import ccsl.filters.util.FiltersAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FiltersItemProviderAdapterFactory extends FiltersAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FiltersItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.filters.CompositeFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeFilterItemProvider compositeFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.filters.CompositeFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCompositeFilterAdapter() {
		if (compositeFilterItemProvider == null) {
			compositeFilterItemProvider = new CompositeFilterItemProvider(this);
		}

		return compositeFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.filters.PropertyFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyFilterItemProvider propertyFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.filters.PropertyFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPropertyFilterAdapter() {
		if (propertyFilterItemProvider == null) {
			propertyFilterItemProvider = new PropertyFilterItemProvider(this);
		}

		return propertyFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.filters.TemplateFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateFilterItemProvider templateFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.filters.TemplateFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTemplateFilterAdapter() {
		if (templateFilterItemProvider == null) {
			templateFilterItemProvider = new TemplateFilterItemProvider(this);
		}

		return templateFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.filters.DefinesMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefinesMethodItemProvider definesMethodItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.filters.DefinesMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDefinesMethodAdapter() {
		if (definesMethodItemProvider == null) {
			definesMethodItemProvider = new DefinesMethodItemProvider(this);
		}

		return definesMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.filters.EqualsNamedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualsNamedElementItemProvider equalsNamedElementItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.filters.EqualsNamedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEqualsNamedElementAdapter() {
		if (equalsNamedElementItemProvider == null) {
			equalsNamedElementItemProvider = new EqualsNamedElementItemProvider(this);
		}

		return equalsNamedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.filters.RegexLiteralValueFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegexLiteralValueFilterItemProvider regexLiteralValueFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.filters.RegexLiteralValueFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRegexLiteralValueFilterAdapter() {
		if (regexLiteralValueFilterItemProvider == null) {
			regexLiteralValueFilterItemProvider = new RegexLiteralValueFilterItemProvider(this);
		}

		return regexLiteralValueFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.filters.CountBlockStatementsFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CountBlockStatementsFilterItemProvider countBlockStatementsFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.filters.CountBlockStatementsFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCountBlockStatementsFilterAdapter() {
		if (countBlockStatementsFilterItemProvider == null) {
			countBlockStatementsFilterItemProvider = new CountBlockStatementsFilterItemProvider(this);
		}

		return countBlockStatementsFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.filters.EqualsNamedElementWithLiterals} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualsNamedElementWithLiteralsItemProvider equalsNamedElementWithLiteralsItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.filters.EqualsNamedElementWithLiterals}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEqualsNamedElementWithLiteralsAdapter() {
		if (equalsNamedElementWithLiteralsItemProvider == null) {
			equalsNamedElementWithLiteralsItemProvider = new EqualsNamedElementWithLiteralsItemProvider(this);
		}

		return equalsNamedElementWithLiteralsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.filters.NamedElementRegexMatch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedElementRegexMatchItemProvider namedElementRegexMatchItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.filters.NamedElementRegexMatch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createNamedElementRegexMatchAdapter() {
		if (namedElementRegexMatchItemProvider == null) {
			namedElementRegexMatchItemProvider = new NamedElementRegexMatchItemProvider(this);
		}

		return namedElementRegexMatchItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (compositeFilterItemProvider != null)
			compositeFilterItemProvider.dispose();
		if (propertyFilterItemProvider != null)
			propertyFilterItemProvider.dispose();
		if (templateFilterItemProvider != null)
			templateFilterItemProvider.dispose();
		if (definesMethodItemProvider != null)
			definesMethodItemProvider.dispose();
		if (equalsNamedElementItemProvider != null)
			equalsNamedElementItemProvider.dispose();
		if (regexLiteralValueFilterItemProvider != null)
			regexLiteralValueFilterItemProvider.dispose();
		if (countBlockStatementsFilterItemProvider != null)
			countBlockStatementsFilterItemProvider.dispose();
		if (equalsNamedElementWithLiteralsItemProvider != null)
			equalsNamedElementWithLiteralsItemProvider.dispose();
		if (namedElementRegexMatchItemProvider != null)
			namedElementRegexMatchItemProvider.dispose();
	}

}
