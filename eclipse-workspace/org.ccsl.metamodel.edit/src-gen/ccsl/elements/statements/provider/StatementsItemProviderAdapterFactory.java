/**
 */
package ccsl.elements.statements.provider;

import ccsl.elements.statements.util.StatementsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StatementsItemProviderAdapterFactory extends StatementsAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StatementsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.Statement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementItemProvider statementItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.Statement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createStatementAdapter() {
		if (statementItemProvider == null) {
			statementItemProvider = new StatementItemProvider(this);
		}

		return statementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.NamedElementAccess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedElementAccessItemProvider namedElementAccessItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.NamedElementAccess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createNamedElementAccessAdapter() {
		if (namedElementAccessItemProvider == null) {
			namedElementAccessItemProvider = new NamedElementAccessItemProvider(this);
		}

		return namedElementAccessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.VariableAccess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableAccessItemProvider variableAccessItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.VariableAccess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createVariableAccessAdapter() {
		if (variableAccessItemProvider == null) {
			variableAccessItemProvider = new VariableAccessItemProvider(this);
		}

		return variableAccessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.ComplexTypeAccess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexTypeAccessItemProvider complexTypeAccessItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.ComplexTypeAccess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createComplexTypeAccessAdapter() {
		if (complexTypeAccessItemProvider == null) {
			complexTypeAccessItemProvider = new ComplexTypeAccessItemProvider(this);
		}

		return complexTypeAccessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.MethodInvocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodInvocationItemProvider methodInvocationItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.MethodInvocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMethodInvocationAdapter() {
		if (methodInvocationItemProvider == null) {
			methodInvocationItemProvider = new MethodInvocationItemProvider(this);
		}

		return methodInvocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.Access} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccessItemProvider accessItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.Access}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAccessAdapter() {
		if (accessItemProvider == null) {
			accessItemProvider = new AccessItemProvider(this);
		}

		return accessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.LiteralValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiteralValueItemProvider literalValueItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.LiteralValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLiteralValueAdapter() {
		if (literalValueItemProvider == null) {
			literalValueItemProvider = new LiteralValueItemProvider(this);
		}

		return literalValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.CompositeExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeExpItemProvider compositeExpItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.CompositeExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCompositeExpAdapter() {
		if (compositeExpItemProvider == null) {
			compositeExpItemProvider = new CompositeExpItemProvider(this);
		}

		return compositeExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.AtomicExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicExpItemProvider atomicExpItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.AtomicExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAtomicExpAdapter() {
		if (atomicExpItemProvider == null) {
			atomicExpItemProvider = new AtomicExpItemProvider(this);
		}

		return atomicExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.VarAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarAssignmentItemProvider varAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.VarAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createVarAssignmentAdapter() {
		if (varAssignmentItemProvider == null) {
			varAssignmentItemProvider = new VarAssignmentItemProvider(this);
		}

		return varAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.BranchControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BranchControlItemProvider branchControlItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.BranchControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createBranchControlAdapter() {
		if (branchControlItemProvider == null) {
			branchControlItemProvider = new BranchControlItemProvider(this);
		}

		return branchControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.LoopControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoopControlItemProvider loopControlItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.LoopControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLoopControlAdapter() {
		if (loopControlItemProvider == null) {
			loopControlItemProvider = new LoopControlItemProvider(this);
		}

		return loopControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.Block} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockItemProvider blockItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.Block}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createBlockAdapter() {
		if (blockItemProvider == null) {
			blockItemProvider = new BlockItemProvider(this);
		}

		return blockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.IfStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfStatementItemProvider ifStatementItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.IfStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIfStatementAdapter() {
		if (ifStatementItemProvider == null) {
			ifStatementItemProvider = new IfStatementItemProvider(this);
		}

		return ifStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.PrefixExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrefixExpItemProvider prefixExpItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.PrefixExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPrefixExpAdapter() {
		if (prefixExpItemProvider == null) {
			prefixExpItemProvider = new PrefixExpItemProvider(this);
		}

		return prefixExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.InfixExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfixExpItemProvider infixExpItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.InfixExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createInfixExpAdapter() {
		if (infixExpItemProvider == null) {
			infixExpItemProvider = new InfixExpItemProvider(this);
		}

		return infixExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.PostfixExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PostfixExpItemProvider postfixExpItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.PostfixExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPostfixExpAdapter() {
		if (postfixExpItemProvider == null) {
			postfixExpItemProvider = new PostfixExpItemProvider(this);
		}

		return postfixExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.SuperMethodInvocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuperMethodInvocationItemProvider superMethodInvocationItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.SuperMethodInvocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSuperMethodInvocationAdapter() {
		if (superMethodInvocationItemProvider == null) {
			superMethodInvocationItemProvider = new SuperMethodInvocationItemProvider(this);
		}

		return superMethodInvocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.VarDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarDeclarationItemProvider varDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.VarDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createVarDeclarationAdapter() {
		if (varDeclarationItemProvider == null) {
			varDeclarationItemProvider = new VarDeclarationItemProvider(this);
		}

		return varDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ccsl.elements.statements.InstanceCreation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceCreationItemProvider instanceCreationItemProvider;

	/**
	 * This creates an adapter for a {@link ccsl.elements.statements.InstanceCreation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createInstanceCreationAdapter() {
		if (instanceCreationItemProvider == null) {
			instanceCreationItemProvider = new InstanceCreationItemProvider(this);
		}

		return instanceCreationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (statementItemProvider != null)
			statementItemProvider.dispose();
		if (namedElementAccessItemProvider != null)
			namedElementAccessItemProvider.dispose();
		if (variableAccessItemProvider != null)
			variableAccessItemProvider.dispose();
		if (complexTypeAccessItemProvider != null)
			complexTypeAccessItemProvider.dispose();
		if (methodInvocationItemProvider != null)
			methodInvocationItemProvider.dispose();
		if (accessItemProvider != null)
			accessItemProvider.dispose();
		if (literalValueItemProvider != null)
			literalValueItemProvider.dispose();
		if (expressionItemProvider != null)
			expressionItemProvider.dispose();
		if (compositeExpItemProvider != null)
			compositeExpItemProvider.dispose();
		if (atomicExpItemProvider != null)
			atomicExpItemProvider.dispose();
		if (controlFlowItemProvider != null)
			controlFlowItemProvider.dispose();
		if (varAssignmentItemProvider != null)
			varAssignmentItemProvider.dispose();
		if (branchControlItemProvider != null)
			branchControlItemProvider.dispose();
		if (loopControlItemProvider != null)
			loopControlItemProvider.dispose();
		if (blockItemProvider != null)
			blockItemProvider.dispose();
		if (ifStatementItemProvider != null)
			ifStatementItemProvider.dispose();
		if (prefixExpItemProvider != null)
			prefixExpItemProvider.dispose();
		if (infixExpItemProvider != null)
			infixExpItemProvider.dispose();
		if (postfixExpItemProvider != null)
			postfixExpItemProvider.dispose();
		if (superMethodInvocationItemProvider != null)
			superMethodInvocationItemProvider.dispose();
		if (varDeclarationItemProvider != null)
			varDeclarationItemProvider.dispose();
		if (instanceCreationItemProvider != null)
			instanceCreationItemProvider.dispose();
	}

}
