(
  VariableDeclarationFragment.allInstances()->select(varDecl1 |
    let e2: OclAny = varDecl1.initializer in
    (e2.oclIsKindOf(NumberLiteral)) and
    e2.oclAsType(NumberLiteral).tokenValue = '0' and
    let e3: OclAny = varDecl1.variablesContainer.type.type in
    (e3.oclIsKindOf(PrimitiveType)) and
    e3.oclAsType(PrimitiveType).name.matches('(char|byte|int|long|short)')
  )
->union(
    VariableDeclarationFragment.allInstances()->select(varDecl1 |
      let e2: OclAny = varDecl1.initializer in
      (e2.oclIsKindOf(BooleanLiteral)) and
      e2.oclAsType(BooleanLiteral).value.toString() = 'false' and
      let e3: OclAny = varDecl1.variablesContainer.type.type in
      (e3.oclIsKindOf(PrimitiveTypeBoolean))  
    )
  )->union(
    VariableDeclarationFragment.allInstances()->select(varDecl1 |
      let e2: OclAny = varDecl1.initializer in
      (e2.oclIsKindOf(NullLiteral)) and
      let c3: OclAny = varDecl1.variablesContainer.type.type in
      (c3.oclIsKindOf(ClassDeclaration) or c3.oclIsKindOf(InterfaceDeclaration))  
    )
  )->union(
    VariableDeclarationFragment.allInstances()->select(varDecl1 |
      let e2: OclAny = varDecl1.initializer in
      (e2.oclIsKindOf(NullLiteral)) and
      varDecl1.extraArrayDimensions >= 1  
    )
  )
)
