MethodInvocation.allInstances()->select(mInv1 |
  mInv1.method.oclAsSet()->exists(m2 | m2 <> mInv1 and 
    -- Method Conditions
    m2.name = 'append' and
    m2.oclContainer().oclAsSet()->exists(c3 | c3 <> m2 and c3 <> mInv1 and 
      --Java Class Conditions
      (
        c3.oclIsKindOf(ClassDeclaration) and
        c3.oclAsType(ClassDeclaration).bodyDeclarations->includes(m2)
      ) and
  mInv1.arguments->exists(e4 | e4 <> c3 and e4 <> m2 and e4 <> mInv1 and 
    e4.oclIsKindOf(StringLiteral) and
  let c3PackageHierarchy: Sequence(Package) = c3.oclAsType(ClassDeclaration).package->asSequence()->closure(package)->asSequence() in (
    Sequence{1 .. c3PackageHierarchy->size() }->iterate(i: Integer; fullName: String = '' | 
      	fullName.concat(c3PackageHierarchy->at(c3PackageHierarchy->size() - i + 1).name).concat('.')
    ).concat(c3.oclAsType(BodyDeclaration).name).matches('java\\.lang\\.String(Buffer|Builder)')
  )
   and
  e4.oclAsType(StringLiteral).escapedValue.matches('"."')
))))

