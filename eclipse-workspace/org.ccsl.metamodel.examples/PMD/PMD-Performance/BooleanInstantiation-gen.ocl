(
  ClassInstanceCreation.allInstances()->select(mInv1 |
    mInv1.type.type.oclAsSet()->exists(c2 | c2 <> mInv1 and 
      --Java Class Conditions
      c2.oclIsKindOf(ClassDeclaration) and
      c2.oclAsType(ClassDeclaration).package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
        fullName.concat(p.name).concat('.')
      ).concat(c2.oclAsType(BodyDeclaration).name) = 'java.lang.Boolean'  
  ))
->union(
    MethodInvocation.allInstances()->select(mInv1 |
      mInv1.method.oclAsSet()->exists(m2 | m2 <> mInv1 and 
        -- Method Conditions
        m2.name = 'valueOf' and
        m2.oclContainer().oclAsSet()->exists(c3 | c3 <> m2 and c3 <> mInv1 and 
          --Java Class Conditions
          (
            c3.oclIsKindOf(ClassDeclaration) and
            c3.oclAsType(ClassDeclaration).bodyDeclarations->includes(m2) and
            c3.oclAsType(ClassDeclaration).package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
              fullName.concat(p.name).concat('.')
            ).concat(c3.oclAsType(BodyDeclaration).name) = 'java.lang.Boolean'
          ) and
      mInv1.arguments->exists(e4 | e4 <> m2 and e4 <> mInv1 and e4 <> c3 and 
        (e4.oclIsKindOf(StringLiteral) or e4.oclIsKindOf(CharacterLiteral) or e4.oclIsKindOf(NumberLiteral) or e4.oclIsKindOf(BooleanLiteral))  
    ))))
  )
)
