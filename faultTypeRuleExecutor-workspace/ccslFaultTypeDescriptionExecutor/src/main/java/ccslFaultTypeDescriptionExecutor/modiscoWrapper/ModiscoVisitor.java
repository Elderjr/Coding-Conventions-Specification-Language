package ccslFaultTypeDescriptionExecutor.modiscoWrapper;
import org.eclipse.gmt.modisco.java.AbstractMethodDeclaration;
import org.eclipse.gmt.modisco.java.AbstractMethodInvocation;
import org.eclipse.gmt.modisco.java.AbstractTypeDeclaration;
import org.eclipse.gmt.modisco.java.AbstractTypeQualifiedExpression;
import org.eclipse.gmt.modisco.java.AbstractVariablesContainer;
import org.eclipse.gmt.modisco.java.Annotation;
import org.eclipse.gmt.modisco.java.Archive;
import org.eclipse.gmt.modisco.java.AssertStatement;
import org.eclipse.gmt.modisco.java.ASTNode;
import org.eclipse.gmt.modisco.java.AnnotationMemberValuePair;
import org.eclipse.gmt.modisco.java.AnnotationTypeDeclaration;
import org.eclipse.gmt.modisco.java.AnnotationTypeMemberDeclaration;
import org.eclipse.gmt.modisco.java.AnonymousClassDeclaration;
import org.eclipse.gmt.modisco.java.ArrayAccess;
import org.eclipse.gmt.modisco.java.ArrayCreation;
import org.eclipse.gmt.modisco.java.ArrayInitializer;
import org.eclipse.gmt.modisco.java.ArrayLengthAccess;
import org.eclipse.gmt.modisco.java.ArrayType;
import org.eclipse.gmt.modisco.java.Assignment;
import org.eclipse.gmt.modisco.java.AssignmentKind;
import org.eclipse.gmt.modisco.java.BodyDeclaration;
import org.eclipse.gmt.modisco.java.BooleanLiteral;
import org.eclipse.gmt.modisco.java.BlockComment;
import org.eclipse.gmt.modisco.java.Block;
import org.eclipse.gmt.modisco.java.BreakStatement;
import org.eclipse.gmt.modisco.java.CastExpression;
import org.eclipse.gmt.modisco.java.CatchClause;
import org.eclipse.gmt.modisco.java.CharacterLiteral;
import org.eclipse.gmt.modisco.java.ClassFile;
import org.eclipse.gmt.modisco.java.ClassInstanceCreation;
import org.eclipse.gmt.modisco.java.ConstructorDeclaration;
import org.eclipse.gmt.modisco.java.ConditionalExpression;
import org.eclipse.gmt.modisco.java.ConstructorInvocation;
import org.eclipse.gmt.modisco.java.ClassDeclaration;
import org.eclipse.gmt.modisco.java.Comment;
import org.eclipse.gmt.modisco.java.CompilationUnit;
import org.eclipse.gmt.modisco.java.ContinueStatement;
import org.eclipse.gmt.modisco.java.DoStatement;
import org.eclipse.gmt.modisco.java.EmptyStatement;
import org.eclipse.gmt.modisco.java.EnhancedForStatement;
import org.eclipse.gmt.modisco.java.EnumConstantDeclaration;
import org.eclipse.gmt.modisco.java.EnumDeclaration;
import org.eclipse.gmt.modisco.java.Expression;
import org.eclipse.gmt.modisco.java.ExpressionStatement;
import org.eclipse.gmt.modisco.java.FieldAccess;
import org.eclipse.gmt.modisco.java.FieldDeclaration;
import org.eclipse.gmt.modisco.java.ForStatement;
import org.eclipse.gmt.modisco.java.IfStatement;
import org.eclipse.gmt.modisco.java.ImportDeclaration;
import org.eclipse.gmt.modisco.java.InfixExpression;
import org.eclipse.gmt.modisco.java.InfixExpressionKind;
import org.eclipse.gmt.modisco.java.InheritanceKind;
import org.eclipse.gmt.modisco.java.Initializer;
import org.eclipse.gmt.modisco.java.InstanceofExpression;
import org.eclipse.gmt.modisco.java.InterfaceDeclaration;
import org.eclipse.gmt.modisco.java.Javadoc;
import org.eclipse.gmt.modisco.java.LabeledStatement;
import org.eclipse.gmt.modisco.java.LineComment;
import org.eclipse.gmt.modisco.java.Manifest;
import org.eclipse.gmt.modisco.java.ManifestAttribute;
import org.eclipse.gmt.modisco.java.ManifestEntry;
import org.eclipse.gmt.modisco.java.MemberRef;
import org.eclipse.gmt.modisco.java.MethodDeclaration;
import org.eclipse.gmt.modisco.java.MethodInvocation;
import org.eclipse.gmt.modisco.java.MethodRef;
import org.eclipse.gmt.modisco.java.MethodRefParameter;
import org.eclipse.gmt.modisco.java.Model;
import org.eclipse.gmt.modisco.java.Modifier;
import org.eclipse.gmt.modisco.java.NamedElement;
import org.eclipse.gmt.modisco.java.NamespaceAccess;
import org.eclipse.gmt.modisco.java.NumberLiteral;
import org.eclipse.gmt.modisco.java.NullLiteral;
import org.eclipse.gmt.modisco.java.Package;
import org.eclipse.gmt.modisco.java.PackageAccess;
import org.eclipse.gmt.modisco.java.ParameterizedType;
import org.eclipse.gmt.modisco.java.ParenthesizedExpression;
import org.eclipse.gmt.modisco.java.PostfixExpression;
import org.eclipse.gmt.modisco.java.PostfixExpressionKind;
import org.eclipse.gmt.modisco.java.PrefixExpression;
import org.eclipse.gmt.modisco.java.PrefixExpressionKind;
import org.eclipse.gmt.modisco.java.PrimitiveType;
import org.eclipse.gmt.modisco.java.PrimitiveTypeBoolean;
import org.eclipse.gmt.modisco.java.PrimitiveTypeByte;
import org.eclipse.gmt.modisco.java.PrimitiveTypeChar;
import org.eclipse.gmt.modisco.java.PrimitiveTypeDouble;
import org.eclipse.gmt.modisco.java.PrimitiveTypeShort;
import org.eclipse.gmt.modisco.java.PrimitiveTypeFloat;
import org.eclipse.gmt.modisco.java.PrimitiveTypeInt;
import org.eclipse.gmt.modisco.java.PrimitiveTypeLong;
import org.eclipse.gmt.modisco.java.PrimitiveTypeVoid;
import org.eclipse.gmt.modisco.java.ReturnStatement;
import org.eclipse.gmt.modisco.java.SingleVariableAccess;
import org.eclipse.gmt.modisco.java.SingleVariableDeclaration;
import org.eclipse.gmt.modisco.java.Statement;
import org.eclipse.gmt.modisco.java.StringLiteral;
import org.eclipse.gmt.modisco.java.SuperConstructorInvocation;
import org.eclipse.gmt.modisco.java.SuperFieldAccess;
import org.eclipse.gmt.modisco.java.SuperMethodInvocation;
import org.eclipse.gmt.modisco.java.SwitchCase;
import org.eclipse.gmt.modisco.java.SwitchStatement;
import org.eclipse.gmt.modisco.java.SynchronizedStatement;
import org.eclipse.gmt.modisco.java.TagElement;
import org.eclipse.gmt.modisco.java.TextElement;
import org.eclipse.gmt.modisco.java.ThisExpression;
import org.eclipse.gmt.modisco.java.ThrowStatement;
import org.eclipse.gmt.modisco.java.TryStatement;
import org.eclipse.gmt.modisco.java.Type;
import org.eclipse.gmt.modisco.java.TypeAccess;
import org.eclipse.gmt.modisco.java.TypeDeclaration;
import org.eclipse.gmt.modisco.java.TypeDeclarationStatement;
import org.eclipse.gmt.modisco.java.TypeLiteral;
import org.eclipse.gmt.modisco.java.TypeParameter;
import org.eclipse.gmt.modisco.java.UnresolvedItem;
import org.eclipse.gmt.modisco.java.UnresolvedItemAccess;
import org.eclipse.gmt.modisco.java.UnresolvedAnnotationDeclaration;
import org.eclipse.gmt.modisco.java.UnresolvedAnnotationTypeMemberDeclaration;
import org.eclipse.gmt.modisco.java.UnresolvedClassDeclaration;
import org.eclipse.gmt.modisco.java.UnresolvedEnumDeclaration;
import org.eclipse.gmt.modisco.java.UnresolvedInterfaceDeclaration;
import org.eclipse.gmt.modisco.java.UnresolvedLabeledStatement;
import org.eclipse.gmt.modisco.java.UnresolvedMethodDeclaration;
import org.eclipse.gmt.modisco.java.UnresolvedSingleVariableDeclaration;
import org.eclipse.gmt.modisco.java.UnresolvedType;
import org.eclipse.gmt.modisco.java.UnresolvedTypeDeclaration;
import org.eclipse.gmt.modisco.java.UnresolvedVariableDeclarationFragment;
import org.eclipse.gmt.modisco.java.VariableDeclaration;
import org.eclipse.gmt.modisco.java.VariableDeclarationExpression;
import org.eclipse.gmt.modisco.java.VariableDeclarationFragment;
import org.eclipse.gmt.modisco.java.VariableDeclarationStatement;
import org.eclipse.gmt.modisco.java.VisibilityKind;
import org.eclipse.gmt.modisco.java.WildCardType;
import org.eclipse.gmt.modisco.java.WhileStatement;

public interface ModiscoVisitor {

    public void accept(AbstractMethodDeclaration abstractMethodDeclaration);
    public void accept(AbstractMethodInvocation abstractMethodInvocation);
    public void accept(AbstractTypeDeclaration abstractTypeDeclaration);
    public void accept(AbstractTypeQualifiedExpression abstractTypeQualifiedExpression);
    public void accept(AbstractVariablesContainer abstractVariablesContainer);
    public void accept(Annotation annotation);
    public void accept(Archive archive);
    public void accept(AssertStatement assertStatement);
    public void accept(ASTNode aSTNode);
    public void accept(AnnotationMemberValuePair annotationMemberValuePair);
    public void accept(AnnotationTypeDeclaration annotationTypeDeclaration);
    public void accept(AnnotationTypeMemberDeclaration annotationTypeMemberDeclaration);
    public void accept(AnonymousClassDeclaration anonymousClassDeclaration);
    public void accept(ArrayAccess arrayAccess);
    public void accept(ArrayCreation arrayCreation);
    public void accept(ArrayInitializer arrayInitializer);
    public void accept(ArrayLengthAccess arrayLengthAccess);
    public void accept(ArrayType arrayType);
    public void accept(Assignment assignment);
    public void accept(AssignmentKind assignmentKind);
    public void accept(BodyDeclaration bodyDeclaration);
    public void accept(BooleanLiteral booleanLiteral);
    public void accept(BlockComment blockComment);
    public void accept(Block block);
    public void accept(BreakStatement breakStatement);
    public void accept(CastExpression castExpression);
    public void accept(CatchClause catchClause);
    public void accept(CharacterLiteral characterLiteral);
    public void accept(ClassFile classFile);
    public void accept(ClassInstanceCreation classInstanceCreation);
    public void accept(ConstructorDeclaration constructorDeclaration);
    public void accept(ConditionalExpression conditionalExpression);
    public void accept(ConstructorInvocation constructorInvocation);
    public void accept(ClassDeclaration classDeclaration);
    public void accept(Comment comment);
    public void accept(CompilationUnit compilationUnit);
    public void accept(ContinueStatement continueStatement);
    public void accept(DoStatement doStatement);
    public void accept(EmptyStatement emptyStatement);
    public void accept(EnhancedForStatement enhancedForStatement);
    public void accept(EnumConstantDeclaration enumConstantDeclaration);
    public void accept(EnumDeclaration enumDeclaration);
    public void accept(Expression expression);
    public void accept(ExpressionStatement expressionStatement);
    public void accept(FieldAccess fieldAccess);
    public void accept(FieldDeclaration fieldDeclaration);
    public void accept(ForStatement forStatement);
    public void accept(IfStatement ifStatement);
    public void accept(ImportDeclaration importDeclaration);
    public void accept(InfixExpression infixExpression);
    public void accept(InfixExpressionKind infixExpressionKind);
    public void accept(InheritanceKind inheritanceKind);
    public void accept(Initializer initializer);
    public void accept(InstanceofExpression instanceofExpression);
    public void accept(InterfaceDeclaration interfaceDeclaration);
    public void accept(Javadoc javadoc);
    public void accept(LabeledStatement labeledStatement);
    public void accept(LineComment lineComment);
    public void accept(Manifest manifest);
    public void accept(ManifestAttribute manifestAttribute);
    public void accept(ManifestEntry manifestEntry);
    public void accept(MemberRef memberRef);
    public void accept(MethodDeclaration methodDeclaration);
    public void accept(MethodInvocation methodInvocation);
    public void accept(MethodRef methodRef);
    public void accept(MethodRefParameter methodRefParameter);
    public void accept(Model model);
    public void accept(Modifier modifier);
    public void accept(NamedElement namedElement);
    public void accept(NamespaceAccess namespaceAccess);
    public void accept(NumberLiteral numberLiteral);
    public void accept(NullLiteral nullLiteral);
    public void accept(Package pack);
    public void accept(PackageAccess packageAccess);
    public void accept(ParameterizedType parameterizedType);
    public void accept(ParenthesizedExpression parenthesizedExpression);
    public void accept(PostfixExpression postfixExpression);
    public void accept(PostfixExpressionKind postfixExpressionKind);
    public void accept(PrefixExpression prefixExpression);
    public void accept(PrefixExpressionKind prefixExpressionKind);
    public void accept(PrimitiveType primitiveType);
    public void accept(PrimitiveTypeBoolean primitiveTypeBoolean);
    public void accept(PrimitiveTypeByte primitiveTypeByte);
    public void accept(PrimitiveTypeChar primitiveTypeChar);
    public void accept(PrimitiveTypeDouble primitiveTypeDouble);
    public void accept(PrimitiveTypeShort primitiveTypeShort);
    public void accept(PrimitiveTypeFloat primitiveTypeFloat);
    public void accept(PrimitiveTypeInt primitiveTypeInt);
    public void accept(PrimitiveTypeLong primitiveTypeLong);
    public void accept(PrimitiveTypeVoid primitiveTypeVoid);
    public void accept(ReturnStatement returnStatement);
    public void accept(SingleVariableAccess singleVariableAccess);
    public void accept(SingleVariableDeclaration singleVariableDeclaration);
    public void accept(Statement statement);
    public void accept(StringLiteral stringLiteral);
    public void accept(SuperConstructorInvocation superConstructorInvocation);
    public void accept(SuperFieldAccess superFieldAccess);
    public void accept(SuperMethodInvocation superMethodInvocation);
    public void accept(SwitchCase switchCase);
    public void accept(SwitchStatement switchStatement);
    public void accept(SynchronizedStatement synchronizedStatement);
    public void accept(TagElement tagElement);
    public void accept(TextElement textElement);
    public void accept(ThisExpression thisExpression);
    public void accept(ThrowStatement throwStatement);
    public void accept(TryStatement tryStatement);
    public void accept(Type type);
    public void accept(TypeAccess typeAccess);
    public void accept(TypeDeclaration typeDeclaration);
    public void accept(TypeDeclarationStatement typeDeclarationStatement);
    public void accept(TypeLiteral typeLiteral);
    public void accept(TypeParameter typeParameter);
    public void accept(UnresolvedItem unresolvedItem);
    public void accept(UnresolvedItemAccess unresolvedItemAccess);
    public void accept(UnresolvedAnnotationDeclaration unresolvedAnnotationDeclaration);
    public void accept(UnresolvedAnnotationTypeMemberDeclaration unresolvedAnnotationTypeMemberDeclaration);
    public void accept(UnresolvedClassDeclaration unresolvedClassDeclaration);
    public void accept(UnresolvedEnumDeclaration unresolvedEnumDeclaration);
    public void accept(UnresolvedInterfaceDeclaration unresolvedInterfaceDeclaration);
    public void accept(UnresolvedLabeledStatement unresolvedLabeledStatement);
    public void accept(UnresolvedMethodDeclaration unresolvedMethodDeclaration);
    public void accept(UnresolvedSingleVariableDeclaration unresolvedSingleVariableDeclaration);
    public void accept(UnresolvedType unresolvedType);
    public void accept(UnresolvedTypeDeclaration unresolvedTypeDeclaration);
    public void accept(UnresolvedVariableDeclarationFragment unresolvedVariableDeclarationFragment);
    public void accept(VariableDeclaration variableDeclaration);
    public void accept(VariableDeclarationExpression variableDeclarationExpression);
    public void accept(VariableDeclarationFragment variableDeclarationFragment);
    public void accept(VariableDeclarationStatement variableDeclarationStatement);
    public void accept(VisibilityKind visibilityKind);
    public void accept(WildCardType wildCardType);
    public void accept(WhileStatement whileStatement);
}
