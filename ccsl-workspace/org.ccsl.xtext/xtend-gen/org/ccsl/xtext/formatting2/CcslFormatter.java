/**
 * generated by Xtext 2.18.0.M3
 */
package org.ccsl.xtext.formatting2;

import ccsl.AtomicRule;
import ccsl.CompositeRule;
import ccsl.context.Context;
import com.google.inject.Inject;
import java.util.Arrays;
import org.ccsl.xtext.services.CcslGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class CcslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private CcslGrammarAccess _ccslGrammarAccess;
  
  protected void _format(final CompositeRule compositeRule, @Extension final IFormattableDocument document) {
    EList _rules = compositeRule.getRules();
    for (final Object rule : _rules) {
      document.<Object>format(rule);
    }
  }
  
  protected void _format(final AtomicRule atomicRule, @Extension final IFormattableDocument document) {
    document.<Context>format(atomicRule.getContext());
  }
  
  public void format(final Object atomicRule, final IFormattableDocument document) {
    if (atomicRule instanceof AtomicRule) {
      _format((AtomicRule)atomicRule, document);
      return;
    } else if (atomicRule instanceof CompositeRule) {
      _format((CompositeRule)atomicRule, document);
      return;
    } else if (atomicRule instanceof XtextResource) {
      _format((XtextResource)atomicRule, document);
      return;
    } else if (atomicRule instanceof EObject) {
      _format((EObject)atomicRule, document);
      return;
    } else if (atomicRule == null) {
      _format((Void)null, document);
      return;
    } else if (atomicRule != null) {
      _format(atomicRule, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(atomicRule, document).toString());
    }
  }
}
