// automatically generated by Xtext
grammar org.ccsl.xtext.Ccsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore" as ccsl
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//elements/statements/literalValues" 
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//elements" as elements
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//context" as context
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//filters" as filters
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//elements/statements/expressions" as expressions
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//elements/statements" as statements
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//nonElements" as nonElements
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//elements/namedElements" as namedElements
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//elements/datatype" as datatype
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//elements/statements/controlFlow" as controlFlow
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//faultTypeDescription/strategy" as strategy
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//faultTypeDescription/action" as action
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//java" as java
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//faultTypeDescription" as faultTypeDescription
import "platform:/resource/org.ccsl.metamodel/model/ccsl.ecore#//elements/statements/tryCatch" as tryCatch


Rule returns ccsl::Rule:
	CompositeRule | AtomicRule;

Element returns elements::Element:
	Element_Impl | CodeElement;

Filter returns filters::Filter:
	CompositeFilter | PropertyFilter | TemplateFilter_Impl | DefinesMethodFilter | SameNameFilter | RegexLiteralValueFilter | EqualsNamedElementWithLiterals | RegexMatch | TypedStatementFilter | SwitchCaseStatementCount | ImplicityOperandFilter | ImplicityContainerFilter | IsKindOfFilter | SuperMethodClosureFilter | IsTypeOfFilter | ChildComplexTypeFilter;

EString returns ecore::EString:
	ID
;

Method returns namedElements::Method:
	Method_Impl | Constructor;

NamedElement returns namedElements::NamedElement:
	NamedElement_Impl | ComplexType | Variable_Impl | Method_Impl | Constructor | Package | VariableVector;

DataType returns datatype::DataType:
	DataType_Impl | PrimitiveType_Impl | StringPrimitiveType | BooleanPrimitiveType | ShortPrimitiveType | ObjectType_Impl | ParameterizedType | GenericType | IntPrimitiveType | ArrayType;


OperatorExpression returns expressions::OperatorExpression:
	OperatorExpression_Impl | StringConcatenation | InfixExpression | Assignment | BooleanExpression | ArithmeticExpression;


Statement returns statements::Statement:
	Statement_Impl | NamedElementAccess | VariableAccess | DataTypeAccess | MethodInvocation_Impl | ControlFlow | Block | SuperMethodInvocation | VarDeclaration | InstanceCreation | Access_Impl | ArrayCreation | VarAssignment | SynchronizedBlock;

Variable returns namedElements::Variable:
	Variable_Impl | VariableVector;

ObjectType returns datatype::ObjectType:
	ObjectType_Impl | ParameterizedType | GenericType | ArrayType;

CompositeRule returns ccsl::CompositeRule:
	'CompositeRule'
	'{'
		('negated' negated=Boolean)?
		('operator' operator=LogicOperator)?
		'rules' '{' rules+=Rule ( "," rules+=Rule)* '}' 
	'}';

AtomicRule returns ccsl::AtomicRule:
	'AtomicRule'
	'{'
		('negated' negated=Boolean)?
		'context' context=Context
		'subject' subject=[elements::Element]
	'}';

/*
FaultTypeDescription returns ccsl::FaultTypeDescription:
	'FaultTypeDescription'
	'{'
		('name' name=String0)?
		'rule' rule=AtomicRule
		'actions' '{' actions+=InjectionAction ( "," actions+=InjectionAction)* '}' 
		'strategy' strategy=InjectionStrategy
	'}';
 */
Boolean returns type::Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

enum LogicOperator returns ccsl::LogicOperator:
				AND = 'AND' | OR = 'OR' | IF_THEN = 'IF_THEN';

Element_Impl returns elements::Element:
	{elements::Element}
	'Element' 'as' uniqueName=ID;

Context returns context::Context:
	{context::Context}
	'Context'
	'{'
		('contextElements' '{' contextElements+=Element ( "," contextElements+=Element)* '}' )?
		('filters' '{' filters+=Filter ( "," filters+=Filter)* '}' )?
	'}';

String0 returns type::String:
	ID /* TODO: implement this rule and an appropriate IValueConverter */;

CodeElement returns elements::CodeElement:
	{elements::CodeElement}
	'CodeElement'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

Property returns elements::Property:
	{elements::Property}
	'Property'
	'{'
		('name' name=String0)?
		('value' value=String0)?
	'}';

CompositeFilter returns filters::CompositeFilter:
	'CompositeFilter'
	'{'
		('negated' negated=Boolean)?
		('operator' operator=LogicOperator)?
		'filters' '{' filters+=Filter ( "," filters+=Filter)* '}' 
	'}';

PropertyFilter returns filters::PropertyFilter:
	'PropertyFilter'
	'{'
		('negated' negated=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'properties' '{' properties+=Property ( "," properties+=Property)* '}' 
	'}';

TemplateFilter_Impl returns filters::TemplateFilter:
	'TemplateFilter'
	'{'
		('negated' negated=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'targetTemplate' targetTemplate=[elements::Element|EString]
		'context' context=Context
	'}';

DefinesMethodFilter returns filters::DefinesMethodFilter:
	'DefinesMethodFilter'
	'{'
		('negated' negated=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'methods' '{' methods+=Method ( "," methods+=Method)* '}' 
	'}';

SameNameFilter returns filters::SameNameFilter:
	'SameNameFilter'
	'{'
		('negated' negated=Boolean)?
		('ignoreCase' ignoreCase=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		('elements' '(' elements+=[namedElements::NamedElement|EString] ( "," elements+=[namedElements::NamedElement|EString])* ')' )?
	'}';

RegexLiteralValueFilter returns filters::RegexLiteralValueFilter:
	'RegexLiteralValueFilter'
	'{'
		('negated' negated=Boolean)?
		('regex' regex=String0)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
	'}';

EqualsNamedElementWithLiterals returns filters::EqualsNamedElementWithLiterals:
	'EqualsNamedElementWithLiterals'
	'{'
		('negated' negated=Boolean)?
		('names' names=String0)?
		('ignoreCase' ignoreCase=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
	'}';

RegexMatch returns filters::RegexMatch:
	'RegexMatch'
	'{'
		('negated' negated=Boolean)?
		('regex' regex=String0)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
	'}';

TypedStatementFilter returns filters::TypedStatementFilter:
	'TypedStatementFilter'
	'{'
		('negated' negated=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'type' type=[datatype::DataType|EString]
	'}';

SwitchCaseStatementCount returns filters::SwitchCaseStatementCount:
	'SwitchCaseStatementCount'
	'{'
		('negated' negated=Boolean)?
		('min' min=Int0)?
		('max' max=Int0)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		('cases' '{' cases+=SwitchCaseBlock ( "," cases+=SwitchCaseBlock)* '}' )?
	'}';

ImplicityOperandFilter returns filters::ImplicityOperandFilter:
	'ImplicityOperandFilter'
	'{'
		('negated' negated=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'targetTemplate' targetTemplate=[elements::Element|EString]
		'implicityOperand' implicityOperand=[elements::Element|EString]
		'operatorExpression' operatorExpression=[expressions::OperatorExpression|EString]
		'context' context=Context
	'}';


ImplicityContainerFilter returns filters::ImplicityContainerFilter:
	'ImplicityContainerFilter'
	'{'
		('negated' negated=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'implicityContainer' implicityContainer=[elements::Element|EString]
		'implicityField' implicityField=[elements::Element|EString]
		'context' context=Context
	'}';

IsKindOfFilter returns filters::IsKindOfFilter:
	'IsKindOfFilter'
	'{'
		('negated' negated=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'type' type=[datatype::DataType|EString]
		'context' context=Context
	'}';

SuperMethodClosureFilter returns filters::SuperMethodClosureFilter:
	'SuperMethodClosureFilter'
	'{'
		('negated' negated=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'superMethod' superMethod=[namedElements::Method|EString]
		'context' context=Context
	'}';

IsTypeOfFilter returns filters::IsTypeOfFilter:
	'IsTypeOfFilter'
	'{'
		('negated' negated=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'type' type=[datatype::DataType|EString]
		'context' context=Context
	'}';

ChildComplexTypeFilter returns filters::ChildComplexTypeFilter:
	'ChildComplexTypeFilter'
	'{'
		('negated' negated=Boolean)?
		'targets' '(' targets+=[elements::Element|EString] ( "," targets+=[elements::Element|EString])* ')' 
		'superComplexType' superComplexType=[namedElements::ComplexType|EString]
		'childComplexType' childComplexType=[namedElements::ComplexType|EString]
		'context' context=Context
	'}';

Method_Impl returns namedElements::Method:
	{namedElements::Method}
	'Method'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('name' name=String0)?
		('returnType' returnType=[datatype::DataType|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
		('params' '{' params+=Variable ( "," params+=Variable)* '}' )?
	'}';

Statement_Impl returns statements::Statement:
	{statements::Statement}
	'Statement'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

Variable_Impl returns namedElements::Variable:
	{namedElements::Variable}
	'Variable'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('name' name=String0)?
		('type' type=[datatype::DataType|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('initialValue' initialValue=Statement)?
	'}';

DataType_Impl returns datatype::DataType:
	{datatype::DataType}
	'DataType'
	uniqueName=String0;

Constructor returns namedElements::Constructor:
	{namedElements::Constructor}
	'Constructor'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('name' name=String0)?
		('returnType' returnType=[datatype::DataType|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
		('params' '{' params+=Variable ( "," params+=Variable)* '}' )?
	'}';

NamedElementAccess returns statements::NamedElementAccess:
	{statements::NamedElementAccess}
	'NamedElementAccess'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('from' from=[statements::Statement|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

VariableAccess returns statements::VariableAccess:
	{statements::VariableAccess}
	'VariableAccess'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('elementAccessed' elementAccessed=[elements::Element|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('from' from=Statement)?
	'}';

DataTypeAccess returns statements::DataTypeAccess:
	{statements::DataTypeAccess}
	'DataTypeAccess'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('elementAccessed' elementAccessed=[elements::Element|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('from' from=Statement)?
	'}';

MethodInvocation_Impl returns statements::MethodInvocation:
	{statements::MethodInvocation}
	'MethodInvocation'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('elementAccessed' elementAccessed=[elements::Element|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('from' from=Statement)?
		('args' '{' args+=Statement ( "," args+=Statement)* '}' )?
	'}';

ControlFlow returns statements::ControlFlow:
	{statements::ControlFlow}
	'ControlFlow'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('condition' condition=Statement)?
	'}';

Block returns statements::Block:
	{statements::Block}
	'Block'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

SuperMethodInvocation returns statements::SuperMethodInvocation:
	{statements::SuperMethodInvocation}
	'SuperMethodInvocation'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('elementAccessed' elementAccessed=[elements::Element|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('from' from=Statement)?
		('args' '{' args+=Statement ( "," args+=Statement)* '}' )?
	'}';

VarDeclaration returns statements::VarDeclaration:
	{statements::VarDeclaration}
	'VarDeclaration'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('variable' variable=Variable)?
	'}';

InstanceCreation returns statements::InstanceCreation:
	{statements::InstanceCreation}
	'InstanceCreation'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('type' type=[datatype::ObjectType|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

Access_Impl returns statements::Access:
	{statements::Access}
	'Access'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('elementAccessed' elementAccessed=[elements::Element|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('from' from=Statement)?
	'}';

ArrayCreation returns statements::ArrayCreation:
	{statements::ArrayCreation}
	'ArrayCreation'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('type' type=[datatype::ObjectType|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

VarAssignment returns statements::VarAssignment:
	{statements::VarAssignment}
	'VarAssignment'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('variable' variable=[namedElements::Variable|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('assignment' assignment=Statement)?
	'}';

SynchronizedBlock returns statements::SynchronizedBlock:
	{statements::SynchronizedBlock}
	'SynchronizedBlock'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('bodyStatements' '{' bodyStatements+=Statement ( "," bodyStatements+=Statement)* '}' )?
		('key' key=Statement)?
	'}';

ObjectType_Impl returns datatype::ObjectType:
	{datatype::ObjectType}
	'ObjectType'
	uniqueName=String0;

ParameterizedType returns datatype::ParameterizedType:
	{datatype::ParameterizedType}
	'ParameterizedType'
	uniqueName=String0
	'{'
		('typeParameters' '(' typeParameters+=[datatype::ObjectType|EString] ( "," typeParameters+=[datatype::ObjectType|EString])* ')' )?
		('type' type=[namedElements::ComplexType|EString])?
	'}';

GenericType returns datatype::GenericType:
	{datatype::GenericType}
	'GenericType'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('name' name=String0)?
		('superTypes' '(' superTypes+=[namedElements::ComplexType|EString] ( "," superTypes+=[namedElements::ComplexType|EString])* ')' )?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
		('fields' '{' fields+=Variable ( "," fields+=Variable)* '}' )?
		('methods' '{' methods+=Method ( "," methods+=Method)* '}' )?
	'}';

ArrayType returns datatype::ArrayType:
	{datatype::ArrayType}
	'ArrayType'
	uniqueName=String0
	'{'
		('dimensions' dimensions=Int0)?
		('type' type=[datatype::DataType|EString])?
	'}';

ComplexType returns namedElements::ComplexType:
	{namedElements::ComplexType}
	'ComplexType'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('name' name=String0)?
		('superTypes' '(' superTypes+=[namedElements::ComplexType|EString] ( "," superTypes+=[namedElements::ComplexType|EString])* ')' )?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
		('fields' '{' fields+=Variable ( "," fields+=Variable)* '}' )?
		('methods' '{' methods+=Method ( "," methods+=Method)* '}' )?
	'}';

Int0 returns type::Int:
	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;

VariableVector returns namedElements::VariableVector:
	{namedElements::VariableVector}
	'VariableVector'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('name' name=String0)?
		('dimensions' dimensions=Int0)?
		('type' type=[datatype::DataType|EString])?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('initialValue' initialValue=Statement)?
	'}';

PrimitiveType_Impl returns datatype::PrimitiveType:
	{datatype::PrimitiveType}
	'PrimitiveType'
	uniqueName=String0;

StringPrimitiveType returns datatype::StringPrimitiveType:
	{datatype::StringPrimitiveType}
	'StringPrimitiveType'
	uniqueName=String0;

BooleanPrimitiveType returns datatype::BooleanPrimitiveType:
	{datatype::BooleanPrimitiveType}
	'BooleanPrimitiveType'
	uniqueName=String0;

ShortPrimitiveType returns datatype::ShortPrimitiveType:
	{datatype::ShortPrimitiveType}
	'ShortPrimitiveType'
	uniqueName=String0;

IntPrimitiveType returns datatype::IntPrimitiveType:
	{datatype::IntPrimitiveType}
	'IntPrimitiveType'
	uniqueName=String0;

NamedElement_Impl returns namedElements::NamedElement:
	{namedElements::NamedElement}
	'NamedElement'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('name' name=String0)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

Package returns namedElements::Package:
	{namedElements::Package}
	'Package'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('name' name=String0)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('groupedClasses' '{' groupedClasses+=ComplexType ( "," groupedClasses+=ComplexType)* '}' )?
	'}';

SwitchCaseBlock returns controlFlow::SwitchCaseBlock:
	{controlFlow::SwitchCaseBlock}
	'SwitchCaseBlock'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('default' default=Boolean)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

OperatorExpression_Impl returns expressions::OperatorExpression:
	{expressions::OperatorExpression}
	'OperatorExpression'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('operands' '{' operands+=Statement ( "," operands+=Statement)* '}' )?
	'}';

StringConcatenation returns expressions::StringConcatenation:
	{expressions::StringConcatenation}
	'StringConcatenation'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('operands' '{' operands+=Statement ( "," operands+=Statement)* '}' )?
	'}';

InfixExpression returns expressions::InfixExpression:
	{expressions::InfixExpression}
	'InfixExpression'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('operands' '{' operands+=Statement ( "," operands+=Statement)* '}' )?
	'}';

Assignment returns expressions::Assignment:
	{expressions::Assignment}
	'Assignment'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('operands' '{' operands+=Statement ( "," operands+=Statement)* '}' )?
		('target' target=Statement)?
	'}';

BooleanExpression returns expressions::BooleanExpression:
	{expressions::BooleanExpression}
	'BooleanExpression'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('booleanOperator' booleanOperator=BooleanOperator)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('operands' '{' operands+=Statement ( "," operands+=Statement)* '}' )?
	'}';

ArithmeticExpression returns expressions::ArithmeticExpression:
	{expressions::ArithmeticExpression}
	'ArithmeticExpression'
	uniqueName=String0
	'{'
		('exact' exact=Boolean)?
		('arithmeticOperator' arithmeticOperator=ArithmeticOperator)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('operands' '{' operands+=Statement ( "," operands+=Statement)* '}' )?
	'}';

enum BooleanOperator returns expressions::BooleanOperator:
				AND = 'AND' | OR = 'OR' | NOT = 'NOT' | EQUAL_TO = 'EQUAL_TO' | NOT_EQUAL_TO = 'NOT_EQUAL_TO' | GREATER_THAN = 'GREATER_THAN' | LESS_THAN = 'LESS_THAN' | GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO' | LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO' | UNDEFINED = 'UNDEFINED';

enum ArithmeticOperator returns expressions::ArithmeticOperator:
				ADDITION = 'ADDITION' | SUBTRACTION = 'SUBTRACTION' | MULTIPLICATION = 'MULTIPLICATION' | DIVISION = 'DIVISION' | MODULUS = 'MODULUS' | UNDEFINED = 'UNDEFINED';
