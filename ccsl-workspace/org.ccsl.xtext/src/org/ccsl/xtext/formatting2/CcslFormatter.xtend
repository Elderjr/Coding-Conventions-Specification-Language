/*
 * generated by Xtext 2.18.0.M3
 */
package org.ccsl.xtext.formatting2

import ccsl.AtomicRule
import ccsl.CompositeRule
import com.google.inject.Inject
import org.ccsl.xtext.services.CcslGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class CcslFormatter extends AbstractFormatter2 {
	
	@Inject extension CcslGrammarAccess

	def dispatch void format(CompositeRule compositeRule, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (rule : compositeRule.rules) {
			rule.format
		}
	}

	def dispatch void format(AtomicRule atomicRule, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		atomicRule.context.format
	}
	
	// TODO: implement for Context, CodeElement, CompositeFilter, PropertyFilter, TemplateFilter, DefinesMethodFilter, SwitchCaseStatementCount, ImplicityOperandFilter, ImplicityContainerFilter, IsKindOfFilter, SuperMethodClosureFilter, IsTypeOfFilter, ChildComplexTypeFilter, Method, Statement, Variable, Constructor, NamedElementAccess, VariableAccess, DataTypeAccess, MethodInvocation, ControlFlow, Block, SuperMethodInvocation, VarDeclaration, InstanceCreation, Access, ArrayCreation, VarAssignment, SynchronizedBlock, GenericType, ComplexType, VariableVector, NamedElement, Package, SwitchCaseBlock, OperatorExpression, StringConcatenation, InfixExpression, Assignment, BooleanExpression, ArithmeticExpression
}
