<faultTypeRule>
  <ocl>
    InfixExpression.allInstances()->select(infixWithOROperator |
      --Scope Conditions
      infixWithOROperator.operator = InfixExpressionKind::CONDITIONAL_OR  and 
      --Filters Conditions
      let infixTemplate:ASTNode = infixWithOROperator in
      infixTemplate.oclIsKindOf(InfixExpression) and
      let implicityContainers: OrderedSet(ASTNode) = infixTemplate->asOrderedSet()->closure(node: ASTNode |
        if node.oclContainer().oclIsKindOf(ASTNode) then
          node.oclContainer().oclAsType(ASTNode)
        else
          null
        endif
      ) in
      implicityContainers->exists(ifImplicitContainer:ASTNode |
        ifImplicitContainer.oclIsKindOf(IfStatement) and
        implicityContainers->includes(ifImplicitContainer.oclAsType(IfStatement).expression)
      )
    )
    ->reject(node: ASTNode | node.originalCompilationUnit.oclIsUndefined())
    ->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
  </ocl>
  <strategy name="All" custom="false" />
  <actions>
    <action name="DeleteInfixOperator" custom="false" />
  </actions>
</faultTypeRule>
