let violations: Set(ASTNode) = SingleVariableDeclaration.allInstances()->select(var_1: SingleVariableDeclaration |
  var_1.type <> null and
  let type_2: ASTNode = var_1.type.type in
  type_2 <> null and
  type_2.oclIsKindOf(Type) and
  var_1.oclAsType(NamedElement).name = 'foo' and
  let annotations: OrderedSet(ASTNode) = var_1.oclAsType(SingleVariableDeclaration).annotations in 
  annotations <> null and
  annotations->exists(annotation_3: ASTNode |  
  annotation_3 <> null and
  annotation_3.oclIsKindOf(Annotation)
--Close exists declarations
)
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
