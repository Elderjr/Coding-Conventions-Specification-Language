let violations: Set(ASTNode) = SingleVariableDeclaration.allInstances()->union(VariableDeclarationFragment.allInstances())->select(var_1: ASTNode |
  let type_2: ASTNode = if var_1.oclIsKindOf(SingleVariableDeclaration) and var_1.oclAsType(SingleVariableDeclaration).type <> null then
    var_1.oclAsType(SingleVariableDeclaration).type.type
  elseif var_1.oclIsKindOf(VariableDeclarationFragment) and var_1.oclAsType(VariableDeclarationFragment).variablesContainer.type <> null then
    var_1.oclAsType(VariableDeclarationFragment).variablesContainer.type.type
  else
    null
  endif in
  type_2 <> null and
  type_2.oclIsKindOf(Type) and
  let modifier: Modifier = if var_1.oclIsKindOf(SingleVariableDeclaration) then
    var_1.oclAsType(SingleVariableDeclaration).modifier
  elseif var_1.oclIsKindOf(VariableDeclarationFragment) then
    if var_1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(FieldDeclaration) then
      var_1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(FieldDeclaration).modifier
    elseif var_1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationExpression) then
      var_1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationExpression).modifier
    elseif var_1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationStatement) then
      var_1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationStatement).modifier
    else
      null
    endif
  else
    null
  endif in modifier <> null and modifier.inheritance = InheritanceKind::final and
  var_1.oclAsType(NamedElement).name = 'foo' and
  let annotations: OrderedSet(ASTNode) = if var_1.oclIsKindOf(SingleVariableDeclaration) then
    var_1.oclAsType(SingleVariableDeclaration).annotations
  elseif var_1.oclIsKindOf(VariableDeclarationFragment) then
    if var_1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(FieldDeclaration) then
      var_1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(FieldDeclaration).annotations
    elseif var_1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationExpression) then
      var_1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationExpression).annotations
    elseif var_1.oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationStatement) then
      var_1.oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationStatement).annotations
    else
      null
    endif
  else
    null
  endif in annotations <> null and
  annotations->exists(annotation_3: ASTNode |  
  annotation_3 <> null and
  annotation_3.oclIsKindOf(Annotation)
--Close exists declarations
)
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
