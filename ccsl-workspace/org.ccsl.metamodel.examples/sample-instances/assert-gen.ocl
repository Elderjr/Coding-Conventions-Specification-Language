let violations: Set(ASTNode) = AssertStatement.allInstances()->select(assertStmt_1: AssertStatement |
  let expression_1: ASTNode = assertStmt_1.message->asOrderedSet()->closure(p: ASTNode |
    if (p.oclIsKindOf(ParenthesizedExpression)) then
      p.oclAsType(ParenthesizedExpression).expression
    else
      p
    endif
  )->last() in
  expression_1 <> null and
  expression_1.oclIsKindOf(Expression) and
  let expression_2: ASTNode = assertStmt_1.expression->asOrderedSet()->closure(p: ASTNode |
    if (p.oclIsKindOf(ParenthesizedExpression)) then
      p.oclAsType(ParenthesizedExpression).expression
    else
      p
    endif
  )->last() in
  expression_2 <> null and
  expression_2.oclIsKindOf(Expression)
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc))) in
violations
