let violations: Set(ASTNode) = MethodInvocation.allInstances()->union(SuperMethodInvocation.allInstances())->select(methodInv1 |
  --AtomicRule Context Conditions
  let method2: MethodDeclaration = if methodInv1.oclIsKindOf(MethodInvocation) then
    methodInv1.oclAsType(MethodInvocation).method
  else if methodInv1.oclIsKindOf(SuperMethodInvocation) then
    methodInv1.oclAsType(SuperMethodInvocation).method
  else
    null
  endif endif in
  method2 <> null and
    let clazz3 : OclAny = method2.oclContainer()->asOrderedSet()->closure(container: OclAny | if container <> null and container.oclIsKindOf(ParenthesizedExpression) then
      container.oclAsType(ASTNode).oclContainer()
    elseif container <> null and container.oclIsKindOf(ASTNode) then
      container.oclAsType(ASTNode)
    else
     null
    endif)->last() in clazz3 <> null and
    (clazz3.oclIsKindOf(ClassDeclaration) or clazz3.oclIsKindOf(AnonymousClassDeclaration)) and
    let bodyDeclarations: OrderedSet(ASTNode) = if clazz3.oclIsKindOf(AbstractTypeDeclaration) then
      clazz3.oclAsType(AbstractTypeDeclaration).bodyDeclarations
    else if clazz3.oclIsKindOf(AnonymousClassDeclaration) then
      clazz3.oclAsType(AnonymousClassDeclaration).bodyDeclarations
    else
      null
    endif endif in (not bodyDeclarations->oclIsUndefined()) and
    let methods: OrderedSet(MethodDeclaration) = bodyDeclarations->select(method: ASTNode | method.oclIsKindOf(MethodDeclaration)) in
    methods->exists(methodTmp | methodTmp = method2) and
  let allSuperTypes: OrderedSet(ASTNode) = clazz3->asOrderedSet()->closure(superType |
    let superTypeAccesses: OrderedSet(TypeAccess) = if superType.oclIsKindOf(ClassDeclaration) then
      superType.oclAsType(ClassDeclaration).superInterfaces->append(superType.oclAsType(ClassDeclaration).superClass)
    elseif superType.oclIsKindOf(InterfaceDeclaration) then
      superType.oclAsType(InterfaceDeclaration).superInterfaces
    else
      OrderedSet(TypeAccess){}
    endif in superTypeAccesses
  	         ->collect(typeAccess: TypeAccess | if typeAccess <> null then typeAccess.type else null endif)
  	         ->select(type | type <> null)
  ) in
  allSuperTypes->exists(clazz4 |
    --IsKindOfFilter Context Conditions
    (clazz4.oclIsKindOf(ClassDeclaration) or clazz4.oclIsKindOf(AnonymousClassDeclaration)) and
    let className: String = if clazz4.oclIsKindOf(ClassDeclaration) then
      clazz4.oclAsType(ClassDeclaration).name
    else if clazz4.oclIsKindOf(AnonymousClassDeclaration) then
      clazz4.oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).name
    else
      null
    endif endif in (not className.oclIsUndefined()) and
    let classPackage: Package = if clazz4.oclIsKindOf(ClassDeclaration) then
      clazz4.oclAsType(ClassDeclaration).package
    else if clazz4.oclIsKindOf(AnonymousClassDeclaration) then
      clazz4.oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).package
    else
      null
    endif endif in (not className.oclIsUndefined()) and
    classPackage->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
      fullName.concat(p.name).concat('.')
    ).concat(className) = 'java.text.Format'
  ) and
  (
    -- Composite Filter (OR)
    not (
      (
        let methodInv5: ASTNode = methodInv1 in true and
        let implicityContainerSet: OrderedSet(ASTNode) = methodInv5->asOrderedSet()->closure(node: ASTNode |
          let container: OclAny = node.oclContainer() in  
          if container <> null and container.oclIsKindOf(ASTNode) then
            container
          else
            null
          endif
        ) in
        implicityContainerSet->exists(method6: ASTNode |
          (method6.oclIsKindOf(MethodDeclaration)) and
          let method6Modifier: Modifier = if method6.oclAsType(MethodDeclaration).oclIsKindOf(BodyDeclaration) then
            method6.oclAsType(MethodDeclaration).oclAsType(BodyDeclaration).modifier
          else
            null
          endif in (not method6Modifier.oclIsUndefined()) and
          method6Modifier.synchronized)
      ) or 
      (
        let methodInv5: ASTNode = methodInv1 in true and
        let implicityContainerSet: OrderedSet(ASTNode) = methodInv5->asOrderedSet()->closure(node: ASTNode |
          let container: OclAny = node.oclContainer() in  
          if container <> null and container.oclIsKindOf(ASTNode) then
            container
          else
            null
          endif
        ) in
        implicityContainerSet->exists(stmt7: ASTNode |
          stmt7.oclIsKindOf(SynchronizedStatement))
      )  
    )
    -- End Composite Filter (OR)
  )
)
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in violations
