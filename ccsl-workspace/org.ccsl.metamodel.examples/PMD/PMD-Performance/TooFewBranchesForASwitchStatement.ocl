let violations: Set(ASTNode) = SwitchStatement.allInstances()->select(stmt1: SwitchStatement |
  let casesBlocks: OrderedSet(OrderedSet(Statement)) = stmt1.statements->iterate(tmpStmt: Statement; acc: OrderedSet(OrderedSet(Statement)) = OrderedSet(OrderedSet(Statement)){} |
  	if(tmpStmt.oclIsKindOf(SwitchCase)) then
  	  acc->append(OrderedSet(Statement){tmpStmt})
  	else 
  	  let lastSetAcc: OrderedSet(Statement) = acc->last()->append(tmpStmt) in
  	  acc->excluding(acc->last())->including(lastSetAcc)
  	endif
  ) in casesBlocks->size() > 1 and
  casesBlocks->exists(caseBlock2 |  
    caseBlock2 <> null and
      true and
  let casesBlocks: OrderedSet(OrderedSet(Statement)) = stmt1.statements->iterate(tmpStmt: Statement; acc: OrderedSet(OrderedSet(Statement)) = OrderedSet(OrderedSet(Statement)){} |
  	if(tmpStmt.oclIsKindOf(SwitchCase)) then
  	  acc->append(OrderedSet(Statement){tmpStmt})
  	else 
  	  let lastSetAcc: OrderedSet(Statement) = acc->last()->append(tmpStmt) in
  	  acc->excluding(acc->last())->including(lastSetAcc)
  	endif
  ) in
  let count: Integer = casesBlocks->select(caseBlock2: OrderedSet(Statement) |
    true
  )->size() in
  count <=2
  )
)
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
