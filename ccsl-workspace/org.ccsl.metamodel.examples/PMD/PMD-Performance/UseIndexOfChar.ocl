let violations: Set(ASTNode) = MethodInvocation.allInstances()->union(SuperMethodInvocation.allInstances())->select(methodInv1 |
  --AtomicRule Context Conditions
  let method2: MethodDeclaration = if methodInv1.oclIsKindOf(MethodInvocation) then
    methodInv1.oclAsType(MethodInvocation).method
  else if methodInv1.oclIsKindOf(SuperMethodInvocation) then
    methodInv1.oclAsType(SuperMethodInvocation).method
  else
    null
  endif endif in
  method2 <> null and
  let args: OrderedSet(ASTNode) = if methodInv1.oclIsKindOf(MethodInvocation) then
    methodInv1.oclAsType(MethodInvocation).arguments
  elseif methodInv1.oclIsKindOf(SuperMethodInvocation) then
    methodInv1.oclAsType(SuperMethodInvocation).arguments
  else
    null
  endif in (not args->oclIsUndefined()) and
  let args: OrderedSet(ASTNode) = args->collect(arg: ASTNode |
    arg->closure(v: ASTNode | if v.oclIsKindOf(ParenthesizedExpression) then
      v.oclAsType(ParenthesizedExpression).expression
    else
      v
    endif)
  ) in
  args->exists(literal3 |  
    literal3 <> null and
      (literal3.oclIsKindOf(StringLiteral)) and
  literal3.oclAsType(StringLiteral).escapedValue.matches('"(.|(\\\\).)"') and
  method2.oclAsType(NamedElement).name.matches('(indexOf|lastIndexOf)')
  )
)
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
