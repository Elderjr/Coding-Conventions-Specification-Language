(
  ClassInstanceCreation.allInstances()->select(mInv1 |
    mInv1.arguments->exists(e2 | e2 <> mInv1 and 
      e2.oclIsKindOf(InfixExpression)  and
      e2.oclAsType(InfixExpression).extendedOperands->append(e2.oclAsType(InfixExpression).leftOperand)->append(e2.oclAsType(InfixExpression).rightOperand)->closure(x | 
        if x.oclIsKindOf(ParenthesizedExpression) then x.oclAsType(ParenthesizedExpression).expression 
        else if x.oclIsKindOf(InfixExpression) then x.oclAsType(InfixExpression).extendedOperands->append(x.oclAsType(InfixExpression).leftOperand)->append(x.oclAsType(InfixExpression).rightOperand)
        else Set(OclAny){x} endif endif
      )->exists(stringStatement | 
        (stringStatement.oclIsKindOf(ClassInstanceCreation) and stringStatement.oclAsType(ClassInstanceCreation).type.type.name = 'String') or
        (stringStatement.oclIsKindOf(MethodInvocation) and 
        (not stringStatement.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) and
        stringStatement.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.type.name = 'String' ) or
        (stringStatement.oclIsKindOf(StringLiteral) ) or
        (stringStatement.oclIsKindOf(SingleVariableAccess) and 
        (let varname: String = if stringStatement.oclAsType(SingleVariableAccess).variable.oclIsKindOf(VariableDeclarationFragment) then
          stringStatement.oclAsType(SingleVariableAccess).variable.oclAsType(VariableDeclarationFragment).variablesContainer.type.type.name
        else if stringStatement.oclAsType(SingleVariableAccess).variable.oclIsKindOf(SingleVariableDeclaration) then
          stringStatement.oclAsType(SingleVariableAccess).variable.oclAsType(SingleVariableDeclaration).type.type.name
        else
          ''
        endif endif in varname = 'String'))
     and
    mInv1.type.type.oclAsSet()->exists(c3 | c3 <> e2 and c3 <> mInv1 and 
      --Java Class Conditions
      c3.oclAsType(ClassDeclaration).package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
        fullName.concat(p.name).concat('.')
      ).concat(c3.oclAsType(BodyDeclaration).name) = 'java.lang.StringBuffer'  
  ))))
->union(
    MethodInvocation.allInstances()->select(mInv1 |
      mInv1.arguments->exists(e2 | e2 <> mInv1 and 
        e2.oclIsKindOf(InfixExpression)  and
        e2.oclAsType(InfixExpression).extendedOperands->append(e2.oclAsType(InfixExpression).leftOperand)->append(e2.oclAsType(InfixExpression).rightOperand)->closure(x | 
          if x.oclIsKindOf(ParenthesizedExpression) then x.oclAsType(ParenthesizedExpression).expression 
          else if x.oclIsKindOf(InfixExpression) then x.oclAsType(InfixExpression).extendedOperands->append(x.oclAsType(InfixExpression).leftOperand)->append(x.oclAsType(InfixExpression).rightOperand)
          else Set(OclAny){x} endif endif
        )->exists(stringStatement | 
          (stringStatement.oclIsKindOf(ClassInstanceCreation) and stringStatement.oclAsType(ClassInstanceCreation).type.type.name = 'String') or
          (stringStatement.oclIsKindOf(MethodInvocation) and 
          (not stringStatement.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) and
          stringStatement.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.type.name = 'String' ) or
          (stringStatement.oclIsKindOf(StringLiteral) ) or
          (stringStatement.oclIsKindOf(SingleVariableAccess) and 
          (let varname: String = if stringStatement.oclAsType(SingleVariableAccess).variable.oclIsKindOf(VariableDeclarationFragment) then
            stringStatement.oclAsType(SingleVariableAccess).variable.oclAsType(VariableDeclarationFragment).variablesContainer.type.type.name
          else if stringStatement.oclAsType(SingleVariableAccess).variable.oclIsKindOf(SingleVariableDeclaration) then
            stringStatement.oclAsType(SingleVariableAccess).variable.oclAsType(SingleVariableDeclaration).type.type.name
          else
            ''
          endif endif in varname = 'String'))
        
    )))
  )
)

