let violations: Set(ASTNode) = ClassInstanceCreation.allInstances()->select(stmt1 |
  --AtomicRule Context Conditions
  let clazz2: ASTNode = stmt1.type.type in
  clazz2 <> null and
    (clazz2.oclIsKindOf(ClassDeclaration) or clazz2.oclIsKindOf(AnonymousClassDeclaration)) and
  let className: String = if clazz2.oclIsKindOf(ClassDeclaration) then
    clazz2.oclAsType(ClassDeclaration).name
  else if clazz2.oclIsKindOf(AnonymousClassDeclaration) then
    clazz2.oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).name
  else
    null
  endif endif in (not className.oclIsUndefined()) and
  let classPackage: Package = if clazz2.oclIsKindOf(ClassDeclaration) then
    clazz2.oclAsType(ClassDeclaration).package
  else if clazz2.oclIsKindOf(AnonymousClassDeclaration) then
    clazz2.oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).package
  else
    null
  endif endif in (not className.oclIsUndefined()) and
  classPackage->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
    fullName.concat(p.name).concat('.')
  ).concat(className).matches('java\\.io\\.File(InputStream|OutputStream|Reader|Writer)')
)
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
