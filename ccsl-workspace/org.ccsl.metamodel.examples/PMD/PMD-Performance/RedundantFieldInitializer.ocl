let violations: Set(ASTNode) = (
  VariableDeclarationFragment.allInstances()->select(var1: VariableDeclarationFragment |
    var1.oclIsKindOf(VariableDeclarationFragment) and (not var1.oclIsKindOf(UnresolvedItem)) and var1.oclContainer().oclIsKindOf(FieldDeclaration) and
    let literal2: ASTNode = if not var1.oclAsType(VariableDeclarationFragment).variablesContainer.fragments->oclIsUndefined() then
      var1.oclAsType(VariableDeclarationFragment).variablesContainer.fragments->asOrderedSet()->last().initializer
    else
      null
    endif in
    let literal2: ASTNode = if literal2 <> null then
      literal2->asOrderedSet()->closure(v: ASTNode | 
        if v.oclIsKindOf(ParenthesizedExpression) then 
          v.oclAsType(ParenthesizedExpression).expression 
        else 
          v 
        endif
      )->last()
    else
      null
    endif in
    literal2 <> null and
      (literal2.oclIsKindOf(BooleanLiteral)) and
      literal2.oclAsType(BooleanLiteral).value.toString() = 'false' and
    var1.variablesContainer.type <> null and
      let primitiveType3: ASTNode = var1.variablesContainer.type.type in
      primitiveType3 <> null and
        (primitiveType3.oclIsKindOf(PrimitiveTypeBoolean))
    
  )->union(
    VariableDeclarationFragment.allInstances()->select(var1: VariableDeclarationFragment |
    var1.oclIsKindOf(VariableDeclarationFragment) and (not var1.oclIsKindOf(UnresolvedItem)) and var1.oclContainer().oclIsKindOf(FieldDeclaration) and
    let literal2: ASTNode = if not var1.oclAsType(VariableDeclarationFragment).variablesContainer.fragments->oclIsUndefined() then
      var1.oclAsType(VariableDeclarationFragment).variablesContainer.fragments->asOrderedSet()->last().initializer
    else
      null
    endif in
    let literal2: ASTNode = if literal2 <> null then
      literal2->asOrderedSet()->closure(v: ASTNode | 
        if v.oclIsKindOf(ParenthesizedExpression) then 
          v.oclAsType(ParenthesizedExpression).expression 
        else 
          v 
        endif
      )->last()
    else
      null
    endif in
    literal2 <> null and
      (literal2.oclIsKindOf(NumberLiteral)) and
    var1.variablesContainer.type <> null and
      let primitiveType3: ASTNode = var1.variablesContainer.type.type in
      primitiveType3 <> null and
        (primitiveType3.oclIsKindOf(PrimitiveType)) and
    primitiveType3.oclAsType(PrimitiveType).name.matches('(byte|short|char|int|long|float|double)') and
    literal2.oclAsType(NumberLiteral).tokenValue.matches('((0)*|((0)*\\.(0)*)|(0\\.0f)|(0d))')
    
  ))->union(
    VariableDeclarationFragment.allInstances()->select(var1: VariableDeclarationFragment |
    var1.oclIsKindOf(VariableDeclarationFragment) and (not var1.oclIsKindOf(UnresolvedItem)) and var1.oclContainer().oclIsKindOf(FieldDeclaration) and
    let literal2: ASTNode = if not var1.oclAsType(VariableDeclarationFragment).variablesContainer.fragments->oclIsUndefined() then
      var1.oclAsType(VariableDeclarationFragment).variablesContainer.fragments->asOrderedSet()->last().initializer
    else
      null
    endif in
    let literal2: ASTNode = if literal2 <> null then
      literal2->asOrderedSet()->closure(v: ASTNode | 
        if v.oclIsKindOf(ParenthesizedExpression) then 
          v.oclAsType(ParenthesizedExpression).expression 
        else 
          v 
        endif
      )->last()
    else
      null
    endif in
    literal2 <> null and
      (literal2.oclIsKindOf(NullLiteral)) and
    var1.variablesContainer.type <> null and
      let e3: ASTNode = var1.variablesContainer.type.type in
      e3 <> null and
        (e3.oclIsKindOf(ClassDeclaration) or e3.oclIsKindOf(InterfaceDeclaration) or e3.oclIsKindOf(ParameterizedType) or e3.oclIsKindOf(AnonymousClassDeclaration) or e3.oclIsKindOf(TypeParameter) or e3.oclIsKindOf(ArrayType) or e3.oclIsKindOf(UnresolvedTypeDeclaration) or e3.oclIsKindOf(TypeDeclaration) or e3.oclIsKindOf(EnumDeclaration))
    
  ))
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
