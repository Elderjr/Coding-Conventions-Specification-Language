let violations: Set(ASTNode) = ClassInstanceCreation.allInstances()->union(ConstructorInvocation.allInstances())->union(SuperConstructorInvocation.allInstances())->select(constructorInv_1: ASTNode |
  let constructorInv_1_args: OrderedSet(ASTNode) = constructorInv_1.oclAsType(AbstractMethodInvocation).arguments->collect(arg: ASTNode |
    arg->closure(v: ASTNode | if v.oclIsKindOf(ParenthesizedExpression) then
      v.oclAsType(ParenthesizedExpression).expression
    else
      v
    endif)
  ) in
  constructorInv_1_args->exists(literalValue_1: ASTNode |  
  literalValue_1 <> null and
  (
    literalValue_1.oclIsKindOf(BooleanLiteral) or
    literalValue_1.oclIsKindOf(CharacterLiteral) or
    literalValue_1.oclIsKindOf(NumberLiteral) or
    literalValue_1.oclIsKindOf(NullLiteral) or
    literalValue_1.oclIsKindOf(StringLiteral)  
  ) and
  let literalValue_1_container = literalValue_1.oclContainer() in
  literalValue_1_container = constructorInv_1 and
  let constructor_1: ASTNode = constructorInv_1.oclAsType(AbstractMethodInvocation).method in 
  constructor_1 <> null and
  constructor_1.oclIsKindOf(ConstructorDeclaration) and
  let constructor_1_parameters: OrderedSet(SingleVariableDeclaration) = constructor_1.oclAsType(ConstructorDeclaration).parameters in 
  constructor_1_parameters <> null and
  constructor_1_parameters->exists(var_1: SingleVariableDeclaration |  
  var_1 <> null and
  let var_1_container = if (var_1.oclContainer() <> null and (not var_1.oclIsKindOf(SingleVariableDeclaration))) then
    var_1.oclContainer().oclContainer()
  elseif (var_1.oclContainer() <> null) then
    var_1.oclContainer()
  else
   null
  endif in
  var_1_container = constructor_1 and
  constructor_1_parameters->size() = 1 and
  let clazz_1 : OclAny = constructor_1.oclAsType(ConstructorDeclaration).oclContainer() in clazz_1 <> null and
  clazz_1.oclIsKindOf(ClassDeclaration) and
  let clazz_1_constructors: OrderedSet(ASTNode) = clazz_1.oclAsType(ClassDeclaration).bodyDeclarations->select(c | c.oclIsKindOf(ConstructorDeclaration)) in
  clazz_1_constructors->exists(constructorTmp | constructorTmp = constructor_1)  and 
  let className: String = if clazz_1.oclIsKindOf(ClassDeclaration) then
    clazz_1.oclAsType(ClassDeclaration).name
  else if clazz_1.oclIsKindOf(AnonymousClassDeclaration) then
    clazz_1.oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).name
  else
    null
  endif endif in (not className.oclIsUndefined()) and
  let classPackage: Package = if clazz_1.oclIsKindOf(ClassDeclaration) then
    clazz_1.oclAsType(ClassDeclaration).package
  else if clazz_1.oclIsKindOf(AnonymousClassDeclaration) then
    clazz_1.oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).package
  else
    null
  endif endif in (not className.oclIsUndefined()) and
  classPackage->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
    fullName.concat(p.name).concat('.')
  ).concat(className).matches('(java\\.math\\.)?Big(Decimal|Integer)') and
  if literalValue_1.oclIsKindOf(BooleanLiteral) then
    literalValue_1.oclAsType(BooleanLiteral).value.toString().matches('(0|0\\.0|1|10)')
  elseif literalValue_1.oclIsKindOf(CharacterLiteral) then
    literalValue_1.oclAsType(CharacterLiteral).escapedValue.substring(2, literalValue_1.oclAsType(CharacterLiteral).escapedValue.size() - 1).matches('(0|0\\.0|1|10)')
  elseif literalValue_1.oclIsKindOf(NumberLiteral) then
    literalValue_1.oclAsType(NumberLiteral).tokenValue.matches('(0|0\\.0|1|10)')
  elseif literalValue_1.oclIsKindOf(NullLiteral) then
    'null'.matches('(0|0\\.0|1|10)')
  elseif literalValue_1.oclIsKindOf(StringLiteral) then
    literalValue_1.oclAsType(StringLiteral).escapedValue.substring(2, literalValue_1.oclAsType(StringLiteral).escapedValue.size() - 1).matches('(0|0\\.0|1|10)')
  else
    false
  endif 
--Close exists declarations
))
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc))) in
violations
