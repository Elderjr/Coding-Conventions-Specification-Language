let violations: Set(ASTNode) = MethodInvocation.allInstances()->select(methodInv1: MethodInvocation |
  let method2: MethodDeclaration = methodInv1.method in
  method2 <> null and
    true and
  let args: OrderedSet(ASTNode) = methodInv1.arguments->collect(arg: ASTNode |
      arg->closure(v: ASTNode | if v.oclIsKindOf(ParenthesizedExpression) then
        v.oclAsType(ParenthesizedExpression).expression
      else
        v
      endif)
    ) in
    args->size() = 0 and
  method2.oclAsType(NamedElement).name.matches('to(Lower|Upper)Case')
  
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
