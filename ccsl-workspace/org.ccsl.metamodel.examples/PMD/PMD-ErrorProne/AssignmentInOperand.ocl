let violations: Set(ASTNode) = InfixExpression.allInstances()->union(PrefixExpression.allInstances())->union(PostfixExpression.allInstances())->select(stmt1: ASTNode |
  (stmt1.oclIsKindOf(InfixExpression) or stmt1.oclIsKindOf(PrefixExpression))  and
  let implicityOperandSet: OrderedSet(ASTNode) = stmt1->closure(n: ASTNode |
    if n.oclIsKindOf(InfixExpression) then
      n.oclAsType(InfixExpression).extendedOperands->append(n.oclAsType(InfixExpression).leftOperand)->append(n.oclAsType(InfixExpression).rightOperand)
    elseif n.oclIsKindOf(PostfixExpression) then
      n.oclAsType(PostfixExpression).operand
    elseif n.oclIsKindOf(PrefixExpression) then
      n.oclAsType(PrefixExpression).operand
    elseif n.oclIsKindOf(ParenthesizedExpression) then
      n.oclAsType(ParenthesizedExpression).expression
    else
      n
    endif
  )->excluding(stmt1) in
  implicityOperandSet->exists(stmt2: ASTNode |
    stmt2.oclIsKindOf(Assignment)
  )
  
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
