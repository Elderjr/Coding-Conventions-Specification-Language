let violations: Set(ASTNode) = MethodInvocation.allInstances()->union(SuperMethodInvocation.allInstances())->select(methodInv1: ASTNode |
  (methodInv1.oclIsKindOf(MethodInvocation) or methodInv1.oclIsKindOf(SuperMethodInvocation)) and
  let method2: MethodDeclaration = if methodInv1.oclIsKindOf(MethodInvocation) then
    methodInv1.oclAsType(MethodInvocation).method
  elseif methodInv1.oclIsKindOf(SuperMethodInvocation) then
    methodInv1.oclAsType(SuperMethodInvocation).method
  else
    null
  endif in 
  method2 <> null and
    method2.oclAsType(NamedElement).name = 'exit' and
    let clazz3 : OclAny = method2.oclContainer()->asOrderedSet()->closure(container: OclAny | if container <> null and container.oclIsKindOf(ParenthesizedExpression) then
      container.oclAsType(ASTNode).oclContainer()
    elseif container <> null and container.oclIsKindOf(ASTNode) then
      container.oclAsType(ASTNode)
    else
     null
    endif)->last() in clazz3 <> null and
    clazz3.oclIsKindOf(ClassDeclaration) and
    clazz3.oclAsType(ClassDeclaration).package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
      fullName.concat(p.name).concat('.')
    ).concat(clazz3.oclAsType(ClassDeclaration).name) = 'java.lang.System' and
    let bodyDeclarations: OrderedSet(ASTNode) = clazz3.oclAsType(ClassDeclaration).bodyDeclarations in bodyDeclarations <> null and
    let methods: OrderedSet(MethodDeclaration) = bodyDeclarations->select(method: ASTNode | method.oclIsKindOf(MethodDeclaration)) in
    methods->exists(methodTmp | methodTmp = method2)
  
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
