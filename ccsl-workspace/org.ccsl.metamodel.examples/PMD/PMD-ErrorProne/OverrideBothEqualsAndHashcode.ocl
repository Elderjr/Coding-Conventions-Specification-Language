let violations: Set(ASTNode) = ClassDeclaration.allInstances()->select(clazz1: ClassDeclaration |
  let bodyDeclarations: OrderedSet(ASTNode) = clazz1.bodyDeclarations in bodyDeclarations <> null and
  let methods: OrderedSet(MethodDeclaration) = bodyDeclarations->select(method: ASTNode | method.oclIsKindOf(MethodDeclaration)) in
  methods->exists(method2 |  
    method2 <> null and
      method2.oclAsType(NamedElement).name = 'equals' and
  not (
    let clazz3: ClassDeclaration = clazz1 in 
    let bodyDeclarations: OrderedSet(ASTNode) = clazz3.bodyDeclarations in bodyDeclarations <> null and
    let methods: OrderedSet(MethodDeclaration) = bodyDeclarations->select(method: ASTNode | method.oclIsKindOf(MethodDeclaration)) in
    methods->exists(method4 |  
      method4 <> null and
        method4.oclAsType(NamedElement).name = 'hashCode')
  )
  )
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
