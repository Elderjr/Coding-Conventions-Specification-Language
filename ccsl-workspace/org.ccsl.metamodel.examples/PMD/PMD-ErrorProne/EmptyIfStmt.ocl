let violations: Set(ASTNode) = IfStatement.allInstances()->select(ifStmt1: IfStatement |
  true and
  (
    -- Composite Filter (OR)
    (
      let ifWithEmptyStatement: IfStatement = ifStmt1 in 
      let stmt2: ASTNode = ifWithEmptyStatement.thenStatement in
      stmt2 <> null and
        stmt2.oclIsKindOf(EmptyStatement)
    ) or 
    (
      let ifWIthBlockWithoutStmt: IfStatement = ifStmt1 in 
      let block3: ASTNode = ifWIthBlockWithoutStmt.thenStatement in
      block3 <> null and
        block3.oclIsKindOf(Block) and
        let blockStatements: OrderedSet(Statement) = block3.oclAsType(Block).statements in
        blockStatements->size() = 0
    ) or 
    (
      let elseWithEmptyStatement: IfStatement = ifStmt1 in 
      let stmt4: ASTNode = elseWithEmptyStatement.elseStatement in
      stmt4 <> null and
        stmt4.oclIsKindOf(EmptyStatement)
    ) or 
    (
      let elseWithBlockWithoutStmt: IfStatement = ifStmt1 in 
      let block5: ASTNode = elseWithBlockWithoutStmt.elseStatement in
      block5 <> null and
        block5.oclIsKindOf(Block) and
        let blockStatements: OrderedSet(Statement) = block5.oclAsType(Block).statements in
        blockStatements->size() = 0
    )
    -- End Composite Filter (OR)
  ) 
  
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
