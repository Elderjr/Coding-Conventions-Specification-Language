let violations: Set(ASTNode) = MethodInvocation.allInstances()->select(methodInv1: MethodInvocation |
  let fromSet: OrderedSet(ASTNode) = methodInv1.expression->asOrderedSet()->closure(p: ASTNode | 
    if p.oclIsKindOf(ParenthesizedExpression) then
      p.oclAsType(ParenthesizedExpression).expression
    else
      p
    endif
  ) in
  let methodInv2: ASTNode = if fromSet->size() > 0 then
    fromSet->last()
  else
    null
  endif in
  let methodInv2: ASTNode = if methodInv2 <> null and methodInv2.oclIsKindOf(ExpressionStatement) then
    methodInv2.oclAsType(ExpressionStatement).expression
  else
    methodInv2
  endif in
  methodInv2 <> null and
    methodInv2.oclIsKindOf(MethodInvocation) and
    let method3: MethodDeclaration = methodInv2.oclAsType(MethodInvocation).method in
    method3 <> null and
      true and
  let method4: MethodDeclaration = methodInv1.method in
      method4 <> null and
        method4.oclAsType(NamedElement).name = 'equals' and
  method3.oclAsType(NamedElement).name.matches('to(Upper|Lower)Case')
  
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
