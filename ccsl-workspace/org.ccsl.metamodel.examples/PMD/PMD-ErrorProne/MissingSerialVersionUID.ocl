let violations: Set(ASTNode) = ClassDeclaration.allInstances()->select(clazz1: ClassDeclaration |
  let superInterfaces: OrderedSet(ASTNode) = clazz1.superInterfaces->collect(typeAccess: TypeAccess | typeAccess.type) in
  superInterfaces->exists(interface2: ASTNode |  
    interface2 <> null and
      interface2.oclIsKindOf(InterfaceDeclaration) and
      interface2.oclAsType(InterfaceDeclaration).package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
        fullName.concat(p.name).concat('.')
      ).concat(interface2.oclAsType(InterfaceDeclaration).name) = 'java.io.Serializable' and
  not (
    let clazz3: ClassDeclaration = clazz1 in 
    let bodyDeclarations: OrderedSet(ASTNode) = clazz3.bodyDeclarations in bodyDeclarations <> null and
    let fields: OrderedSet(VariableDeclarationFragment) = bodyDeclarations->collect(field: ASTNode | if field.oclIsKindOf(FieldDeclaration) then
      field.oclAsType(FieldDeclaration).fragments
    else
      null
    endif
    )->select(field: ASTNode | field <> null)->flatten() in
    fields->exists(var4 |  
      var4 <> null and
        var4.oclAsType(NamedElement).name = 'serialVersionUID')
  )
  )
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
