let violations: Set(ASTNode) = Block.allInstances()->select(block1: Block |
  let blockStatements: OrderedSet(Statement) = block1.statements in
  blockStatements->size() = 0 and
  let stmt2 : OclAny = block1.oclContainer()->asOrderedSet()->closure(container: OclAny | if container <> null and container.oclIsKindOf(ParenthesizedExpression) then
    container.oclAsType(ASTNode).oclContainer()
  elseif container <> null and container.oclIsKindOf(ASTNode) then
    container.oclAsType(ASTNode)
  else
   null
  endif)->last() in stmt2 <> null and
  stmt2.oclIsKindOf(TryStatement) and
  let blockTmp: Block = stmt2.oclAsType(TryStatement).finally in
  blockTmp = block1
  
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
