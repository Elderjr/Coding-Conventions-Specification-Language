[comment encoding = UTF-8 /]
[module recommendationRuleToText('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::filterUtils /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::rule::context::contextModule /]
[import org::ccsl::gen::ocl::rule::context::postConditionsModule /]
[import org::ccsl::gen::ocl::dispatchers::javaMatchingMetaclassesModule /]
[import org::ccsl::gen::ocl::dispatchers::generalElementWritterConditionsModule /]


[template private operation(logicOperator: LogicOperator)]
[if logicOperator = LogicOperator::AND]
->intersect[elseif logicOperator = LogicOperator::OR]
->union[/if]
[/template]

[template public writeOCL(rule: Rule)]
let violations: Set(ASTNode) = [rule.writeOCLToSelectElements() /] 
[rule.generatesPostConditionToRemoveJavadocRelatedElements() /]
[rule.generatesPostConditionToRemoveNonSourceElements() /] in
violations
[/template]

[template private writeOCLToSelectElements(rule: Rule) /]

[query private isElementNeedsTypecheckOnStart(e: Element): Boolean = 
  e.oclIsKindOf(Assignment) or
  e.oclIsKindOf(ArithmeticExpression) or
  e.oclIsKindOf(BooleanExpression) or 
  e.oclIsKindOf(StringConcatenation) or
  e.oclIsKindOf(FieldVariable)
/]

[template private writeGetAllInstances(metaclasses: OrderedSet(String))]
[for (metaclassesTarget: String | metaclasses) separator('->union(')]
[metaclassesTarget /].allInstances()[if i <> 1])[/if][/for]
[/template]


[query private getSubjectMetaclass(e: Element): String = 
if e.getMatchingJavaMetaclasses()->size() = 1 then
  e.getMatchingJavaMetaclasses()->first()
else
  'ASTNode'
endif 
/]

[query private isSubjectNeedsTypecheckOnStart(e: Element): Boolean = 
if e.isElementNeedsTypecheckOnStart() then
  true
else if e.getMatchingJavaMetaclasses()->size() = 1 then
  false
else
  true
endif endif
/]

[template private writeOCLToSelectElements(rule: AtomicRule) post(trim())]
[rule.clearAllContexts() /]
[let subjectMetaclass: String = rule.subject.getSubjectMetaclass()]
[let typecheck: Boolean = rule.subject.isSubjectNeedsTypecheckOnStart()]
[let subjectConditions: String = rule.subject.writeElementConditions(rule.subject.getUniqueOclName(), typecheck, subjectMetaclass)]
[let remainingElementConditions: OrderedSet(String) = rule._context.contextElements
  ->select(e: Element | not getElementsVisited()->includes(e)).writeElementConditionWithExists()->asOrderedSet()]
[let filtersConditions: String = rule._context.filters->writeFiltersConditions()]
[rule.subject.getMatchingJavaMetaclasses()->writeGetAllInstances() /]->select([rule.subject.getUniqueOclName() /]: [subjectMetaclass /] |
[for (condition: String | OrderedSet(String){subjectConditions}->union(remainingElementConditions)->including(filtersConditions)) separator(' and\n')]
  [condition.writeStr() /][/for]
[rule._context.writeCloseParenthesis() /][/let][/let][/let][/let][/let]

)
[/template]

[template private writeElementConditionWithExists(e: Element)]
[let subjectMetaclass: String = e.getSubjectMetaclass()]
[let typecheck: Boolean = e.isSubjectNeedsTypecheckOnStart()]
[e.getMatchingJavaMetaclasses()->writeGetAllInstances() /]->exists([e.getUniqueOclName() /]: [subjectMetaclass /] | [addElementExistsDeclaration() /]
[e.writeElementConditions(e.getUniqueOclName(), typecheck, subjectMetaclass) /]
[/let][/let]
[/template]

[template private writeOCLToSelectElements(compositeRule: CompositeRule)]
(
[for (subRules: Rule | compositeRule.rules) separator(compositeRule.operator.operation().concat('(\n'))]
[if i = 1]  [subRules.writeOCLToSelectElements() /][else]    [subRules.writeOCLToSelectElements() /])[/if][/for]

)
[/template]
