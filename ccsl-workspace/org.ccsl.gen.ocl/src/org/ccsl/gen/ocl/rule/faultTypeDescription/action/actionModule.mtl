[comment encoding = UTF-8 /]
[module actionModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]

[template public generatesActionTag(action: InjectionAction, root: Element, ruleName: String) ? (root = action.target and (not action.oclIsKindOf(ReplaceInfixOperator
)))]
<action name="[action.getActionName() /]" custom="false" />
[/template]

[template public generatesActionTag(action: InjectionAction, root: Element, ruleName: String)]
<action name="[ruleName /]Action" custom="true" />
[/template]

[template public getActionName(action: InjectionAction) /]

[template public getActionName(action: DeleteAction)]
Delete
[/template] 

[template public getActionName(action: MoveScopeUpAction)]
MoveScopeUp
[/template]

[template public getActionName(action: DeleteInfixOperator)]
DeleteInfixOperator
[/template]

[template public getActionName(action: ChangeLiteralValue)]
ChangeLiteralValue
[/template]

[template public getActionName(action: ReplaceInfixOperator)]
InfixOperatorReplace
[/template]

[template public generatesActionJavaClass(action: InjectionAction, root: Element, ruleName: String) ? (root <> action.target or action.oclIsKindOf(ReplaceInfixOperator))]
[file (ruleName.concat('/').concat(ruleName).concat('Action.java'), false, 'UTF-8')]
import org.eclipse.gmt.modisco.java.*;
import command.InjectionAction;
import command.impl.*;

public class [ruleName /]Action implements InjectionAction {

  private ASTNode getTarget(ASTNode root) {
    [action.generatesGetTargetBody(root, 'root') /]
  }

  @Override
  public void doAction(ASTNode node) {
    [action.generatesDoActionBody('node') /]
  }
}
[/file]
[/template]

[template public generatesDoActionBody(action: InjectionAction, containerVarname: String)]
ASTNode target = getTarget([containerVarname /]);
if(target != null) {
  new [action.getActionName() /].doAction(target);
}
[/template]

[template public generatesDoActionBody(action: ReplaceInfixOperator, containerVarname: String)]
ASTNode target = getTarget([containerVarname /]);
if(target != null) {
  java.util.Map<String, String> replacementMap = new java.util.HashMap<>();
  [for (operatorReplace: OperatorReplace | action.replacements)]
  replacementMap.put("[operatorReplace.originalOperator /]","[operatorReplace.newOperator /]");
  [/for]
  new InfixOperatorReplace(replacementMap).doAction(target);
}
[/template]

[template public generatesGetTargetBody(action: InjectionAction, container: Element, containerVarname: String) ? (container = action.target)]
return [containerVarname /];
[/template]

[template public generatesGetTargetBody(action: InjectionAction, container: Variable, containerVarname: String) ? (container.getRelationName(action.target) = 'initialValue')]
if ([containerVarname /] instanceof VariableDeclarationFragment) {
  VariableDeclarationFragment varDecl = (VariableDeclarationFragment) [containerVarname /];
  int lastFragment = varDecl.getVariablesContainer().getFragments().size() - 1;
  ASTNode initialValue = varDecl.getVariablesContainer().getFragments().get(lastFragment).getInitializer();
  return initialValue;
}
return null;
[/template]

[template public generatesGetTargetBody(action: InjectionAction, container: VarAssignment, containerVarname: String) ? (container.getRelationName(action.target) = 'assignment')]
if ([containerVarname /] instanceof Assignment) {
  Assignment assignment = (Assignment) [containerVarname /];
  return assignment.getRightHandSide();
}
return null;
[/template]

[template public generatesGetTargetBody(action: DeleteAction, container: VarAssignment, containerVarname: String) ? (container.getRelationName(action.target) = 'assignment')]
if ([containerVarname /] instanceof Assignment) {
  return [containerVarname /];
}
return null;
[/template]
