[comment encoding = UTF-8 /]
[module oclBuilderModule('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::filterUtils /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::rule::context::contextModule /]
[import org::ccsl::gen::ocl::rule::context::postConditionsModule /]
[import org::ccsl::gen::ocl::facades::javaMatchingMetaclassesModule /]
[import org::ccsl::gen::ocl::facades::elementFacadeConditionsBuilder /]


[template private operation(logicOperator: LogicOperator)]
[if logicOperator = LogicOperator::AND]
->intersect[elseif logicOperator = LogicOperator::OR]
->union[/if]
[/template]

[template public writeOCL(rule: Rule)]
let violations: Set(ASTNode) = [rule.writeOCLToSelectElements() /] 
[rule.generatesPostConditionToRemoveJavadocRelatedElements() /] in
violations
[/template]

[template private writeOCLToSelectElements(rule: Rule) /]



[template private writeGetAllInstances(metaclasses: OrderedSet(String))]
[for (metaclassesTarget: String | metaclasses) separator('->union(')]
[metaclassesTarget /].allInstances()[if i <> 1])[/if][/for]
[/template]


[query private getSubjectMetaclass(e: Element): String = 
if e.getMatchingJavaMetaclasses()->size() = 1 then
  e.getMatchingJavaMetaclasses()->first()
else
  'ASTNode'
endif 
/]

[query private isSubjectNeedsTypecheckOnStart(e: Element): Boolean = 
e.isTypecheckAlwaysNeeded()
/]

[template private writeOCLToSelectElements(rule: AtomicRule) post(trim())
  {
    void: OclVoid = rule.clearAllContexts();
    allInstances: String = rule.subject.getMatchingJavaMetaclasses()->writeGetAllInstances();
    subjectMetaclass: String = rule.subject.getSubjectMetaclass();
	subjectVarname: String = rule.subject.getUniqueOclName();
    typecheck: Boolean = rule.subject.isSubjectNeedsTypecheckOnStart();
    subjectConditions: String = rule.subject.writeElementConditions(rule.subject.getUniqueOclName(), typecheck, subjectMetaclass);
    filtersConditions: String = rule._context.filters->writeFiltersConditions();
  }
]
[allInstances /]->select([subjectVarname /]: [subjectMetaclass /] |
[for (condition: String | subjectConditions->asOrderedSet()->including(filtersConditions)->select(s: String | s.isNotEmpty())) separator(' and\n')]
  [condition.writeStr() /]
[/for]
[if rule._context.getTotalElementsDeclaredInExists() > 0]
--Close exists declarations
[rule._context.writeCloseParenthesis() /]
)[else]
)[/if]
[/template]

[template private writeElementConditionWithExists(e: Element)]
[let subjectMetaclass: String = e.getSubjectMetaclass()]
[let typecheck: Boolean = e.isSubjectNeedsTypecheckOnStart()]
[e.getMatchingJavaMetaclasses()->writeGetAllInstances() /]->exists([e.getUniqueOclName() /]: [subjectMetaclass /] | [addElementExistsDeclaration() /]
[e.writeElementConditions(e.getUniqueOclName(), typecheck, subjectMetaclass) /]
[/let][/let]
[/template]

[template private writeOCLToSelectElements(compositeRule: CompositeRule)]
(
[for (subRules: Rule | compositeRule.rules) separator(compositeRule.operator.operation().concat('(\n'))]
[if i = 1]  [subRules.writeOCLToSelectElements() /][else]    [subRules.writeOCLToSelectElements() /])[/if][/for]

)
[/template]
