[comment encoding = UTF-8 /]
[module contextModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::dispatchers::generatesElementConditionsDispatcher /]
[import org::ccsl::gen::ocl::dispatchers::filterConditionsGeneratorDispatcher /]
[import org::ccsl::gen::ocl::dispatchers::getMatchingJavaMetaclassesDispatcher /]

[query private isElementAlwaysNeedTypecheck(e: Element): Boolean = 
  e.oclIsKindOf(VarAssignment)
/]
[template public generatesContextOCLConditionsAllInstances(ctx: Context) post(trim())]
[ctx.generatesAllInstancesOCLExpression() /]->select([ctx.subject.getUniqueOclName() /] |
  [if ctx.subject.getMatchingJavaMetaclasses()->size() = 1]
  [ctx.generatesContextOCLConditions(false, ctx.subject.getMatchingJavaMetaclasses()->first()) /][else]
  [ctx.generatesContextOCLConditions(ctx.subject.isElementAlwaysNeedTypecheck(), 'ASTNode') /][/if]

)
[/template]

[template public generatesContextOCLConditions(ctx: Context, isTypecheckNeeeded: Boolean, metaclass: String) post(trim())]
[let scopeConditions: String = ctx.generatesContextSubjectConditions(isTypecheckNeeeded, metaclass)]
[let filtersConditions: String = ctx.generatesContextFiltersConditions()]
--Context Conditions
[if scopeConditions.isNotEmpty()]
[scopeConditions.printStringWithIdentation() /] [if filtersConditions.isNotEmpty()] and [/if]
[/if][if filtersConditions.isNotEmpty()]
--Filters Conditions
[filtersConditions.printStringWithIdentation() /]
[/if]
[for(Sequence(Integer){1 ..ctx.getTotalElementsDeclaredInExists()})])[/for][/let][/let]
[/template]

[template private generatesAllInstancesOCLExpression(ctx: Context)]
[for (metaclassesTarget: String | ctx.subject.getMatchingJavaMetaclasses()) separator('->union(')]
[metaclassesTarget /].allInstances()[if i <> 1])[/if][/for]
[/template]

[template private generatesContextFiltersConditions(ctx: Context)]
[let filterConditions: Sequence(String) = ctx.filters.generatesFilterConditions()->select(s| s.isNotEmpty())]
[for(cond: String | filterConditions) separator(' and\n')]
[cond.printStringWithIdentation() /][/for][/let]
[/template]

[template private generatesContextSubjectConditions(ctx: Context, isTypecheckNeeded: Boolean, metaclass: String)]
[ctx.subject.generatesConditions(ctx.subject.getUniqueOclName(), isTypecheckNeeded, metaclass) /]
[/template]

