[comment encoding = UTF-8 /]
[module javaMatchingMetaclassesModule('http://www.example.org/ccsl')]


[query public getMatchingJavaMetaclasses(element: Element): OrderedSet(String) =
  element.writeElementMatchingJavaMetaclasses().tokenize(',').trim()->asOrderedSet()
/]

[template private writeElementMatchingJavaMetaclasses(e: Element)]
ASTNode
[/template]

[comment NamedElement package /]
[template private writeElementMatchingJavaMetaclasses(e: NamedElement)]
NamedElement
[/template]

[template private writeElementMatchingJavaMetaclasses(e: Package)]
Package
[/template]

[comment Variable package /]
[template private writeElementMatchingJavaMetaclasses(e: Variable)]
SingleVariableDeclaration,VariableDeclarationFragment
[/template]

[template private writeElementMatchingJavaMetaclasses(e: ParameterVariable)]
SingleVariableDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: InitializableVariable)]
VariableDeclarationFragment
[/template]

[template private writeElementMatchingJavaMetaclasses(e: FieldVariable)]
VariableDeclarationFragment
[/template]

[template private writeElementMatchingJavaMetaclasses(e: LocalVariable)]
VariableDeclarationFragment
[/template]

[comment Method package /]
[template private writeElementMatchingJavaMetaclasses(e: SimpleMethod)]
AbstractMethodDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: Constructor)]
ConstructorDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: Method)]
MethodDeclaration
[/template]
[comment ComplexType package /]
[template private writeElementMatchingJavaMetaclasses(e: TypeDeclaration)]
AbstractTypeDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: ComplexType)]
AbstractTypeDeclaration,AnonymousClassDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: ComplexTypeDeclaration)]
AbstractTypeDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: ConstructComplexTypeDeclaration)]
AbstractTypeDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: JClass)]
ClassDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: JInterface)]
InterfaceDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: JEnum)]
EnumDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: EnumConstant)]
EnumConstantDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: AnnotationType)]
AnnotationTypeDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: AnnotationField)]
AnnotationTypeMemberDeclaration
[/template]

[comment DataType package /]
[template private writeElementMatchingJavaMetaclasses(e: DataType)]
Type
[/template]

[template private writeElementMatchingJavaMetaclasses(e: ObjectType)]
Type
[/template]

[template private writeElementMatchingJavaMetaclasses(e: ArrayType)]
ArrayType
[/template]

[template private writeElementMatchingJavaMetaclasses(e: WildCardType)]
WildCardType
[/template]

[template private writeElementMatchingJavaMetaclasses(e: ParameterizedType)]
ParameterizedType
[/template]

[template private writeElementMatchingJavaMetaclasses(e: TypeParameter)]
TypeParameter
[/template]

[template private writeElementMatchingJavaMetaclasses(e: PrimitiveType)]
PrimitiveType
[/template]

[template private writeElementMatchingJavaMetaclasses(e: BytePrimitiveType)]
PrimitiveTypeByte
[/template]

[template private writeElementMatchingJavaMetaclasses(e: BooleanPrimitiveType)]
PrimitiveTypeBoolean
[/template]

[template private writeElementMatchingJavaMetaclasses(e: CharPrimitiveType)]
PrimitiveTypeChar
[/template]

[template private writeElementMatchingJavaMetaclasses(e: DoublePrimitiveType)]
PrimitiveTypeDouble
[/template]

[template private writeElementMatchingJavaMetaclasses(e: ShortPrimitiveType)]
PrimitiveTypeShort
[/template]

[template private writeElementMatchingJavaMetaclasses(e: FloatPrimitiveType)]
PrimitiveTypeFloat
[/template]

[template private writeElementMatchingJavaMetaclasses(e: LongPrimitiveType)]
PrimitiveTypeLong
[/template]

[template private writeElementMatchingJavaMetaclasses(e: VoidType)]
PrimitiveTypeVoid
[/template]

[template private writeElementMatchingJavaMetaclasses(e: IntPrimitiveType)]
PrimitiveTypeInt
[/template]

[comment Expression package /]
[template private writeElementMatchingJavaMetaclasses(e: Expression)]
Expression
[/template]

[template private writeElementMatchingJavaMetaclasses(e: Annotation)]
Annotation
[/template]

[template private writeElementMatchingJavaMetaclasses(e: InstanceofExpression)]
InstanceofExpression
[/template]

[template private writeElementMatchingJavaMetaclasses(e: CastExpression)]
CastExpression
[/template]

[template private writeElementMatchingJavaMetaclasses(e: TernaryExpression)]
ConditionalExpression
[/template]

[template private writeElementMatchingJavaMetaclasses(e: Invocation)]
AbstractMethodInvocation
[/template]

[template private writeElementMatchingJavaMetaclasses(e: MethodInvocation)]
MethodInvocation,SuperMethodInvocation
[/template]

[template private writeElementMatchingJavaMetaclasses(e: ConstructorInvocation)]
ClassInstanceCreation,ConstructorInvocation,SuperConstructorInvocation
[/template]

[template private writeElementMatchingJavaMetaclasses(e: AnonymousClass)]
AnonymousClassDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: VariableAccess)]
[if e.variable <> null and (e.variable.oclIsKindOf(FieldVariable) or e.variable.oclIsTypeOf(Variable))]
SingleVariableAccess,FieldAccess,SuperFieldAccess[else]SingleVariableAccess[/if]
[/template]

[template public writeElementMatchingJavaMetaclasses(e: LiteralValue)]
BooleanLiteral,CharacterLiteral,NumberLiteral,NullLiteral,StringLiteral
[/template]

[template public writeElementMatchingJavaMetaclasses(e: BooleanLiteral)]
BooleanLiteral
[/template]

[template public writeElementMatchingJavaMetaclasses(e: CharacterLiteral)]
CharacterLiteral
[/template]

[template public writeElementMatchingJavaMetaclasses(e: NumberLiteral)]
NumberLiteral
[/template]

[template public writeElementMatchingJavaMetaclasses(e: NullLiteral)]
NullLiteral
[/template]

[template public writeElementMatchingJavaMetaclasses(e: StringLiteral)]
StringLiteral
[/template]

[template public writeElementMatchingJavaMetaclasses(e: SimpleAssignment)]
Assignment,PrefixExpression,PostfixExpression
[/template]

[template public writeElementMatchingJavaMetaclasses(e: ArrayInitializer)]
ArrayInitializer
[/template]

[template private writeElementMatchingJavaMetaclasses(e: UnaryAssignment)]
[if e.kind = UnaryAssignmentKind::PRE]
PrefixExpression[elseif e.kind = UnaryAssignmentKind::POST]
PostfixExpression[else]
PrefixExpression,PostfixExpression[/if]
[/template]

[template public writeElementMatchingJavaMetaclasses(e: Assignment)]
Assignment
[/template]

[template public writeElementMatchingJavaMetaclasses(e: ArrayCreation)]
ArrayCreation
[/template]

[template public writeElementMatchingJavaMetaclasses(e: VarDeclaration)]
VariableDeclarationFragment
[/template]

[template public writeElementMatchingJavaMetaclasses(e: ArrayIndexesAccess)]
ArrayAccess
[/template]

[template public writeElementMatchingJavaMetaclasses(e: DataTypeAccess)]
TypeAccess
[/template]


[template public writeElementMatchingJavaMetaclasses(e: OperandExpression)]
[if e.kind = ExpressionKind::UNARY]
PrefixExpression[elseif e.kind = ExpressionKind::INFIX]
InfixExpression[else]
PrefixExpression,InfixExpression[/if]
[/template]

[comment Statement package /]
[template private writeElementMatchingJavaMetaclasses(e: ImportStatement)]
ImportDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(e: AssertStatement)]
AssertStatement
[/template]

[template private writeElementMatchingJavaMetaclasses(e: BreakStatement)]
BreakStatement
[/template]

[template private writeElementMatchingJavaMetaclasses(e: ContinueStatement)]
ContinueStatement
[/template]

[template private writeElementMatchingJavaMetaclasses(e: ReturnStatement)]
ReturnStatement
[/template]

[template private writeElementMatchingJavaMetaclasses(e: EmptyStatement)]
EmptyStatement
[/template]

[template private writeElementMatchingJavaMetaclasses(e: ImportableElement)]
NamedElement
[/template]

[template private writeElementMatchingJavaMetaclasses(e: CatchClause)]
CatchClause
[/template]

[template private writeElementMatchingJavaMetaclasses(e: Block)]
Block
[/template]