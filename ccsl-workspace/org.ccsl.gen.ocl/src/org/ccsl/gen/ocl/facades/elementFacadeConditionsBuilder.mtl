[comment encoding = UTF-8 /]
[module elementFacadeConditionsBuilder('http://www.example.org/ccsl')]


[comment Utils modules /]
[import org::ccsl::gen::ocl::commom::stringUtils/]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::elementUtils /]

[comment Element package /]
[import org::ccsl::gen::ocl::element::annotableElementConditionsBuilder /]
[import org::ccsl::gen::ocl::element::controlledAccessElementConditionsBuilder /]

[comment Datatype package /]
[import org::ccsl::gen::ocl::element::datatype::dataTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::objectTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::arrayTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::wildCardTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::parameterizedTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::typeParameterConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::primitiveTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::booleanPrimitiveTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::bytePrimitiveTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::charPrimitiveTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::doublePrimitiveTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::floatPrimitiveTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::intPrimitiveTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::longPrimitiveTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::shortPrimitiveTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::datatype::voidPrimitiveTypeConditionsBuilder /]

[comment NamedElement package /]
[import org::ccsl::gen::ocl::element::namedElement::namedElementConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::packageConditionsBuilder /]

[comment Variable package /]
[import org::ccsl::gen::ocl::element::namedElement::variable::variableConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::variable::parameterVariableConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::variable::initializableVariableConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::variable::fieldVariableConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::variable::localVariableConditionsBuilder /]

[comment Method package /]
[import org::ccsl::gen::ocl::element::namedElement::method::simpleMethodConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::method::constructorConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::method::methodConditionsBuilder /]

[comment ComplexType package /]
[import org::ccsl::gen::ocl::element::namedElement::complexType::typeDeclarationConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::complexType::annotationTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::complexType::annotationFieldConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::complexType::complexTypeConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::complexType::complexTypeDeclarationConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::complexType::constructComplexTypeDeclarationConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::complexType::jClassConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::complexType::jInterfaceConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::complexType::enumConstantConditionsBuilder /]
[import org::ccsl::gen::ocl::element::namedElement::complexType::jEnumConditionsBuilder /]

[comment Expression package /]
[import org::ccsl::gen::ocl::element::expression::expressionConditionsBuilder /]
[import org::ccsl::gen::ocl::element::expression::annotationConditionsBuilder /]
[import org::ccsl::gen::ocl::element::expression::instanceofConditionsBuilder /]
[import org::ccsl::gen::ocl::element::expression::castExpressionConditionsBuilder /]
[import org::ccsl::gen::ocl::element::expression::ternaryExpressionConditionsBuilder /]
[import org::ccsl::gen::ocl::element::expression::invocationConditionsBuilder /]
[import org::ccsl::gen::ocl::element::expression::methodInvocationConditionsBuilder /]
[import org::ccsl::gen::ocl::element::expression::constructorInvocationConditionsBuilder /]

[comment Statement package /]
[import org::ccsl::gen::ocl::element::statement::importStatementConditionsBuilder /]

[template private writeConditions(conditions: OrderedSet(String))]
[let conditionsNotBlank: OrderedSet(String) =  conditions->select(s | s.isNotEmpty())]
[if conditionsNotBlank->size() > 0]
[for (condition: String | conditionsNotBlank) separator(' and\n')]
[condition.writeStr() /][/for][else]
true[/if][/let]
[/template]


[comment This query mark the element as visited and returns a Tuple(String_1, String_2) where
String_1 is the OCL expression that should be used to reference the element
String_2 is the metaclass that represents the element.
e.g.: element = IfStatement, varname = 'ifStmt' and metaclass = 'ASTNode'
output: element is marked as visited, String_1 = ifStmt.oclAsType(IfStatement), String_2 = IfStatement
e.g.: element = IfStatement, varname = 'ifStmt' and metaclass = 'IfStatement'
output: element is marked as visited, String_1 = ifStmt, String_2 = IfStatement
/]
[query private visitElement(element: Element, varname: String, metaclass: String): OrderedSet(String) = 
let void: OclVoid = element.addElementAsVisited(metaclass) in
let completeVarname: String = element.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = element.getConcreteElementMetaclass(metaclass) in
OrderedSet(String){completeVarname, concreteMetaclass}
/]

[comment write @Element conditions/]
[query private getElementConditions(element: Element, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
OrderedSet(String){}
/]
[template public writeElementConditions(e: Element, varname: String, typecheck: Boolean, metaclass: String)]

[/template]

[comment write @Element conditions/]
[query private getAnnotableConditions(annotable: Annotable, varname: String, metaclass: String): OrderedSet(String) =
OrderedSet(String){
  annotable.writeAnnotationsCondition(varname, metaclass)
}
/]

[query private getVisibilityConditions(element: ControlledAccessElement, varname: String, metaclass: String): OrderedSet(String) =
OrderedSet(String){
  element.writeVisibilityCondition(varname)
}
/]

[comment DataType Package /]

[comment Write @DataType conditions /]
[query private getDataTypeConditions(dataType: DataType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = dataType.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  dataType.writeDatatypeTypecheckCondition(varname, typecheck)
 }->addAll(dataType.getElementConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: DataType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getDataTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @WildCardType conditions /]
[query private getWildCardTypeConditions(type: WildCardType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeWildCardTypeTypecheckCondition(varname, typecheck),
  type.writeBoundCondition(completeVarname)
 }->addAll(type.getDataTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: WildCardType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getWildCardTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @TypeParameter conditions /]
[query private getTypeParameterConditions(type: TypeParameter, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeTypeParameterTypecheckCondition(varname, typecheck),
  type.writeBoundsCondition(completeVarname)
 }->addAll(type.getDataTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: TypeParameter, varname: String, typecheck: Boolean, metaclass: String)]
[e.getTypeParameterConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @ParameterizedType conditions /]
[query private getParameterizedTypeConditions(type: ParameterizedType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeParameterizedTypeTypecheckCondition(varname, typecheck),
  type.writeTypeParametersConditions(completeVarname),
  type.writeTypeConditions(completeVarname)
 }->addAll(type.getDataTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: ParameterizedType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getParameterizedTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @ObjectType conditions /]
[query private getObjectTypeConditions(type: ObjectType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeObjectTypeTypecheckCondition(varname, typecheck)
 }->addAll(type.getDataTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: ObjectType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getObjectTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @ArrayType conditions /]
[query private getArrayTypeConditions(type: ArrayType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeArrayTypeTypecheckCondition(varname, typecheck),
  type.writeDimensionsCondition(completeVarname),
  type.writeTypeCondition(completeVarname)
 }->addAll(type.getObjectTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: ArrayType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getArrayTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @PrimitiveType conditions /]
[query private getPrimitiveTypeConditions(type: PrimitiveType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writePrimitiveTypeTypecheckCondition(varname, typecheck)
 }->addAll(type.getDataTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: PrimitiveType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getPrimitiveTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @BooleanPrimitiveType conditions /]
[query private getBooleanPrimitiveTypeConditions(type: BooleanPrimitiveType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeBooleanPrimitiveTypeTypecheckCondition(varname, typecheck)
 }->addAll(type.getPrimitiveTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: BooleanPrimitiveType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getBooleanPrimitiveTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @BytePrimitiveType conditions /]
[query private getBytePrimitiveTypeConditions(type: BytePrimitiveType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeBytePrimitiveTypeTypecheckCondition(varname, typecheck)
 }->addAll(type.getPrimitiveTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: BytePrimitiveType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getBytePrimitiveTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @BytePrimitiveType conditions /]
[query private getCharPrimitiveTypeConditions(type: CharPrimitiveType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeCharPrimitiveTypeTypecheckCondition(varname, typecheck)
 }->addAll(type.getPrimitiveTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: CharPrimitiveType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getCharPrimitiveTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @DoublePrimitiveType conditions /]
[query private getDoublePrimitiveTypeConditions(type: DoublePrimitiveType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeDoublePrimitiveTypeTypecheckCondition(varname, typecheck)
 }->addAll(type.getPrimitiveTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: DoublePrimitiveType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getDoublePrimitiveTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @BytePrimitiveType conditions /]
[query private getShortPrimitiveTypeConditions(type: ShortPrimitiveType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeShortPrimitiveTypeTypecheckCondition(varname, typecheck)
 }->addAll(type.getPrimitiveTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: ShortPrimitiveType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getShortPrimitiveTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @BytePrimitiveType conditions /]
[query private getFloatPrimitiveTypeConditions(type: FloatPrimitiveType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeFloatPrimitiveTypeTypecheckCondition(varname, typecheck)
 }->addAll(type.getPrimitiveTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: FloatPrimitiveType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getFloatPrimitiveTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @LongPrimitiveType conditions /]
[query private getLongPrimitiveTypeConditions(type: LongPrimitiveType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeLongPrimitiveTypeTypecheckCondition(varname, typecheck)
 }->addAll(type.getPrimitiveTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: LongPrimitiveType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getLongPrimitiveTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @VoidPrimitiveType conditions /]
[query private getVoidPrimitiveTypeConditions(type: VoidType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeVoidPrimitiveTypeTypecheckCondition(varname, typecheck)
 }->addAll(type.getPrimitiveTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: VoidType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getVoidPrimitiveTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @IntPrimitiveType conditions /]
[query private getIntPrimitiveTypeConditions(type: IntPrimitiveType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeIntPrimitiveTypeTypecheckCondition(varname, typecheck)
 }->addAll(type.getPrimitiveTypeConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: IntPrimitiveType, varname: String, typecheck: Boolean, metaclass: String)]
[e.getIntPrimitiveTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]
[comment NamedElement Package /]

[comment Write @NamedElement conditions /]
[query private getNamedElementConditions(namedElement: NamedElement, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = namedElement.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  namedElement.writeNamedElementTypecheckCondition(varname, typecheck),
  namedElement.writeNameCondition(completeVarname, concreteMetaclass)
}->addAll(namedElement.getElementConditions(completeVarname, false, concreteMetaclass))
->addAll(namedElement.getAnnotableConditions(completeVarname, concreteMetaclass))
/]

[comment Write @Package conditions /]
[query private getPackageConditions(pack: Package, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = pack.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  pack.writePackageTypecheckCondition(varname, typecheck),
  pack.writeDeclaredTypesCondition(completeVarname)
}->addAll(pack.getNamedElementConditions(varname, false, concreteMetaclass))
/]
[template public writeElementConditions(pack: Package, varname: String, typecheck: Boolean, metaclass: String)]
[pack.getPackageConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Variable Package /]
[comment Write @Variable conditions /]
[query private getVariableConditions(var: Variable, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = var.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  var.writeVariableTypecheckCondition(varname, typecheck),
  var.writeTypeCondition(completeVarname, concreteMetaclass),
  var.writeFinalCondition(completeVarname, concreteMetaclass)
}->addAll(var.getNamedElementConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(var: Variable, varname: String, typecheck: Boolean, metaclass: String)]
[var.getVariableConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @ParameterVariable conditions /]
[query private getParameterVariableConditions(var: ParameterVariable, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = var.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  var.writeParameterVariableTypecheckCondition(varname, typecheck)
}->addAll(var.getVariableConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(var: ParameterVariable, varname: String, typecheck: Boolean, metaclass: String)]
[var.getParameterVariableConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @InitializableVariable conditions /]
[query private getInitializableVariableConditions(var: InitializableVariable, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = var.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  var.writeInitializableVariableTypecheckCondition(varname, typecheck),
  var.writeInitialValueCondition(completeVarname, concreteMetaclass)
}->addAll(var.getVariableConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(var: InitializableVariable, varname: String, typecheck: Boolean, metaclass: String)]
[var.getInitializableVariableConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @FieldVariable conditions /]
[query private getFieldVariableConditions(var: FieldVariable, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = var.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  var.writeFieldVariableTypecheckCondition(varname, typecheck),
  var.writeStaticCondition(completeVarname)
}->addAll(var.getInitializableVariableConditions(completeVarname, false, concreteMetaclass))
->addAll(var.getVisibilityConditions(completeVarname, concreteMetaclass))
/]
[template public writeElementConditions(var: FieldVariable, varname: String, typecheck: Boolean, metaclass: String)]
[var.getFieldVariableConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @LocalVariable conditions /]
[query private getLocalVariableConditions(var: LocalVariable, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = var.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  var.writeLocalVariableTypecheckCondition(varname, typecheck)
}->addAll(var.getInitializableVariableConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(var: LocalVariable, varname: String, typecheck: Boolean, metaclass: String)]
[var.getLocalVariableConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Method package /]
[comment Write @SimpleMethod conditions /]
[query private getSimpleMethodConditions(method: SimpleMethod, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = method.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  method.writeSimpleMethodTypecheckCondition(varname, typecheck),
  method.writeParamsCondition(completeVarname)
}->addAll(method.getElementConditions(completeVarname, false, concreteMetaclass))
->addAll(method.getAnnotableConditions(completeVarname, concreteMetaclass))
->addAll(method.getVisibilityConditions(completeVarname, concreteMetaclass))
/]
[template public writeElementConditions(method: SimpleMethod, varname: String, typecheck: Boolean, metaclass: String)]
[method.getSimpleMethodConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @Constructor conditions /]
[query private getConstructorConditions(method: Constructor, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = method.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  method.writeConstructorTypecheckCondition(varname, typecheck)
}->addAll(method.getSimpleMethodConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(method: Constructor, varname: String, typecheck: Boolean, metaclass: String)]
[method.getConstructorConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @Method conditions /]
[query private getMethodConditions(method: Method, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = method.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  method.writeMethodTypecheckCondition(varname, typecheck),
  method.writeReturnTypeCondition(completeVarname),
  method.writeInheritanceCondition(completeVarname),
  method.writeStaticCondition(completeVarname)
}
->addAll(method.getSimpleMethodConditions(completeVarname, false, concreteMetaclass))
->addAll(method.getNamedElementConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(method: Method, varname: String, typecheck: Boolean, metaclass: String)]
[method.getMethodConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]


[comment ComplexType package /]
[comment Write @TypeDeclaration conditions /]
[query private getTypeDeclarationConditions(type: TypeDeclaration, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeTypeDeclarationTypecheckCondition(varname, typecheck),
  type.writeImportsCondition(completeVarname),
  type.writeNestedTypeConditions(completeVarname),
  type.writeStaticCondition(completeVarname),
  type.writeInheritanceCondition(completeVarname)
}->addAll(type.getNamedElementConditions(completeVarname, false, concreteMetaclass))
->addAll(type.getDataTypeConditions(completeVarname, false, concreteMetaclass))
->addAll(type.getVisibilityConditions(completeVarname, concreteMetaclass))
/]
[template public writeElementConditions(type: TypeDeclaration, varname: String, typecheck: Boolean, metaclass: String)]
[type.getTypeDeclarationConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @AnnotationType conditions /]
[query private getAnnotationTypeConditions(type: AnnotationType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeAnnotationTypeTypecheckCondition(varname, typecheck),
  type.writeFieldsCondition(completeVarname)
}->addAll(type.getTypeDeclarationConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(type: AnnotationType, varname: String, typecheck: Boolean, metaclass: String)]
[type.getAnnotationTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @AnnotationField conditions /]
[query private getAnnotationFieldConditions(field: AnnotationField, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = field.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  field.writeAnnotationFieldTypecheckCondition(varname, typecheck),
  field.writeDefaultCondition(completeVarname),
  field.writeTypeCondition(completeVarname)
}->addAll(field.getNamedElementConditions(completeVarname, false, concreteMetaclass))
->addAll(field.getAnnotableConditions(completeVarname, concreteMetaclass))
/]
[template public writeElementConditions(field: AnnotationField, varname: String, typecheck: Boolean, metaclass: String)]
[field.getAnnotationFieldConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @ComplexType conditions /]
[query private getComplexTypeConditions(type: ComplexType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeComplexTypeTypecheckCondition(varname, typecheck),
  type.writeFieldsCondition(completeVarname),
  type.writeMethodsCondition(completeVarname)
}->addAll(type.getElementConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(type: ComplexType, varname: String, typecheck: Boolean, metaclass: String)]
[type.getComplexTypeConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @ComplexTypeDeclaration conditions /]
[query private getComplexTypeDeclarationConditions(type: ComplexTypeDeclaration, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeComplexTypeDeclarationTypecheckCondition(varname, typecheck),
  type.writeSuperInterfacesCondition(completeVarname)
}->addAll(type.getComplexTypeConditions(completeVarname, false, concreteMetaclass))
->addAll(type.getTypeDeclarationConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(type: ComplexTypeDeclaration, varname: String, typecheck: Boolean, metaclass: String)]
[type.getComplexTypeDeclarationConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @ConstructComplexTypeDeclaration conditions /]
[query private getConstructComplexTypeDeclarationConditions(type: ConstructComplexTypeDeclaration, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = type.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  type.writeConstructComplexTypeDeclarationTypecheckCondition(varname, typecheck),
  type.writeConstructorsCondition(completeVarname)
}->addAll(type.getComplexTypeDeclarationConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(type: ConstructComplexTypeDeclaration, varname: String, typecheck: Boolean, metaclass: String)]
[type.getConstructComplexTypeDeclarationConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @JClass conditions /]
[query private getJClassConditions(clazz: JClass, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = clazz.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  clazz.writeJClassTypecheckCondition(varname, typecheck),
  clazz.writeSuperclassCondition(completeVarname)
}->addAll(clazz.getConstructComplexTypeDeclarationConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(clazz: JClass, varname: String, typecheck: Boolean, metaclass: String)]
[clazz.getJClassConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @JInterface conditions /]
[query private getJInterfaceConditions(interface: JInterface, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = interface.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  interface.writeJInterfaceTypecheckCondition(varname, typecheck)
}->addAll(interface.getComplexTypeDeclarationConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(interface: JInterface, varname: String, typecheck: Boolean, metaclass: String)]
[interface.getJInterfaceConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @JEnum conditions /]
[query private getJEnumConditions(enum: JEnum, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = enum.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  enum.writeJEnumTypecheckCondition(varname, typecheck),
  enum.writeConstantsCondition(completeVarname)
}->addAll(enum.getConstructComplexTypeDeclarationConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(enum: JEnum, varname: String, typecheck: Boolean, metaclass: String)]
[enum.getJEnumConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @EnumConstant conditions /]
[query private getEnumConstantConditions(enumConstant: EnumConstant, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = enumConstant.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  enumConstant.writeEnumConstantTypecheckCondition(varname, typecheck),
  enumConstant.writeArgumentsCondition(completeVarname)
}->addAll(enumConstant.getNamedElementConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(enumConstant: EnumConstant, varname: String, typecheck: Boolean, metaclass: String)]
[enumConstant.getEnumConstantConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]
[comment Expression Package /]

[comment write @Expression conditions/]
[query private getExpressionConditions(exp: Expression, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
OrderedSet(String){
  exp.writeExpressionTypecheckCondition(varname, typecheck)
}->addAll(exp.getElementConditions(varname, false, metaclass))
/]
[template public writeElementConditions(e: Expression, varname: String, typecheck: Boolean, metaclass: String)]
[e.getExpressionConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @Annotation conditions /]
[query private getAnnotationConditions(annotation: Annotation, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = annotation.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  annotation.writeAnnotationTypecheckCondition(varname, typecheck)
 }->addAll(annotation.getExpressionConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: Annotation, varname: String, typecheck: Boolean, metaclass: String)]
[e.getAnnotationConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]


[comment Write @InstanceofExpression conditions /]
[query private getInstanceofExpressionConditions(instanceof: InstanceofExpression, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = instanceof.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  instanceof.writeInstanceofExpressionTypecheckCondition(varname, typecheck),
  instanceof.writeObjectExpressionCondition(completeVarname),
  instanceof.writeTypeCondition(completeVarname)
 }->addAll(instanceof.getExpressionConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: InstanceofExpression, varname: String, typecheck: Boolean, metaclass: String)]
[e.getInstanceofExpressionConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @CastExpression conditions /]
[query private getCastExpressionConditions(cast: CastExpression, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = cast.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  cast.writeCastExpressionTypecheckCondition(varname, typecheck),
  cast.writeExpressionCondition(completeVarname),
  cast.writeTypeCondition(completeVarname)
 }->addAll(cast.getExpressionConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: CastExpression, varname: String, typecheck: Boolean, metaclass: String)]
[e.getCastExpressionConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @TernaryExpression conditions /]
[query private getTernaryExpressionConditions(ternary: TernaryExpression, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = ternary.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  ternary.writeTernaryExpressionTypecheckCondition(varname, typecheck),
  ternary.writeThenExpressionCondition(completeVarname),
  ternary.writeElseExpressionCondition(completeVarname),
  ternary.writeConditionCondition(completeVarname)
 }->addAll(ternary.getExpressionConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: TernaryExpression, varname: String, typecheck: Boolean, metaclass: String)]
[e.getTernaryExpressionConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @Invocation conditions /]
[query private getInvocationConditions(invocation: Invocation, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = invocation.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  invocation.writeInvocationTypecheckCondition(varname, typecheck),
  invocation.writeArgsCondition(completeVarname),
  invocation.writeTypeArgsCondition(completeVarname),
  invocation.writeMethodCondition(completeVarname)
 }->addAll(invocation.getExpressionConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: Invocation, varname: String, typecheck: Boolean, metaclass: String)]
[e.getInvocationConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @MethodInvocation conditions /]
[query private getMethodInvocationConditions(invocation: MethodInvocation, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = invocation.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  invocation.writeMethodInvocationTypecheckCondition(varname, typecheck),
  invocation.writeFromCondition(completeVarname)
 }->addAll(invocation.getInvocationConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: MethodInvocation, varname: String, typecheck: Boolean, metaclass: String)]
[e.getMethodInvocationConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @ConstructorInvocation conditions /]
[query private getConstructorInvocationConditions(invocation: ConstructorInvocation, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = invocation.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  invocation.writeConstructorInvocationTypecheckCondition(varname, typecheck)
 }->addAll(invocation.getInvocationConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: ConstructorInvocation, varname: String, typecheck: Boolean, metaclass: String)]
[e.getConstructorInvocationConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Statement package /]

[comment Write @Statement conditions /]
[query private getStatementConditions(stmt: Statement, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
  stmt.getElementConditions(varname, typecheck, metaclass)
/]
[template public writeElementConditions(e: Statement, varname: String, typecheck: Boolean, metaclass: String)]
[e.getStatementConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]

[comment Write @ImportStatement conditions /]
[query private getImportStatementConditions(importStmt: ImportStatement, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let tuple: OrderedSet(String) = importStmt.visitElement(varname, metaclass) in
let completeVarname: String = tuple->at(1) in
let concreteMetaclass: String = tuple->at(2) in
OrderedSet(String){
  importStmt.writeImportStatementTypecheckCondition(varname, typecheck)
 }->addAll(importStmt.getStatementConditions(completeVarname, false, concreteMetaclass))
/]
[template public writeElementConditions(e: ImportStatement, varname: String, typecheck: Boolean, metaclass: String)]
[e.getImportStatementConditions(varname, typecheck, metaclass)->writeConditions() /]
[/template]
