[comment encoding = UTF-8 /]
[module elementConditionsBuilder('http://www.example.org/ccsl')]


[comment Utils modules /]
[import org::ccsl::gen::ocl::commom::stringUtils/]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::elementUtils /]


[comment Variable package /]
[import org::ccsl::gen::ocl::element::namedElement::variable::variableModule /]


[template private writeAllConditions(conditions: OrderedSet(String))]
[let conditionsNotBlank: OrderedSet(String) =  conditions->select(s | s.isNotEmpty())]
[if conditionsNotBlank->size() > 0]
[for (condition: String | conditionsNotBlank) separator(' and\n')]
[condition.writeStr() /][/for][else]
true[/if][/let]
[/template]


[comment This query mark the element as visited and returns a Tuple(String_1, String_2) where
String_1 is the OCL expression that should be used to reference the element
String_2 is the metaclass that represents the element.
e.g.: element = IfStatement, varname = 'ifStmt' and metaclass = 'ASTNode'
output: element is marked as visited, String_1 = ifStmt.oclAsType(IfStatement), String_2 = IfStatement
e.g.: element = IfStatement, varname = 'ifStmt' and metaclass = 'IfStatement'
output: element is marked as visited, String_1 = ifStmt, String_2 = IfStatement
/]
[query private visitElement(element: Element, varname: String, metaclass: String): OrderedSet(String) = 
let void: OclVoid = element.addElementAsVisited(metaclass) in
let completeVarname: String = element.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = element.getConcreteElementMetaclass(metaclass) in
OrderedSet(String){completeVarname, concreteMetaclass}
/]

[comment TODO: Review Element /]
[query private getElementConditions(element: Element, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
OrderedSet(String){}
/]

[comment TODO: Review Element /]
[query private getNamedElementConditions(element: Element, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
OrderedSet(String){}
/]

[comment TODO: Review Element /]
[query private getVariableConditions(element: Element, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
OrderedSet(String){}
/]

[template public writeElementConditions(element: Element, varname: String, typecheck: Boolean, metaclass: String)]

[/template]
