[comment encoding = UTF-8 /]
[module filterConditionsGeneratorDispatcher('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::filters::templateFilterOperations /]
[import org::ccsl::gen::ocl::filters::regexFilterOperations /]

[comment filters related to closure /]
[comment complex type closure filters /]


[template private oclOperator(op: LogicOperator)]
[if op = LogicOperator::AND] and [elseif(op = LogicOperator::OR)] or [else] implies [/if]
[/template]


[template public generatesFilterConditions(filter : Filter) /]

[template public generatesFilterConditions(compositeFilter : CompositeFilter) ? (not compositeFilter.negated)]
(
  -- Composite Filter ([compositeFilter.operator /])
[for(f: Filter | compositeFilter.filters) separator(compositeFilter.operator.oclOperator().concat('\n'))]
  (
    [f.generatesFilterConditions() /]
  )[/for]

  -- End Composite Filter ([compositeFilter.operator /])
) 
[/template]

[template public generatesFilterConditions(compositeFilter : CompositeFilter) ? (compositeFilter.negated)]
(
  -- Composite Filter ([compositeFilter.operator /])
  not (
[for(f: Filter | compositeFilter.filters) separator(compositeFilter.operator.oclOperator().concat('\n'))]
    (
      [f.generatesFilterConditions() /]
    )[/for]
  
  )
  -- End Composite Filter ([compositeFilter.operator /])
)
[/template]

[template public generatesFilterConditions(atomicFilter : AtomicFilter) ? (atomicFilter.negated)]
not (
[for(target: Element | atomicFilter.targets) separator(' and\n')]
  [atomicFilter.generatesSpecificFilterConditions(target) /][/for]

)
[/template]

[template public generatesFilterConditions(atomicFilter : AtomicFilter) ? (not atomicFilter.negated)]
[for(target: Element | atomicFilter.targets) separator(' and\n')]
[atomicFilter.generatesSpecificFilterConditions(target) /][/for]
[/template]

[comment dispatchers /]
[template public generatesSpecificFilterConditions(templFilter: Filter, target: Element) /]

[template public generatesSpecificFilterConditions(templFilter: TemplateFilter, target: Element)]
[templFilter.writeTemplateFilterCondition(target) /]
[/template]

[template public generatesSpecificFilterConditions(regexFilter: RegexMatch, target: Element)]
[regexFilter.generatesRegexFilterConditions(target) /]
[/template]