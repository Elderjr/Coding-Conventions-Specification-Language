[comment encoding = UTF-8 /]
[module implicityOperandFilterModule('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::filterUtils /]
[import org::ccsl::gen::ocl::element::statement::expression::operatorExpressionOperations /]
[import org::ccsl::gen::ocl::dispatchers::generalElementWritterConditionsModule /]
[import org::ccsl::gen::ocl::filters::templateFilterOperations /]

[template public writeImplicityOperandFilterCondition(f: ImplicityOperandFilter, target: Element) /]

[template public writeImplicityOperandFilterCondition(f: ImplicityOperandFilter, target: OperatorExpression) ? (f.operatorExpression = target or f.operatorExpression = null)]
[f.writeImplicityOperandSet(target) /]
[f.writeImplicityOperandCondition() /]
[/template]

[template public writeImplicityOperandFilterCondition(f: ImplicityOperandFilter, target: OperatorExpression) ? (f.operatorExpression <> target and f.operatorExpression <> null)]
[f.writeTemplateElementCondition(target, f.operatorExpression) /] and
[f.writeImplicityOperandSet(target) /]
[f.writeImplicityOperandCondition() /]
[/template]

[template private writeImplicityOperandSet(f: ImplicityOperandFilter, operatorExpression: OperatorExpression)]
let operands: OrderedSet(ASTNode) = [operatorExpression.writeGetOperands(operatorExpression.getUniqueOclName(), operatorExpression.getDeclaredElementMetaclass()) /] in
let implicityOperandSet: OrderedSet(ASTNode) = operands->closure(n: ASTNode |
  if n.oclIsKindOf(InfixExpression) then
    n.oclAsType(InfixExpression).extendedOperands->append(n.oclAsType(InfixExpression).leftOperand)->append(n.oclAsType(InfixExpression).rightOperand)
  elseif n.oclIsKindOf(PrefixExpression) then
    n.oclAsType(PrefixExpression).operand
  elseif n.oclIsKindOf(ParenthesizedExpression) then
    n.oclAsType(ParenthesizedExpression).expression
  else
    n
  endif
)->excluding([operatorExpression.getUniqueOclName() /]) in
[/template]

[template private writeImplicityOperandCondition(f: ImplicityOperandFilter)]
implicityOperandSet->exists([f.implicityOperand.getUniqueOclName() /]: ASTNode |
  [f.implicityOperand.writeElementConditions(f.implicityOperand.getUniqueOclName(), true, 'ASTNode') /]
)
[/template]
