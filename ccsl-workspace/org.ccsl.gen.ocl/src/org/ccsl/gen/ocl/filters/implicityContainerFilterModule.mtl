[comment encoding = UTF-8 /]
[module implicityContainerFilterModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::dispatchers::generatesElementConditionsDispatcher /]

[query private isIntegerSetted(x: Integer): Boolean = 
  (not x.oclIsUndefined()) and x <> -1
/]

[template private writeImplicityContainerSet(implicityContainerFilter: ImplicityContainer, targetTemplate: Element)]
let implicityContainerSet: OrderedSet(ASTNode) = [targetTemplate.getUniqueOclName() /]->asOrderedSet()->closure(node: ASTNode |
  let container: OclAny = node.oclContainer() in  
  if container <> null and container.oclIsKindOf(ASTNode) then
    container
  else
    null
  endif
) in
[/template]

[template private generatesRelationCondition(implicityContainerFilter: ImplicityContainer, container: Element, field: Element, oclSetName: String) /]

[template private generatesRelationCondition(implicityContainerFilter: ImplicityContainer, container: IfStatement, field: Element,  setOclVarname: String) ? (container.getRelationName(field) = 'condition')]
[setOclVarname /]->includes([container.getUniqueOclName() /].oclAsType(IfStatement).expression)
[/template]

[template private generatesRelationCondition(implicityContainerFilter: ImplicityContainer, container: MethodInvocation, field: Element,  setOclVarname: String) ? (container.getRelationName(field) = 'args')]
[setOclVarname /]->intersection([container.getUniqueOclName() /].oclAsType(MethodInvocation).arguments)->size() > 0
[/template]

[template private generatesRelationCondition(implicityContainerFilter: ImplicityContainer, container: InfixExpression, field: Element,  setOclVarname: String) ? (container.getRelationName(field) = 'operands')]
[let containerOCLVarname: String = container.getUniqueOclName().concat('.oclAsType(InfixExpression)')]
[setOclVarname /]->intersection([containerOCLVarname /].extendedOperands->append([containerOCLVarname /].leftOperand)->append([containerOCLVarname /].rightOperand))->size() > 0[/let]
[/template]