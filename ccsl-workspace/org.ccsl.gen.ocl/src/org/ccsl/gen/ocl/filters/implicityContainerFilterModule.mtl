[comment encoding = UTF-8 /]
[module implicityContainerFilterModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::filterUtils /]
[import org::ccsl::gen::ocl::dispatchers::generalElementWritterConditionsModule /]
[import org::ccsl::gen::ocl::filters::templateFilterOperations /]


[template public writeImplicityContainerFilter(f: ImplicityContainerFilter, target: Element) ? (f.implicityContainer = target or f.implicityContainer = null)]
[f.writeImplicityContainerSet() /]
implicityContainerSet->exists([f.implicityContainer.getUniqueOclName() /]: ASTNode |
  [f.implicityContainer.writeElementConditions(f.implicityContainer.getUniqueOclName(), true, 'ASTNode') /]
)
[/template]

[template public writeImplicityContainerFilter(f: ImplicityContainerFilter, target: Element) ? (f.implicityContainer <> target and f.implicityContainer <> null)]
[f.writeTemplateElementCondition(target, f.implicityContainer) /] and
[f.writeImplicityContainerSet() /]
implicityContainerSet->exists([f.implicityContainer.getUniqueOclName() /]: ASTNode |
  [f.implicityContainer.writeElementConditions(f.implicityContainer.getUniqueOclName(), true, 'ASTNode') /] [if f.implicityContainer.getRelationName(f.implicityField) <> null]
  and
  [f.writeRelationCondition(f.implicityContainer, f.implicityField) /]
[/if]
)
[/template]

[template private writeImplicityContainerSet(filter: ImplicityContainerFilter)]
let implicityContainerSet: OrderedSet(ASTNode) = [filter.implicityField.getUniqueOclName() /]->asOrderedSet()->closure(node: ASTNode |
  let container: OclAny = node.oclContainer() in  
  if container <> null and container.oclIsKindOf(ASTNode) then
    container
  else
    null
  endif
) in
[/template]

[template private writeRelationCondition(implicityContainerFilter: ImplicityContainerFilter, container: Element, field: Element) /]

[template private writeRelationCondition(f: ImplicityContainerFilter, container: IfStatement, field: Element) ? (container.getRelationName(field) = 'condition')]
implicityContainerSet->includes([container.getUniqueOclName() /].oclAsType(IfStatement).expression)
[/template]

[template private writeRelationCondition(implicityContainerFilter: ImplicityContainerFilter, container: MethodInvocation, field: Element) ? (container.getRelationName(field) = 'args')]
implicityContainerSet->intersection([container.getUniqueOclName() /].oclAsType(MethodInvocation).arguments)->size() > 0
[/template]

[template private writeRelationCondition(implicityContainerFilter: ImplicityContainerFilter, container: InfixExpression, field: Element) ? (container.getRelationName(field) = 'operands')]
[let containerOCLVarname: String = container.getUniqueOclName().concat('.oclAsType(InfixExpression)')]
implicityContainerSet->intersection([containerOCLVarname /].extendedOperands->append([containerOCLVarname /].leftOperand)->append([containerOCLVarname /].rightOperand))->size() > 0[/let]
[/template]

[template private writeRelationCondition(f: ImplicityContainerFilter, container: Method, field: Element) ? (container.getRelationName(field) = 'statements')]
implicityContainerSet->intersection([container.getUniqueOclName() /].oclAsType(MethodDeclaration).body.statements)->size() > 0
[/template]

[template private writeRelationCondition(f: ImplicityContainerFilter, container: SynchronizedBlock, field: Element) ? (container.getRelationName(field) = 'bodyStatements')]
implicityContainerSet->intersection([container.getUniqueOclName() /].oclAsType(SynchronizedBlock).body.statements)->size() > 0
[/template]

[template private writeRelationCondition(f: ImplicityContainerFilter, container: LoopStatement, field: Element) ? (container._body = field)]
let loopBody = if [container.getUniqueOclName() /].oclIsKindOf(EnhancedForStatement) then
  [container.getUniqueOclName() /].oclAsType(EnhancedForStatement).body
elseif [container.getUniqueOclName() /].oclIsKindOf(ForStatement) then
  [container.getUniqueOclName() /].oclAsType(ForStatement).body
elseif [container.getUniqueOclName() /].oclIsKindOf(WhileStatement) then
  [container.getUniqueOclName() /].oclAsType(WhileStatement).body
elseif [container.getUniqueOclName() /].oclIsKindOf(DoStatement) then
  [container.getUniqueOclName() /].oclAsType(DoStatement).body
else 
  null
endif in loopBody <> null and
implicityContainerSet->exists(x | x = loopBody)->size() > 0
[/template]