[comment encoding = UTF-8 /]
[module fromClosureFilterModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::filterUtils /]
[import org::ccsl::gen::ocl::dispatchers::generalElementWritterConditionsModule /]
[import org::ccsl::gen::ocl::dispatchers::filterConditionsGeneratorDispatcher /]
[import org::ccsl::gen::ocl::rule::context::contextModule /]

[template public writeFromClosureFilterCondition(f: FromClosureFilter, target: Element) ? (f.access = null or f.access = target)]
[f.writeFromClosureSet(target) /]
fromClosureSet->exists([f.from.getUniqueOclName() /]: ASTNode |
  [f.from.writeElementConditions(f.from.getUniqueOclName(), true, 'ASTNode') /] [if f._context.filters->size() > 0]
  and
  [f._context.filters->writeFiltersConditions() /] [f._context.writeCloseParenthesis() /]
  [/if]
)
[/template]

[template public writeFromClosureFilterCondition(f: FromClosureFilter, target: Element) ? (f.access = null and f.access <> target)]
[f.writeTemplateElementCondition(target, f.access) /] and
[f.writeFromClosureSet(target) /]
fromClosureSet->exists([f.from.getUniqueOclName() /]: ASTNode |
  [f.from.writeElementConditions(f.from.getUniqueOclName(), true, 'ASTNode') /] [if f._context.filters->size() > 0]
  and
  [f._context.filters->writeFiltersConditions() /] [f._context.writeCloseParenthesis() /]
  [/if]
)
[/template]

[template private writeFromClosureSet(f: FromClosureFilter, target: Element) /]

[template private writeFromClosureSet(f: FromClosureFilter, target: MethodInvocation)]
let fromClosureSet: OrderedSet(ASTNode) = [f.access.getUniqueOclName() /]->asOrderedSet()->closure(node: ASTNode |
  if node.oclIsKindOf(MethodInvocation) then
    node.oclAsType(MethodInvocation).expression
  else
    node
  endif
) in
[/template]
