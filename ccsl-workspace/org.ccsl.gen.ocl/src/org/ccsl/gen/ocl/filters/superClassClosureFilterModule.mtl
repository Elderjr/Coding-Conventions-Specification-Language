[comment encoding = UTF-8 /]
[module superClassClosureFilterModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::filterUtils /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::dispatchers::generalElementWritterConditionsModule /]
[import org::ccsl::gen::ocl::dispatchers::filterConditionsGeneratorDispatcher /]
[import org::ccsl::gen::ocl::rule::context::contextModule /]

[template public writeSuperClassClosureFilterModule(f: SuperClassClosureFilter, target: Element)]
[f.writeSubClassCondition(target) /]
[f.writeSuperClassesClosureSet() /]
[f.writeSuperClassCondition() /]
[/template]

[template private writeSubClassCondition(f: SuperClassClosureFilter, target: Element) ? (not getElementsVisited()->includes(f.subClass))]
[f.writeTemplateElementCondition(target, f.subClass) /] and
[/template]

[template private writeSuperClassesClosureSet(f: SuperClassClosureFilter)]
let superClassesClosureSet: OrderedSet(ClassDeclaration) = [f.subClass.getUniqueOclName() /]->asOrderedSet()->closure(superClass: ASTNode |
  if (superClass.oclIsKindOf(ClassDeclaration) and superClass.oclAsType(ClassDeclaration).superClass <> null) then
    superClass.oclAsType(ClassDeclaration).superClass.type
  else
    null
  endif
)->select(class: ASTNode | class <> null and class.oclIsKindOf(ClassDeclaration)) in
[/template]

[template private writeSuperClassCondition(f: SuperClassClosureFilter) ? (getElementsVisited()->includes(f.superClass))]
superClassesClosureSet->exists(tmp: ClassDeclaration | tmp = [f.superClass.getUniqueOclName() /])
[/template]

[template private writeSuperClassCondition(f: SuperClassClosureFilter) ? (not getElementsVisited()->includes(f.superClass))]
superClassesClosureSet->exists([f.superClass.getUniqueOclName() /]: ClassDeclaration
  [f.superClass.writeElementConditions(f.superClass.getUniqueOclName(), false, 'ClassDeclaration') /]
)
[/template]