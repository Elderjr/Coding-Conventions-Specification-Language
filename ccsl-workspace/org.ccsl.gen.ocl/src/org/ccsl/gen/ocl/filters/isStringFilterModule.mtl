[comment encoding = UTF-8 /]
[module isStringFilterModule('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]



[template public writeIsStringFilterCondition(filter: IsStringFilter, target: Element)]
[filter.writeStringChecker(target) /]
[/template]

[template public writeStringChecker(filter: IsStringFilter, target: Element)]
let closureIteration: OrderedSet(ASTNode) = [target.getUniqueOclName() /]->asOrderedSet()->closure(v: ASTNode |
  if v.oclIsKindOf(InfixExpression) then
    v.oclAsType(InfixExpression).extendedOperands
      ->append(v.oclAsType(InfixExpression).leftOperand)
      ->append(v.oclAsType(InfixExpression).rightOperand)
  elseif v.oclIsKindOf(Assignment) then
    v.oclAsType(Assignment).leftHandSide->asOrderedSet()->append(v.oclAsType(Assignment).rightHandSide)
  elseif v.oclIsKindOf(ParenthesizedExpression) then
    v.oclAsType(ParenthesizedExpression).expression
  else
    v
  endif
) in
closureIteration->exists(v: ASTNode |
  if v.oclIsKindOf(StringLiteral) then
    true
  elseif v.oclIsKindOf(MethodInvocation) and v.oclAsType(MethodInvocation).method.oclIsKindOf(MethodDeclaration) and
    v.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).name = 'toString' then
    true
  elseif v.oclIsKindOf(SuperMethodInvocation) and v.oclAsType(SuperMethodInvocation).method.oclIsKindOf(MethodDeclaration) and
    v.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).name = 'toString' then
    true
  elseif v.oclIsKindOf(ClassInstanceCreation) and v.oclAsType(ClassInstanceCreation).type.type.oclIsKindOf(ClassDeclaration) and
    v.oclAsType(ClassInstanceCreation).type.type.oclAsType(ClassDeclaration).name = 'String' then
    true
  else
    let accessesClosure: OrderedSet(ASTNode) = v->asOrderedSet()->closure(v: ASTNode | 
      if v.oclIsKindOf(ArrayAccess) then
        v.oclAsType(ArrayAccess).array
      else
        v
      endif
    ) in
    let totalAccesses: Integer = accessesClosure->select(v: ASTNode | v.oclIsKindOf(ArrayAccess))->size() in
    let baseNode: ASTNode = accessesClosure->last() in
    let baseNode: ASTNode = if baseNode.oclIsKindOf(SingleVariableAccess) then
      baseNode.oclAsType(SingleVariableAccess).variable
    elseif baseNode.oclIsKindOf(FieldAccess) then
      baseNode.oclAsType(FieldAccess).field.variable
    else
      baseNode
    endif in
    let baseNodeType: ASTNode = if baseNode.oclIsKindOf(VariableDeclarationFragment) then
      baseNode.oclAsType(VariableDeclarationFragment).variablesContainer.type.type
    elseif baseNode.oclIsKindOf(SingleVariableDeclaration) then
      baseNode.oclAsType(SingleVariableDeclaration).type.type
    elseif baseNode.oclIsKindOf(MethodInvocation) and baseNode.oclAsType(MethodInvocation).method.oclIsKindOf(MethodDeclaration) and
      (not baseNode.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
      baseNode.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.type
    elseif baseNode.oclIsKindOf(SuperMethodInvocation) and baseNode.oclAsType(SuperMethodInvocation).method.oclIsKindOf(MethodDeclaration) and
      (not baseNode.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
      baseNode.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).returnType.type
    else
      null
    endif in (not baseNodeType.oclIsUndefined()) and
    let baseNodeTypeDimensions: Integer = if baseNodeType.oclIsKindOf(ArrayType) then
      baseNodeType.oclAsType(ArrayType).dimensions
    else
      0
    endif in
    let baseNodeDimensions: Integer = if baseNode.oclIsKindOf(VariableDeclaration) then
      baseNode.oclAsType(VariableDeclaration).extraArrayDimensions
    else
      0
    endif in
    let dimensions: Integer = if baseNodeTypeDimensions > baseNodeDimensions then
      baseNodeTypeDimensions
    else
      baseNodeDimensions
    endif in
    let baseNodeType: ASTNode = baseNodeType->asOrderedSet()->closure(v: ASTNode |
      if v.oclIsKindOf(ArrayType) then
        v.oclAsType(ArrayType).elementType.type
      else
        v
      endif
    )->last() in baseNodeType.oclIsKindOf(ClassDeclaration) and baseNodeType.oclAsType(ClassDeclaration).name = 'String' and
    dimensions = totalAccesses
  endif
)
[/template]
