[comment encoding = UTF-8 /]
[module closureFilterModule('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::element::statement::expression::operatorExpressionOperations /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::dispatchers::generatesElementConditionsDispatcher /]
[import org::ccsl::gen::ocl::rule::context::contextModule /]
[import org::ccsl::gen::ocl::dispatchers::getMatchingJavaMetaclassesDispatcher /]


[template public writeClosureFilterCondition(filter: ClosureFilter, target: Element)]
--Closure Filter
let [filter.targetTemplate.getUniqueOclName() /]: [filter.targetTemplate.getDeclaredElementMetaclass() /] = [target.getUniqueOclName() /] in
[filter.writeClosureSet() /]
[filter.writeClosureSetCondition() /] and
[filter._context.writeContextConditions(filter.targetTemplate, true, filter.targetTemplate.getDeclaredElementMetaclass()) /]
)
[/template]

[template private writeClosureSetCondition(filter: ClosureFilter)]
closureSet->exists([filter.closureElement.getUniqueOclName() /]: ASTNode |
  [filter.closureElement.generatesConditions(filter.closureElement.getUniqueOclName(), true, 'ASTNode') /]
[/template]

[template private writeClosureSet(f: ClosureFilter)]
let closureSet: OrderedSet(ASTNode) = [if f.closureElement.eContainer() = f.targetTemplate]
[f.writeGetClosureSetFromContainerToField(f.targetTemplate, f.closureElement) /][else]
[f.writeGetClosureSetFromFieldToContainer(f.closureElement, f.targetTemplate) /][/if] in
[/template]

[template private writeGetClosureSetFromContainerToField(f: ClosureFilter, container: Element, closureField: Element) /]
[template private writeGetClosureSetFromFieldToContainer(f: ClosureFilter, closureContainer: Element, field: Element) /]


[comment closureset to @OperatorExpression - operands /]
[template private writeGetClosureSetFromContainerToField(f: ClosureFilter, container: OperatorExpression, closureField: Element ) ? (container.getRelationName(closureField) = 'operands') ]
[container.writeGetOperands(container.getUniqueOclName(), container.getDeclaredElementMetaclass()) /]->closure(n: ASTNode |
  if n.oclIsKindOf(InfixExpression) then
    n.oclAsType(InfixExpression).operands->extendedOperands(n.oclAsType(InfixExpression).leftOperand)->append(n.oclAsType(InfixExpression).rightOperand)
  else if n.oclIsKindOf(PrefixExpression) then
    n.oclAsType(PrefixExpression).operand
  else if n.oclIsKindOf(ParenthesizedExpression) then
    n.oclAsType(ParenthesizedExpression).expression
  else
    n
  endif endif
)->excluding([container.getUniqueOclName() /])
[/template]

[template private writeGetClosureSetFromFieldToContainer(f: ClosureFilter, closureContainer: OperatorExpression, field: Element) ? (closureContainer.getRelationName(field) = 'operands')]
[field.getUniqueOclName() /]->closure(n: ASTNode |
  let container: OclAny = n.oclContainer() in
  if container <> null and container.oclIsKindOf(InfixExpression) and
    container.oclAsType(InfixExpression).extendedOperands
      ->append(container.oclAsType(InfixExpression).leftOperand)
      ->append(container.oclAsType(InfixExpression).rightOperand)
      ->exists(x | x = n) then
    container
  else if container.oclIsKindOf(PrefixExpression) and container.oclAsType(PrefixExpression).operand = n then
    container
  else if container.oclIsKindOf(ParenthesizedExpression) then
    container
  else if n.oclIsKindOf(ParenthesizedExpression) then
    n.oclAsType(ParenthesizedExpression)
  else
    null
  endif endif endif endif
)->excluding([field.getUniqueOclName() /])
[/template]
