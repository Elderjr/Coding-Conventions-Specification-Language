[comment encoding = UTF-8 /]
[module isKindOfFilterModule('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::dispatchers::javaMatchingMetaclassesModule /]
[import org::ccsl::gen::ocl::dispatchers::generalElementWritterConditionsModule /]



[template public writeIsKindOfFilterCondition(filter: IsKindOfFilter, target: Element)]
[filter.writeAllSuperTypesSet(target) /]
allSuperTypes->exists([filter.type.getUniqueOclName() /] |
  [filter.type.writeElementConditions(filter.type.getUniqueOclName(), true, 'ASTNode') /]
)
[/template]

[template private writeAllSuperTypesSet(filter: IsKindOfFilter, target: Element)]
let allSuperTypes: OrderedSet(ASTNode) = [target.getUniqueOclName() /]->asOrderedSet()->closure(superType |
  let superTypeAccesses: OrderedSet(TypeAccess) = if superType.oclIsKindOf(ClassDeclaration) then
    superType.oclAsType(ClassDeclaration).superInterfaces->append(superType.oclAsType(ClassDeclaration).superClass)
  elseif superType.oclIsKindOf(InterfaceDeclaration) then
    superType.oclAsType(InterfaceDeclaration).superInterfaces
  else
    OrderedSet(TypeAccess){}
  endif in superTypeAccesses
	         ->collect(typeAccess: TypeAccess | if typeAccess <> null then typeAccess.type else null endif)
	         ->select(type | type <> null)
) in
[/template]