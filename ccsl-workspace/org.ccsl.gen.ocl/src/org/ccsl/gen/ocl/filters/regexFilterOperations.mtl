[comment encoding = UTF-8 /]
[module regexFilterOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::element::statement::literalValueOperations /]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::stringUtils /]

[template public generatesRegexFilterConditions(regexFilter: RegexMatch, target: Element)]
### RegexMatch is not supported for the type [target.eClass().name /] ###
[/template]

[template public generatesRegexFilterConditions(regexFilter: RegexMatch, target: NamedElement)]
[target.getUniqueOclName() /].oclAsType(NamedElement).name.matches('[regexFilter.regex /]')
[/template]

[template private generatesRegexFilterConditions(regexFilter: RegexMatch, target: ComplexType)]
let [target.getUniqueOclName() /]Package: Package = if [target.getUniqueOclName() /].oclIsKindOf(ClassDeclaration) then
  [target.getUniqueOclName() /].oclAsType(ClassDeclaration).package
else if [target.getUniqueOclName() /].oclIsKindOf(InterfaceDeclaration) then
  [target.getUniqueOclName() /].oclAsType(InterfaceDeclaration).package
else
  null
endif endif in (not [target.getUniqueOclName() /]Package.oclIsUndefined()) and
[target.getUniqueOclName() /]Package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
  fullName.concat(p.name).concat('.')
).concat([target.getUniqueOclName() /].oclAsType(NamedElement).name).matches('[regexFilter.regex /]') 
[/template]

[template private generatesRegexFilterConditions(regexFilter: RegexMatch, target: JClass)]
let className: String = if [target.getUniqueOclName() /].oclIsKindOf(ClassDeclaration) then
  [target.getUniqueOclName() /].oclAsType(ClassDeclaration).name
else if [target.getUniqueOclName() /].oclIsKindOf(AnonymousClassDeclaration) then
  [target.getUniqueOclName() /].oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).name
else
  null
endif endif in (not className.oclIsUndefined()) and
let classPackage: Package = if [target.getUniqueOclName() /].oclIsKindOf(ClassDeclaration) then
  [target.getUniqueOclName() /].oclAsType(ClassDeclaration).package
else if [target.getUniqueOclName() /].oclIsKindOf(AnonymousClassDeclaration) then
  [target.getUniqueOclName() /].oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).package
else
  null
endif endif in (not className.oclIsUndefined()) and
classPackage->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
  fullName.concat(p.name).concat('.')
).concat(className).matches('[regexFilter.regex /]')
[/template]

[template private generatesRegexFilterConditions(regexFilter: RegexMatch, target: AnnotationType)]
if([target.getUniqueOclName() /].oclIsKindOf(AnnotationTypeDeclaration)) then
  [target.getUniqueOclName() /].oclAsType(AnnotationTypeDeclaration).package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
    fullName.concat(p.name).concat('.')
  ).concat([target.getUniqueOclName() /].oclAsType(AnnotationTypeDeclaration).name).matches('[regexFilter.regex /]')
else
  [target.getUniqueOclName() /].oclAsType(NamedElement).name.matches('[regexFilter.regex /]')
endif
[/template]

[template public generatesRegexFilterConditions(regexFilter: RegexMatch, target: LiteralValue) ? (target.getLiteralMatchingMetaclasses()->size() > 1)]
[target.generatesLetStatementToGetLiteralValue(target.getUniqueOclName(), 'literalNameRegex') /]
literalNameRegex.matches('[regexFilter.regex /]')
[/template]

[template public generatesRegexFilterConditions(regexFilter: RegexMatch, target: LiteralValue) ? (target.getLiteralMatchingMetaclasses()->size() = 1)]
[let matchingMetaclass: String = target.getLiteralMatchingMetaclasses()->first()]
[target.getUniqueOclName().printWithCast(matchingMetaclass) /].[target.getLiteralValueMatchingFieldByJavaMetaclass(matchingMetaclass) /].matches('[if target.isStringLiteral()]"[/if][regexFilter.regex /][if target.isStringLiteral()]"[/if]')[/let]
[/template]

[template public generatesRegexFilterConditions(regexFilter: RegexMatch, target: PrimitiveType)]
[target.getUniqueOclName() /].oclAsType(PrimitiveType).name.matches('[regexFilter.regex /]')
[/template]
