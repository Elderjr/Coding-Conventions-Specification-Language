[comment encoding = UTF-8 /]
[module methodConditionsBuilder('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::inheritanceUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]

[comment Modisco map:
	*MethodDeclaration
 /]
[comment Method properties:
	*returnType
	*static
	*inheritance
 /]
[template public writeMethodTypecheckCondition(method: Method, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(MethodDeclaration)
[/template]

[template public writeReturnTypeCondition(method: Method, varname: String) ? (method.mustWriteConditionFor('returnType'))]
(not [varname /].returnType.oclIsUndefined()) and
let [method.returnType.getFieldName() /]: ASTNode = [varname /].returnType.type in
[method.generatesFieldCondition(method.returnType, method.returnType.getFieldName(), 'ASTNode') /]
[/template]

[template public writeBodyCondition(method: Method, varname: String) ? (method.mustWriteConditionFor('body'))]
let [method._body.getFieldName() /]: Block = [varname /].body in
[method.generatesFieldCondition(method._body, method._body.getFieldName(), 'ASTNode') /]
[/template]

[template public writeInheritanceCondition(method: Method, varname: String) ? (method.inheritance <> Inheritance::ANY)]
[varname /].modifier <> null and
[varname /].modifier.inheritance = [method.inheritance.writeInheritance() /]
[/template]

[template public writeStaticCondition(method: Method, varname: String)? (not method._static.oclIsUndefined())]
[varname /].modifier <> null and
[if (method._static = false)](not [/if][varname /].modifier.static[if (method._static = false)])[/if]
[/template]