[comment encoding = UTF-8 /]
[module invocationConditionsBuilder('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]

[template public writeInvocationTypecheckCondition(invocation: Invocation, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(AbstractMethodInvocation)
[/template]

[template public writeArgsCondition(invocation: Invocation, varname: String) ? (invocation.mustWriteConditionFor('args')){
  args: String = invocation.getUniqueOclName().concat('_args');
}]
let [args /]: OrderedSet(ASTNode) = [varname /].oclAsType(AbstractMethodInvocation).arguments->collect(arg: ASTNode |
  arg->closure(v: ASTNode | if v.oclIsKindOf(ParenthesizedExpression) then
    v.oclAsType(ParenthesizedExpression).expression
  else
    v
  endif)
) in
[invocation.writeSetConditions(args, invocation.args, 'ASTNode', invocation.argsKind) /]
[/template]

[template public writeTypeArgsCondition(invocation: Invocation, varname: String) ? (invocation.mustWriteConditionFor('typeArgs')){
  args: String = invocation.getUniqueOclName().concat('_typeArgs');
}]
let [args /]: OrderedSet(ASTNode) = [varname /].oclAsType(AbstractMethodInvocation).typeArguments->collect(type) in
[invocation.writeSetConditions(args, invocation.typeArgs, 'ASTNode', invocation.typeArgsKind) /]
[/template]


[template public writeMethodCondition(invocation: Invocation, varname: String) ? (invocation.mustWriteConditionFor('method'))]
let [invocation.method.getFieldName() /]: ASTNode = [varname /].oclAsType(AbstractMethodInvocation).method in 
[invocation.generatesFieldCondition(invocation.method, invocation.method.getFieldName(), 'ASTNode') /]
[/template]
