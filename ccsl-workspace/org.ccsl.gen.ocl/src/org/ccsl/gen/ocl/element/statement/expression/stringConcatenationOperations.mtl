[comment encoding = UTF-8 /]
[module stringConcatenationOperations('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::statementTypeGetterGenerator /]

[import org::ccsl::gen::ocl::element::statement::expression::operatorExpressionOperations /]

[query public getStringConcatenationMatchingMetaclasses(strConcat: StringConcatenation): OrderedSet(String)=
  OrderedSet(String){'InfixExpression', 'Assignment'}
/]

[query public getStringConcatenationConditions(strConcat: StringConcatenation, varname: String): OrderedSet(String) = 
OrderedSet(String) {
  strConcat.generatesConditionForStringConcatenationTypecheck(varname)
}->addAll(strConcat.getOperatorExpressionConditions(varname, false, 'ASTNode'))
/]

[template public generatesConditionForStringConcatenationTypecheck(strConcat: StringConcatenation, varname: String)]
( ([varname /].oclIsKindOf(Assignment) and [varname /].oclAsType(Assignment).operator = AssignmentKind::PLUS_ASSIGN) or ([varname /].oclIsKindOf(InfixExpression)) ) and
[strConcat.generatesStatementTypeGetter(varname, 'tmpType') /] and
tmpType = strClass
[/template]

