[comment encoding = UTF-8 /]
[module throwStatementModule('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]

[template public writeThrowStatementTypecheckCondition(throwStmt: ThrowStatement, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(ThrowStatement)
[/template]


[template public writeExpressionCondition(throwStmt: ThrowStatement, varname: String) ? (throwStmt.mustWriteConditionFor('expression'))]
let [throwStmt.expression.getFieldName() /]: ASTNode = [varname /]->asOrderedSet()->closure(p: ASTNode |
  if (p.oclIsKindOf(ParenthesizedExpression)) then
    p.oclAsType(ParenthesizedExpression).expression
  else
    p
  endif
)->last() in in
[throwStmt.generatesFieldCondition(throwStmt.expression, throwStmt.expression.getFieldName(), 'ASTNode') /]
[/template]