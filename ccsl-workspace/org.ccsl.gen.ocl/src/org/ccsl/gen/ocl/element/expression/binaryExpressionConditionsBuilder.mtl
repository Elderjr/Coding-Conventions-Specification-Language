[comment encoding = UTF-8 /]
[module binaryExpressionConditionsBuilder('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]



[template public writeBinaryExpressionTypecheckCondition(exp: BinaryExpression, varname: String, typecheck: Boolean) ? (typecheck and exp.kind = ExpressionKind::ANY)]
if [varname /].oclIsKindOf(InfixExpression) then
  OrderedSet(InfixExpressionKind){
    InfixExpressionKind::LEFT_SHIFT,
    InfixExpressionKind::RIGHT_SHIFT_SIGNED,
    InfixExpressionKind::XOR,
    InfixExpressionKind::AND,
    InfixExpressionKind::OR
  }->includes([varname /].oclAsType(InfixExpression).operator)
elseif [varname /].oclIsKindOf(PrefixExpression) then
  OrderedSet(PrefixExpressionKind){
    PrefixExpressionKind::COMPLEMENT
  }->includes([varname /].oclAsType(PrefixExpression).operator)
else
  false
endif
[/template]

[template public writeBinaryExpressionTypecheckCondition(exp: BooleanExpression, varname: String, typecheck: Boolean) ? (typecheck and exp.kind = ExpressionKind::INFIX)]
if [varname /].oclIsKindOf(InfixExpression) then
  OrderedSet(InfixExpressionKind){
    InfixExpressionKind::LEFT_SHIFT,
    InfixExpressionKind::RIGHT_SHIFT_SIGNED,
    InfixExpressionKind::XOR,
    InfixExpressionKind::AND,
    InfixExpressionKind::OR
  }->includes([varname /].oclAsType(InfixExpression).operator)
else
  false
endif
[/template]

[template public writeBinaryExpressionTypecheckCondition(exp: BooleanExpression, varname: String, typecheck: Boolean) ? (typecheck and exp.kind = ExpressionKind::UNARY)]
if [varname /].oclIsKindOf(PrefixExpression) then
  OrderedSet(PrefixExpressionKind){
    PrefixExpressionKind::COMPLEMENT
  }->includes([varname /].oclAsType(PrefixExpression).operator)
else
  false
endif
[/template]

