[comment encoding = UTF-8 /]
[module literalValueOperations('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]


[query public isStringLiteral(literal: LiteralValue): Boolean = 
literal.oclIsKindOf(StringLiteral)
/]

[query public isCharacterLiteral(literal: LiteralValue): Boolean = 
literal.oclIsKindOf(CharacterLiteral)
/]

[query public isNumberLiteral(literal: LiteralValue): Boolean = 
literal.oclIsKindOf(NumberLiteral)
/]

[query public isBooleanLiteral(literal: LiteralValue): Boolean = 
literal.oclIsKindOf(BooleanLiteral)
/]

[query public isNullLiteral(literal: LiteralValue): Boolean = 
literal.oclIsKindOf(NullLiteral)
/]

[query public getLiteralMatchingMetaclasses(literal: LiteralValue): OrderedSet(String)= 
if literal.isStringLiteral() then
  OrderedSet(String){'StringLiteral'}
else if literal.isCharacterLiteral() then
  OrderedSet(String){'CharacterLiteral'}
else if literal.isNumberLiteral() then
  OrderedSet(String){'NumberLiteral'}
else if literal.isBooleanLiteral() then
  OrderedSet(String){'BooleanLiteral'}
else if literal.isNullLiteral() then
  OrderedSet(String){'NullLiteral'}
else
  OrderedSet(String){'StringLiteral', 'CharacterLiteral', 'NumberLiteral', 'BooleanLiteral'}
endif endif endif endif endif
/]

[query public getLiteralValueMatchingFieldByJavaMetaclass(literal: LiteralValue, javaMetaclass: String): String = 
  if javaMetaclass = 'CharacterLiteral' or javaMetaclass  = 'StringLiteral' then
    'escapedValue'
  else if javaMetaclass = 'NumberLiteral' then
    'tokenValue'
  else if javaMetaclass = 'BooleanLiteral' then
    'value.toString()'
  else
    ''
  endif endif endif
/]


[query public getLiteralFieldMapping(literal: LiteralValue): OrderedSet(OrderedSet(String)) =
if literal.isStringLiteral() then
  OrderedSet(OrderedSet(String)){OrderedSet(String){'StringLiteral', 'escapedValue'}}
else if literal.isCharacterLiteral() then
  OrderedSet(OrderedSet(String)){OrderedSet(String){'CharacterLiteral', 'escapedValue'}}
else if literal.isNumberLiteral() then
  OrderedSet(OrderedSet(String)){OrderedSet(String){'NumberLiteral', 'tokenValue'}}
else if literal.isBooleanLiteral() then
  OrderedSet(OrderedSet(String)){OrderedSet(String){'BooleanLiteral', 'value.toString()'}}
else if literal.isNullLiteral() then
  OrderedSet(OrderedSet(String)){OrderedSet(String){'NullLiteral', 'null'}}
else
  OrderedSet(OrderedSet(String)){
    OrderedSet(String){'StringLiteral', 'escapedValue'},
    OrderedSet(String){'CharacterLiteral', 'escapedValue'},
    OrderedSet(String){'NumberLiteral', 'tokenValue'},
    OrderedSet(String){'BooleanLiteral', 'value.toString()'},
    OrderedSet(String){'NullLiteral', 'null.toString()'}
}
endif endif endif endif endif
/]

[query public getLiteralConditions(literal: LiteralValue, varname: String, typecheck: Boolean): OrderedSet(String) = 
OrderedSet(String) {
  literal.generatesLiteralValueTypecheckCondition(varname, typecheck),
  literal.generatesConditionForValue(varname, typecheck)
}->select(s | s.trim().size() > 0)
/]

[template public generatesLiteralValueTypecheckCondition(literal: LiteralValue, varName: String, typecheck: Boolean) ? (typecheck)]
([for (type: String | literal.getLiteralMatchingMetaclasses()) separator(' or ')]
[varName /].oclIsKindOf([type /])[/for])
[/template]

[template public generatesConditionForValue(literal: LiteralValue, varname: String, typecheck: Boolean) ? ((not literal.value.oclIsUndefined()) and (literal.getLiteralMatchingMetaclasses()->size() > 1))]
[literal.generatesLetStatementToGetLiteralValue(varname, 'tmpValue') /] and
tmpValue = [if literal.isStringLiteral()]'"[literal.value /]"'[else]'[literal.value /]'[/if]
[/template]

[template public generatesConditionForValue(literal: LiteralValue, varname: String, typecheck: Boolean) ? ((not literal.value.oclIsUndefined()) and (literal.getLiteralMatchingMetaclasses()->size() = 1))]
[let matchingMetaclass: String = literal.getLiteralMatchingMetaclasses()->first()]
[if matchingMetaclass <> 'NullLiteral']
[varname.printVarname(typecheck, matchingMetaclass) /].[literal.getLiteralValueMatchingFieldByJavaMetaclass(matchingMetaclass) /] = [literal.generatesLiteralExpressionValue() /][elseif matchingMetaclass='NullLiteral' and (not typecheck)]
[varname.printKindOfCondition('NullLiteral') /][/if][/let]
[/template]

[template public generatesLetStatementToGetLiteralValue(literal: LiteralValue, varname: String, letOclName: String)]
let [letOclName /]: String = [for(entry: OrderedSet(String) | literal.getLiteralFieldMapping()) separator('else ')]
if [varname /].oclIsKindOf([entry->at(1) /]) then
  [if entry->at(1) <> 'NullLiteral'][varname /].oclAsType([entry->at(1) /]).[entry->at(2) /][else]'null'[/if]
[/for]
else
  null
[for (Sequence(Integer){1..literal.getLiteralFieldMapping()->size()}) separator(' ')]endif[/for] in
(not [letOclName /].oclIsUndefined())
[/template]

[template public generatesLiteralExpressionValue(literal: LiteralValue)]
[if literal.isStringLiteral() and literal.value.size() >0]
'"[literal.value /]"'[elseif literal.isStringLiteral() and literal.value.size() = 0]
'""'[else]
'[literal.value /]'[/if]
[/template]

