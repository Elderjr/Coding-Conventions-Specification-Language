[comment encoding = UTF-8 /]
[module complexTypeDeclarationConditionsBuilder('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::facades::elementFacadeConditionsBuilder /]



[template public writeComplexTypeDeclarationTypecheckCondition(complexType: ComplexTypeDeclaration, varname: String, typecheck: Boolean) ? (typecheck)]
([varname /].oclIsKindOf(AbstractTypeDeclaration) and (not [varname /].oclIsKindOf(AnnotationTypeDeclaration)))
[/template]


[template public writeSuperInterfacesCondition(complexType: ComplexTypeDeclaration, varname: String) ? (complexType.mustWriteConditionFor('superInterfaces')){
  superInterfaces: String = complexType.getUniqueOclName().concat('_superInterfaces');
}]
let [superInterfaces /]: OrderedSet(ASTNode) = [varname /].superInterfaces->collect(type) in
[complexType.writeSetConditions(superInterfaces, complexType.superInterfaces, 'ASTNode', CollectionKind::ANY) /]
[/template]