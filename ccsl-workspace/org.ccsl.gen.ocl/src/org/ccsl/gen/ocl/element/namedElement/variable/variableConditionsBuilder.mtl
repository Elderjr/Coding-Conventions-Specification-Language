[comment encoding = UTF-8 /]
[module variableConditionsBuilder('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /] 
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule/]

[comment MoDisco map:
	*VariableDeclarationFragment
	*SingleVariableDeclaration
 /]

[comment Variable properties: 
	*type
	*final
/]

[template public writeVariableTypecheckCondition(var: Variable, varname: String, typecheck: Boolean) ? (typecheck)]
(
  [varname /].oclIsKindOf(VariableDeclarationFragment) or 
  [varname /].oclIsKindOf(SingleVariableDeclaration)
)
[/template]

[comment Write type condition when var.oclIsKindOf(Variable) /]
[template public writeTypeCondition(var: Variable, varname: String, metaclass: String) ? (var.mustWriteConditionFor('type'))]
let [var.type.getFieldName() /]: ASTNode = if [varname /].oclIsKindOf(SingleVariableDeclaration) and [varname /].oclAsType(SingleVariableDeclaration).type <> null then
  [varname /].oclAsType(SingleVariableDeclaration).type.type
elseif [varname /].oclIsKindOf(VariableDeclarationFragment) and [varname /].oclAsType(VariableDeclarationFragment).variablesContainer <> null and  
    [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.type <> null then
  [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.type.type
else
  null
endif in
[var.generatesFieldCondition(var.type, var.type.getFieldName(), 'ASTNode') /]
[/template]

[comment Write type condition when var.oclIsKindOf(InitializableVariable) /]
[template public writeTypeCondition(var: InitializableVariable, varname: String, metaclass: String) ? (var.mustWriteConditionFor('type'))]
[varname /].variablesContainer <> null and
[varname /].variablesContainer.type <> null and
let [var.type.getFieldName() /]: ASTNode = [varname /].variablesContainer.type.type in
[var.generatesFieldCondition(var.type, var.type.getFieldName(), 'ASTNode') /]
[/template]

[comment Write type condition when var.oclIsKindOf(ParameterVariable) /]
[template public writeTypeCondition(var: ParameterVariable, varname: String, metaclass: String) ? (var.mustWriteConditionFor('type'))]
[varname /].type <> null and
let [var.type.getFieldName() /]: ASTNode = [varname /].type.type in
[var.generatesFieldCondition(var.type, var.type.getFieldName(), 'ASTNode') /]
[/template]


[comment Write final condition when var = Variable /]
[template public writeFinalCondition(var: Variable, varname: String, metaclass: String) ? (not var.final.oclIsUndefined()){
  modifier: String = var.getUniqueOclName().concat('_modifier');
}]
let [modifier /]: Modifier = if [varname /].oclIsKindOf(SingleVariableDeclaration) then
  [varname /].oclAsType(SingleVariableDeclaration).modifier
elseif [varname /].oclIsKindOf(VariableDeclarationFragment) and [varname /].oclIsKindOf(VariableDeclarationFragment).variablesContainer <> null then
  if [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(FieldDeclaration) then
    [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(FieldDeclaration).modifier
  elseif [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationExpression) then
    [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationExpression).modifier
  elseif [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationStatement) then
    [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationStatement).modifier
  else
    null
  endif
else
  null
([modifier /].inheritance [if var.final = true]=[else]<>[/if] InheritanceKind::final)
[/template]

[comment Write final condition when var = ParameterVariable /]
[template public writeFinalCondition(var: ParameterVariable, varname: String, metaclass: String) ? ((not var.final.oclIsUndefined())){
  modifier: String = var.getUniqueOclName().concat('_modifier');
}]
let [modifier /]: Modifier = [varname /].modifier in
[modifier /] <> null and 
[modifier /].inheritance [if var.final = true]=[else]<>[/if] InheritanceKind::final
[/template]

[comment Write final condition when var = InitializableVariable /]
[template public writeFinalCondition(var: InitializableVariable, varname: String, metaclass: String) ? ((not var.final.oclIsUndefined())){
  modifier: String = var.getUniqueOclName().concat('_modifier');
}]
[varname /].variablesContainer <> null and
let [modifier /]: Modifier = if [varname /].variablesContainer.oclIsKindOf(FieldDeclaration) then
  [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(FieldDeclaration).modifier
elseif [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationExpression) then
  [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationExpression).modifier
elseif [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationStatement) then
  [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationStatement).modifier
else
  null
endif in [modifier /] <> null and 
[modifier /].inheritance [if var.final = true]=[else]<>[/if] InheritanceKind::final
[/template]

[comment Write final condition when var = FieldVariable /]
[template public writeFinalCondition(var: FieldVariable, varname: String, metaclass: String) ? ((not var.final.oclIsUndefined())){
  modifier: String = var.getUniqueOclName().concat('_modifier');
}]
let [modifier /]: Modifier = [varname /].variablesContainer.oclAsType(FieldDeclaration).modifier in 
[modifier /] <> null and 
[modifier /].inheritance [if var.final = true]=[else]<>[/if] InheritanceKind::final
[/template]

[comment Write final condition when var = LocalVariable /]
[template public writeFinalCondition(var: LocalVariable, varname: String, metaclass: String) ? ((not var.final.oclIsUndefined())){
  modifier: String = var.getUniqueOclName().concat('_modifier');
}]
[varname /].variablesContainer <> null and
let [modifier /]: Modifier = if [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationExpression) then
  [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationExpression).modifier
elseif [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclIsKindOf(VariableDeclarationStatement) then
  [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.oclAsType(VariableDeclarationStatement).modifier
else
  null
endif in [modifier /] <> null and 
[modifier /].inheritance [if var.final = true]=[else]<>[/if] InheritanceKind::final
[/template]
