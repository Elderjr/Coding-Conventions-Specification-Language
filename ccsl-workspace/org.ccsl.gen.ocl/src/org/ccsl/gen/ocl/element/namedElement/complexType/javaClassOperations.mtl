[comment encoding = UTF-8 /]
[module javaClassOperations('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]


[template public generatesClassTypecheckCondition(class: JClass, varname: String, typecheck: Boolean, metaclass: String) ? (typecheck)]
[varname /].oclIsKindOf(ClassDeclaration)
[/template]

[template public writeSuperInterfacesCondition(class: JClass, varname: String) ? (class.mustWriteConditionFor('superInterfaces'))]
let superInterfaces: OrderedSet(ASTNode) = [varname /].superInterfaces->collect(typeAccess: TypeAccess | typeAccess.type) in
[class.writeSetConditions('superInterfaces', class.superInterfaces, 'ASTNode', CollectionKind::ANY) /]
[/template]

[template public writeVisibilityCondition(class: JClass, varname: String) ? (class.visibility <> Visibility::ANY)]
[if (class.visibility = Visibility::PUBLIC)]
([varname /].modifier <> null and [varname /].modifier.visibility = VisibilityKind::public)[elseif(class.visibility = Visibility::PROTECTED)]
([varname /].modifier <> null and [varname /].modifier.visibility = VisibilityKind::protected)[elseif(class.visibility = Visibility::PRIVATE)]
([varname /].modifier <> null and [varname /].modifier.visibility = VisibilityKind::private)[elseif(class.visibility = Visibility::PACKAGE)]
([varname /].modifier <> null and [varname /].modifier.visibility = VisibilityKind::none)[/if]
[/template]

[template public writeInheritanceCondition(class: JClass, varname: String) ? (class.inheritance <> Inheritance::ANY)]
[if (class.inheritance = Inheritance::FINAL)]
([varname /].modifier <> null and [varname /].modifier.inheritance = InheritanceKind::final)[elseif(class.inheritance = Inheritance::ABSTRACT)]
([varname /].modifier <> null and [varname /].modifier.inheritance = InheritanceKind::abstract)[elseif(class.inheritance = Inheritance::NONE)]
([varname /].modifier <> null and [varname /].modifier.visibility = VisibilityKind::none)[/if]
[/template]

[template public writeStaticCondition(class: JClass, varname: String)? (not class._static.oclIsUndefined())]
[if (class._static)]
([varname /].modifier <> null and [varname /].modifier.static)[else]
([varname /].modifier <> null and not [varname /].modifier.static)[/if]
[/template]