[comment encoding = UTF-8 /]
[module ifStatementOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]

[query public getIfStatementMatchingMetaclasses(ifStatement: IfStatement): OrderedSet(String) =
OrderedSet(String) {'IfStatement'}
/]

[template public writeIfStatementTypecheckCondition(ifStatement: IfStatement, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(IfStatement)
[/template]

[template public writeConditionCondition(ifStatement: IfStatement, varname: String) ? (ifStatement.mustWriteConditionFor('condition'))]
let [ifStatement.condition.getFieldName() /]: ASTNode = [varname /].expression->asOrderedSet()->closure(cond: ASTNode | 
  if cond.oclIsKindOf(ParenthesizedExpression) then 
    cond.oclAsType(ParenthesizedExpression).expression 
  else 
    cond 
  endif
)->last() in
[ifStatement.generatesFieldCondition(ifStatement.condition, ifStatement.condition.getFieldName(), 'ASTNode') /]
[/template]

[template public writeThenCondition(ifStatement: IfStatement, varname: String) ? (ifStatement.mustWriteConditionFor('thenStatement'))]
[ifStatement.generatesMonovaluedFieldConditions(ifStatement.thenStatement, varname, 'thenStatement', 'ASTNode') /]
[/template]

[template public writeElseCondition(ifStatement: IfStatement, varname: String) ? (ifStatement.mustWriteConditionFor('elseStatement'))]
[ifStatement.generatesMonovaluedFieldConditions(ifStatement.elseStatement, varname, 'elseStatement', 'ASTNode') /]
[/template]