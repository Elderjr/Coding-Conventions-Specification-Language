[comment encoding = UTF-8 /]
[module ifStatementOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]

[query public getIfStatementMatchingMetaclasses(ifStatement: IfStatement): OrderedSet(String) =
OrderedSet(String) {'IfStatement'}
/]

[query public getIfStatementConditions(ifStatement: IfStatement, varname: String, typecheck: Boolean): OrderedSet(String) =
let void: OclVoid = ifStatement.addElementAsVisited() in
let newVarname: String = varname.printVarname(typecheck, 'IfStatement') in
OrderedSet(String){
  ifStatement.generatesIfStatementTypecheckerCondition(varname, typecheck),
  ifStatement.generatesConditionForIfCondition(newVarname),
  ifStatement.generatesConditionForThen(newVarname),
  ifStatement.generatesConditionForElse(newVarname)
}->select(s: String | s.isNotEmpty())
/]

[template private generatesIfStatementTypecheckerCondition(ifStatement: IfStatement, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(IfStatement)
[/template]

[template private generatesConditionForIfCondition(ifStatement: IfStatement, varname: String) ? (ifStatement.isSet('condition'))]
[ifStatement.generatesMonovaluedFieldConditions(ifStatement.condition, varname, 'expression', 'ASTNode') /]
[/template]

[template private generatesConditionForThen(ifStatement: IfStatement, varname: String) ? (ifStatement.isSet('thenStatement'))]
[ifStatement.generatesMonovaluedFieldConditions(ifStatement.thenStatement, varname, 'thenStatement', 'ASTNode') /]
[/template]

[template private generatesConditionForElse(ifStatement: IfStatement, varname: String) ? (ifStatement.isSet('elseStatement'))]
[ifStatement.generatesMonovaluedFieldConditions(ifStatement.elseStatement, varname, 'elseStatement', 'ASTNode') /]
[/template]