[comment encoding = UTF-8 /]
[module parameterizedTypeOperations('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]


[query public getParameterizedTypeMatchingMetaclasses(parameterizedType: ParameterizedType): OrderedSet(String)=
  OrderedSet(String){'ParameterizedType'}
/]

[template public writeParameterizedTypecheck(parameterizedType: ParameterizedType, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(ParameterizedType)
[/template]

[template public writeTypeParametersConditions(parameterizedType: ParameterizedType, varname: String) ? (parameterizedType.mustWriteConditionFor('parameterizedType'))]
let typeArguments: OrderedSet(ASTNode) = [varname /].typeArguments->collect(type) in 
[parameterizedType.generatesSetConditions('typeArguments', parameterizedType.typeArguments, 'ASTNode') /]
[/template]

[template public writeTypeConditions(parameterizedType: ParameterizedType, varname: String) ? (parameterizedType.mustWriteConditionFor('type'))] 
[parameterizedType.generatesMonovaluedFieldConditions(parameterizedType.type, varname, 'type.type', 'ASTNode') /]
[/template]

