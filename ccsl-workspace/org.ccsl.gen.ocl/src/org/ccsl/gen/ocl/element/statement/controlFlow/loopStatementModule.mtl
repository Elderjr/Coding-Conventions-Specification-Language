[comment encoding = UTF-8 /]
[module loopStatementModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::elementUtils /]


[template public generatesLoopStatementTypecheckerCondition(loopStmt: LoopStatement, varname: String, typecheck: Boolean) ? (typecheck)]
([varname /].oclIsKindOf(EnhancedForStatement) or [varname /].oclIsKindOf(ForStatement) or [varname /].oclIsKindOf(WhileStatement) or [varname /].oclIsKindOf(DoStatement)) 
[/template]

[template public writeBodyCondition(loopStmt: LoopStatement, varname: String) ? (loopStmt.mustWriteConditionFor('body'))]
let [loopStmt._body.getFieldName() /]: ASTNode = if [varname /].oclIsKindOf(EnhancedForStatement) then
  [varname /].oclAsType(EnhancedForStatement).body
elseif [varname /].oclIsKindOf(ForStatement) then
  [varname /].oclAsType(ForStatement).body
elseif [varname /].oclIsKindOf(WhileStatement) then
  [varname /].oclAsType(WhileStatement).body
elseif [varname /].oclIsKindOf(DoStatement) then
  [varname /].oclAsType(DoStatement).body
else
  null
endif in [loopStmt.generatesFieldCondition(loopStmt._body, loopStmt._body.getFieldName(), 'ASTNode') /]
[/template]