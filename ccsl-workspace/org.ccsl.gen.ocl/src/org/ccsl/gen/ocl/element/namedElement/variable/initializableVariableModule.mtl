[comment encoding = UTF-8 /]
[module initializableVariableModule('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /] 
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule/]


[comment Type Check Conditions /]
[template public writeInitializableVariableTypecheckCondition(var: InitializableVariable, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(VariableDeclarationFragment) and (not [varname /].oclIsKindOf(UnresolvedItem)) 
[/template]

[template public writeInitialValueCondition(var: InitializableVariable, varname: String, metaclass: String) ? (var.mustWriteConditionFor('initialValue'))]
let [var.initialValue.getFieldName() /]: ASTNode = if not [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.fragments->oclIsUndefined() then
  [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.fragments->asOrderedSet()->last().initializer
else
  null
endif in
[var.initialValue.writeClosureToSkipParenthesis(var.initialValue.getFieldName(), 'ASTNode') /]
[var.generatesFieldCondition(var.initialValue, var.initialValue.getFieldName(), 'ASTNode') /]
[/template]