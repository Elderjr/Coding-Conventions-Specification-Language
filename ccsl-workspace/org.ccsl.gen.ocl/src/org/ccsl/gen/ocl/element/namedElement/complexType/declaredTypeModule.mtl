[comment encoding = UTF-8 /]
[module declaredTypeModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]

[template public writeDeclaredTypeTypecheckCondition(declaredType: DeclaredType, varname: String, typecheck: Boolean, metaclass: String) ? (typecheck)]
([varname /].oclIsKindOf(ClassDeclaration) or [varname /].oclIsKindOf(InterfaceDeclaration))
[/template]


[template public writeImportsCondition(declaredType: DeclaredType, varname: String) ? (declaredType.mustWriteConditionFor('imports'))]
let importedList: OrderedSet(ImportDeclaration) = 
  let matchedCompilationUnit: OrderedSet(CompilationUnit) = CompilationUnit.allInstances()->select(unit: CompilationUnit | unit.types->includes([varname /])) in
  if matchedCompilationUnit->size() > 0 then
    matchedCompilationUnit->asOrderedSet()->first().imports
  else
    null
  endif
in importedList <> null and
[declaredType.writeSetConditions('importedList', declaredType.imports, 'ImportDeclaration', CollectionKind::ANY) /]
[/template]


