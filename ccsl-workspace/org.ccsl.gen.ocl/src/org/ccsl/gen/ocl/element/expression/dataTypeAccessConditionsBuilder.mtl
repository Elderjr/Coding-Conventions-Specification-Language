[comment encoding = UTF-8 /]
[module dataTypeAccessConditionsBuilder('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]



[template public writeDataTypeAccessTypecheckCondition(typeAccess: DataTypeAccess, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(TypeAccess)
[/template]


[template public writeTypeCondition(typeAccess: DataTypeAccess, varname: String) ? (typeAccess.mustWriteConditionFor('datatype'))]
let [typeAccess.datatype.getFieldName() /]: ASTNode = [varname /].type in
[typeAccess.generatesFieldCondition(typeAccess.datatype, typeAccess.datatype.getFieldName(), 'ASTNode') /]
[/template]
