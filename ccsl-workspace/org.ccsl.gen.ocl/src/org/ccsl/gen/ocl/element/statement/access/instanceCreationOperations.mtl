[comment encoding = UTF-8 /]
[module instanceCreationOperations('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::elementUtils /]


[template public writeInstanceCreationTypecheckCondition(inst: InstanceCreation, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(ClassInstanceCreation)
[/template]

[template public writeTypeCondition(inst: InstanceCreation, varname: String) ? (inst.mustWriteConditionFor('type'))]
[inst.generatesMonovaluedFieldConditions(inst.type, varname, 'type.type', 'ASTNode') /]
[/template]

[template public writeArgsCondition(inst: InstanceCreation, varname: String, metaclass: String) ? (inst.mustWriteConditionFor('args'))]
let args: OrderedSet(ASTNode) = [varname /].arguments->collect(arg: ASTNode |
  arg->closure(v: ASTNode | if v.oclIsKindOf(ParenthesizedExpression) then
    v.oclAsType(ParenthesizedExpression).expression
  else
    v
  endif)
) in
[inst.generatesSetConditions('args', inst.args, 'ASTNode', inst.argsKind) /]
[/template]

