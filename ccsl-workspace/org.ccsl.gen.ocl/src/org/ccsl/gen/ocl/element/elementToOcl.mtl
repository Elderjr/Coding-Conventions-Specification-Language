[comment encoding = UTF-8 /]
[module elementToOcl('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::dispatchers::filterConditionsGeneratorDispatcher /]
[import org::ccsl::gen::ocl::dispatchers::getMatchingJavaMetaclassesDispatcher /]
[import org::ccsl::gen::ocl::dispatchers::generatesElementConditionsDispatcher /]

[template private generatesAllInstances(element: Element)]
[for (metaclassesTarget: String | element.getMatchingJavaMetaclasses()) separator('->union(')]
[metaclassesTarget /].allInstances()[if i <> 1])[/if][/for]
[/template]

[template private generatesFiltersConditions(filters: OrderedSet(Filter))]
[let filterConditions: Sequence(String) = filters.generatesFilterConditions()->select(s| s.isNotEmpty())]
[for(cond: String | filterConditions) separator(' and\n')]
[cond.printStringWithIdentation() /][/for][/let]
[/template]

[template public generatesSelectOCL(atomicRule: Context, element: Element, filters: OrderedSet(Filter))]
[let scopeConditions: String = element.generatesConditions(element.getUniqueOclName(), element.getMatchingJavaMetaclasses()->size() > 1)]
[let filtersConditions: String = filters->generatesFiltersConditions()]
[element.generatesAllInstances() /]->select([element.getUniqueOclName() /] |
  --Scope Conditions
  [if scopeConditions.isNotEmpty()]
  [scopeConditions.printStringWithIdentation() /] [if filtersConditions.isNotEmpty()] and

  [/if][/if]
  [if filtersConditions.isNotEmpty()]
  --Filters Conditions
  [filtersConditions.printStringWithIdentation() /]
  [/if]
)[for(Sequence(Integer){1 ..atomicRule.getTotalElementsDeclaredInExists()})])[/for][/let][/let]
[/template]

[template public generatesPostConditionToRemoveJavadocRelatedElements(element: Element)]
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
[/template]

[template public generatesPostConditionToRemoveNonSourceElements(element: Element)]
->reject(node: ASTNode | node.originalCompilationUnit.oclIsUndefined())
[/template]

[template public generatesPostConditionToRemoveNonSourceElements(element: DataTypeAccess)]
->reject(node: ASTNode | node.oclContainer().oclAsType(ASTNode).originalCompilationUnit.oclIsUndefined())
[/template]

[template public generatesPostConditionToSelectClosestContext(element: Element) /]

[template public generatesPostConditionToSelectClosestContext(element: DataTypeAccess)]
->select(ASTNode node | node.oclContainer())
[/template]
