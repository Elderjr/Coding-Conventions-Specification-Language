[comment encoding = UTF-8 /]
[module methodInvocationOperations('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::OclVariableNameGenerator /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::elementIdentifierService /]
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]

[query public getMethodInvocationMatchingMetaclasses(methodInv: MethodInvocation): OrderedSet(String)= 
  OrderedSet(String){'MethodInvocation'}
/]

[query public getMethodInvocationConditions(methodInv: MethodInvocation, varname: String, typecheck: Boolean): OrderedSet(String) =
OrderedSet(String) {
  methodInv.generatesMethodInvocationTypecheckConditions(varname, typecheck),
  methodInv.generatesConditionForTo(varname),
  methodInv.generatesConditionForArgs(varname),
  methodInv.generatesConditionForFrom(varname)
}
->select(s | s.trim().size() > 0)
/]

[query public getMethodInvocationConditions(methodInv: MethodInvocation, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let newVarname: String = varname.printVarname(typecheck, metaclass) in
OrderedSet(String) {
  methodInv.generatesMethodInvocationTypecheckConditions(varname, typecheck, metaclass),
  methodInv.generatesConditionForTo(newVarname, metaclass),
  methodInv.generatesConditionForFrom(newVarname, metaclass),
  methodInv.generatesConditionForArgs(newVarname, metaclass)
}->select(s | s.trim().size() > 0)
/]

[template public generatesMethodInvocationTypecheckConditions(methodInv: MethodInvocation, varname: String, typecheck: Boolean) ? (typecheck)]
([for (metaclass: String | methodInv.getMethodInvocationMatchingMetaclasses()) separator(' or ')]
[varname.printKindOfCondition(metaclass) /][/for])
[/template]

[template public generatesMethodInvocationTypecheckConditions(methodInv: MethodInvocation, varname: String, typecheck: Boolean, metaclass: String) ? (typecheck)]
[varname.printKindOfCondition(metaclass) /]
[/template]

[template public generatesConditionForTo(methodInv: MethodInvocation, varname: String) ? (not methodInv.elementAccessed.oclIsUndefined() and getElementsWithId()->includes(methodInv.elementAccessed))]
[methodInv.generatesMonovaluedFieldConditions(varname, methodInv.elementAccessed, 'method', 'OclAny', methodInv.getMethodInvocationMatchingMetaclasses()) /]
[/template]

[template public generatesConditionForTo(methodInv: MethodInvocation, varname: String, metaclass: String) ? (not methodInv.elementAccessed.oclIsUndefined() and getElementsWithId()->includes(methodInv.elementAccessed))]
[methodInv.generatesMonovaluedFieldConditions(varname, methodInv.elementAccessed, 'method', 'MethodDeclaration') /]
[/template]

[template public generatesConditionForFrom(methodInv: MethodInvocation, varname: String, metaclass: String) ? (methodInv.isSet('from'))]
[methodInv.generatesMonovaluedFieldConditions(varname, methodInv.from, 'expression', 'ASTNode', methodInv.getMethodInvocationMatchingMetaclasses()) /]
[/template]

[template public generatesConditionForFrom(methodInv: MethodInvocation, varname: String) ? (methodInv.isSet('from'))]
[methodInv.generatesMonovaluedFieldConditions(varname, methodInv.from, 'expression', 'ASTNode') /]
[/template]

[template public generatesConditionForArgs(methodInv: MethodInvocation, varname: String) ? (methodInv.isSet('args'))]
[methodInv.generatesMultivaluedFieldConditions(varname, methodInv.args, methodInv.getMethodInvocationMatchingMetaclasses(), methodInv.getOclName().concat('Args'), 'arguments', 'OclAny') /]
[/template]

[template public generatesConditionForArgs(methodInv: MethodInvocation, varname: String, metaclass: String) ? (methodInv.isSet('args'))]
[methodInv.generatesMultivaluedFieldConditions(varname, methodInv.args, methodInv.getOclName().concat('Args'), 'arguments', 'OclAny') /]
[/template]
