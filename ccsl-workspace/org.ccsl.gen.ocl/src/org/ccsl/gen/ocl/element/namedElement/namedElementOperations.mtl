[comment encoding = UTF-8 /]
[module namedElementOperations('http://www.example.org/ccsl/elements/namedElements')]
[import org::ccsl::gen::ocl::element::elementOperations /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]


[query public getNamedElementConditions(namedElement: NamedElement, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) = 
OrderedSet(String){
  namedElement.generatesConditionNamedElementForName(varname, metaclass)
}->select(s | s.trim().size() > 0)
->addAll(namedElement.getElementConditions(varname, typecheck, metaclass))
/]

[template public generatesConditionNamedElementForName(namedElement: NamedElement, varname: String, metaclass: String) ? (not namedElement.name.oclIsUndefined())]
[varname /].name = '[namedElement.name /]'
[/template]

[template public generatesConditionNamedElementForName(javaClass: JavaClass, varname: String, metaclass: String) ? ( (not javaClass.name.oclIsUndefined()) and (not javaClass.isMetaclassInMatchingMetaclasses(metaclass)) and  (javaClass.name.contains('.')))]
let className: String = if [varname /].oclIsKindOf(ClassDeclaration) then
  [varname /].oclAsType(ClassDeclaration).name
else if [varname /].oclIsKindOf(AnonymousClassDeclaration) then
  [varname /].oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).name
else
  null
endif endif in (not className.oclIsUndefined()) and
let classPackage: Package = if [varname /].oclIsKindOf(ClassDeclaration) then
  [varname /].oclAsType(ClassDeclaration).package
else if [varname /].oclIsKindOf(AnonymousClassDeclaration) then
  [varname /].oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).package
else
  null
endif endif in (not className.oclIsUndefined()) and
classPackage->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
  fullName.concat(p.name).concat('.')
).concat(className) = '[javaClass.name /]'
[/template]

[template public generatesConditionNamedElementForName(javaClass: JavaClass, varname: String, metaclass: String) ? ( (not javaClass.name.oclIsUndefined()) and (javaClass.name.contains('.')) and metaclass = 'ClassDeclaration')]
[varname /].package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
  fullName.concat(p.name).concat('.')
).concat([varname /].name) = '[javaClass.name /]'
[/template]

[template public generatesConditionNamedElementForName(interface: JavaInterface, varname: String, metaclass: String) ? ( (not interface.name.oclIsUndefined()) and (interface.name.contains('.')) )]
[varname /].oclAsType(InterfaceDeclaration).package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
  fullName.concat(p.name).concat('.')
).concat([varname /].oclAsType(NamedElement).name) = '[interface.name /]'
[/template]