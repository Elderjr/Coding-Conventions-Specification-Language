[comment encoding = UTF-8 /]
[module ancestorModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::stringUtils  /]
[import org::ccsl::gen::ocl::dispatchers::generatesElementConditionsDispatcher /]

[comment conditions for the ancestor /]
[query private isAncestorNotRegistered(element: Element): Boolean = 
  (not element.eContainer().oclIsUndefined()) and 
  (element.eContainer().oclIsKindOf(Element)) and 
  (not getElementsVisited()->includes(element.eContainer().oclAsType(Element)))
/]

[template public writeAncestorCondition(element: Element, varname: String, metaclass: String) ? (element.isAncestorNotRegistered() and not element.isClosureRelation(element.eContainer().oclAsType(Element)))]
[let ancestorVarname: String = element.eContainer().oclAsType(Element).getUniqueOclName()]
[let ancestorCondition: String = element.eContainer().oclAsType(Element).generatesConditions(ancestorVarname, true, 'OclAny')]
let [ancestorVarname /] : OclAny = [element.writeGetAncestorExpression(varname, metaclass) /] in [ancestorVarname /] <> null [if not ancestorCondition.isEmpty()]
and
[ancestorCondition.writeStr() /][/if][/let][/let]
[/template]

[comment get ancestor ocl expression/]
[template public writeGetAncestorExpression(element: Element, varname: String, metaclass: String)]
[varname /].oclContainer()
[/template]

[template public writeGetAncestorExpression(var: Variable, varname: String, metaclass: String)]
if [varname /].oclContainer() <> null then
  [varname /].oclContainer().oclContainer()
else
  null
endif
[/template]

[template public writeGetAncestorExpression(methodInv: MethodInvocation, varname: String, metaclass: String)]
if [varname /].oclContainer() <> null and [varname /].oclContainer().oclIsKindOf(ExpressionStatement) then
  [varname /].oclContainer().oclContainer()
else
  [varname /].oclContainer()
endif
[/template]