[comment encoding = UTF-8 /]
[module complexTypeOperations('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::dispatchers::generalElementWritterConditionsModule /]

[query public getComplexTypeMatchingMetaclasses(complexType: ComplexType): OrderedSet(String) = 
  OrderedSet(String){'ClassDeclaration', 'InterfaceDeclaration', 'AnonymousClassDeclaration'}
/]

[template public generatesComplexTypeTypecheckCondition(complexType: ComplexType, varname: String, typecheck: Boolean, metaclass: String) ? (typecheck and not complexType.getComplexTypeMatchingMetaclasses()->includes(metaclass))]
([for (metaclass: String | complexType.getComplexTypeMatchingMetaclasses()) separator(' or ')]
[varname.printKindOfCondition(metaclass) /][/for])
[/template]

[template public generatesBodyDeclarationVariable(complexType: ComplexType, varname: String, metaclass: String) ? (complexType.getComplexTypeMatchingMetaclasses()->includes(metaclass) and (complexType.mustWriteConditionFor('fields') or complexType.mustWriteConditionFor('methods')))]
let bodyDeclarations: OrderedSet(ASTNode) = [varname /].bodyDeclarations
[/template]

[template public generatesBodyDeclarationVariable(complexType: ComplexType, varname: String, metaclass: String) ? (not complexType.getComplexTypeMatchingMetaclasses()->includes(metaclass) and (complexType.mustWriteConditionFor('fields') or complexType.mustWriteConditionFor('methods')))]
let bodyDeclarations: OrderedSet(ASTNode) = if [varname /].oclIsKindOf(AbstractTypeDeclaration) then
  [varname /].oclAsType(AbstractTypeDeclaration).bodyDeclarations
else if [varname /].oclIsKindOf(AnonymousClassDeclaration) then
  [varname /].oclAsType(AnonymousClassDeclaration).bodyDeclarations
else
  null
endif endif in (not bodyDeclarations->oclIsUndefined())
[/template]

[template public generatesConditionForFields(complexType: ComplexType, varname: String, metaclass: String) ? (complexType.fields->size() > 0)]
let fields: OrderedSet(VariableDeclarationFragment) = bodyDeclarations->collect(field: ASTNode | if field.oclIsKindOf(FieldDeclaration) then
  field.oclAsType(FieldDeclaration).fragments
else
  null
endif
)->select(field: ASTNode | field <> null)->flatten() in
[complexType.generatesSetConditions('fields', complexType.fields, 'VariableDeclarationFragment') /]
[/template]

[template public generatesConditionForMethods(complexType: ComplexType, varname: String, metaclass: String) ? (complexType.methods->size() > 0)]
let methods: OrderedSet(MethodDeclaration) = bodyDeclarations->select(method: ASTNode | method.oclIsKindOf(MethodDeclaration)) in
[complexType.generatesSetConditions('methods', complexType.methods, 'MethodDeclaration') /]
[/template]



