[comment encoding = UTF-8 /]
[module complexTypeOperations('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::element::namedElement::namedElementOperations /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /] 
[import org::ccsl::gen::ocl::dispatchers::generatesElementConditionsDispatcher /]
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]

[query public getComplexTypeMatchingMetaclasses(complexType: ComplexType): OrderedSet(String) = 
  OrderedSet(String){'ClassDeclaration', 'InterfaceDeclaration', 'AnonymousClassDeclaration'}
/]

[query public getComplexTypeConditions(complexType: ComplexType, varname: String, typecheck: Boolean): OrderedSet(String) =
OrderedSet(String) {
  complexType.generatesComplexTypeTypecheckCondition(varname, typecheck),
  complexType.generatesConditionForFields(varname),
  complexType.generatesConditionForMethods(varname),
  complexType.generatesConditionForSuperTypes(varname)
}->addAll(complexType.getNamedElementConditions(varname, typecheck))
->select(s | s.trim().size() > 0)
/]

[query public getComplexTypeConditions(complexType: ComplexType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let newVarname: String = if typecheck then
  varname.printWithCast(metaclass)
else
  varname
endif in
OrderedSet(String) {
  complexType.generatesComplexTypeTypecheckCondition(varname, typecheck, metaclass),
  complexType.generatesConditionForFields(newVarname, metaclass),
  complexType.generatesConditionForMethods(newVarname, metaclass),
  complexType.generatesConditionForSuperTypes(varname)
}->addAll(complexType.getNamedElementConditions(newVarname, false, metaclass))
->select(s | s.trim().size() > 0)
/]

[template public generatesComplexTypeTypecheckCondition(complexType: ComplexType, varname: String, typecheck: Boolean) ? (complexType.oclIsTypeOf(ComplexType) and typecheck)]
([for (metaclass: String | complexType.getComplexTypeMatchingMetaclasses()) separator(' or ')]
[varname.printKindOfCondition(metaclass) /][/for])
[/template]

[template public generatesComplexTypeTypecheckCondition(complexType: ComplexType, varname: String, typecheck: Boolean, metaclass: String) ? (complexType.oclIsTypeOf(ComplexType) and typecheck)]
[varname.printKindOfCondition(metaclass) /]
[/template]

[template public generatesConditionForFields(complexType: ComplexType, varname: String, metaclass: String) ? (complexType.fields->size() > 0)]
[complexType.generatesMultivaluedFieldConditions(varname, complexType.fields, 'tmpFields', 'bodyDeclarations', 'OclAny') /]
[/template]

[template public generatesConditionForFields(complexType: ComplexType, varname: String) ? (complexType.fields->size() > 0)]
[complexType.generatesMultivaluedFieldConditions(varname, complexType.fields, 'tmpFields', 'bodyDeclarations', 'OclAny') /]
[/template]

[template public generatesConditionForMethods(complexType: ComplexType, varname: String, metaclass: String) ? (complexType.methods->size() > 0)]
[complexType.generatesMultivaluedFieldConditions(varname, complexType.methods, 'tmpMethods', 'bodyDeclarations', 'OclAny') /]
[/template]

[template public generatesConditionForMethods(complexType: ComplexType, varname: String) ? (complexType.methods->size() > 0)]
[complexType.generatesMultivaluedFieldConditions(varname, complexType.methods, 'tmpMethods', 'bodyDeclarations', 'OclAny') /]
[/template]

[template public generatesConditionForSuperTypes(complexType: ComplexType, varname: String) ? (complexType.superTypes->size() > 0 and complexType.oclIsTypeOf(JavaClass))]
let superType: ASTNode = if [varname /].oclIsKindOf(ClassDeclaration) then
  [varname /].oclAsType(ClassDeclaration).superClass.type
else if [varname /].oclIsKindOf(AnonymousClassDeclaration) then
  [varname /].oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type
else
  null
endif endif in (not superType.oclIsUndefined()) and
let [complexType.superTypes->first().getUniqueOclName() /]: ASTNode = superType in
[complexType.superTypes->first().generatesConditions(complexType.superTypes->first().getUniqueOclName(), true, 'ClassDeclaration') /]
[/template]
