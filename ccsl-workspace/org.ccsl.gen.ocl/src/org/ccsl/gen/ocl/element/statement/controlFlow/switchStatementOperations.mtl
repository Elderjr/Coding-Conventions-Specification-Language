[comment encoding = UTF-8 /]
[module switchStatementOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[query public getSwitchStatementMatchingMetaclasses(switch: SwitchStatement): OrderedSet(String) =
OrderedSet(String) {'SwitchStatement'}
/]

[query public getSwitchStatementConditions(switch: SwitchStatement, varname: String, typecheck: Boolean): OrderedSet(String) =
let newVarname: String = varname.printVarname(typecheck, 'SwitchStatement') in
let conditions: OrderedSet(String) = OrderedSet(String){
''}->select(s: String | s.trim().size() > 0) in
if typecheck then
  OrderedSet(String){varname.printKindOfCondition('SwitchStatement')}->addAll(conditions)
else
  conditions
endif
/]


[query public getSwitchCaseBlockMatchingMetaclasses(switchBlock: SwitchCaseBlock): OrderedSet(String) =
OrderedSet(String) {'SwitchStatement'}
/] 

[query public getSwitchCaseBlockConditions(switchBlock: SwitchCaseBlock, varname: String, typecheck: Boolean): OrderedSet(String) =
let newVarname: String = varname.printVarname(typecheck, 'SwitchStatement') in
OrderedSet(String){
  switchBlock.generatesSwitchCaseBlockTypecheckCondition(varname, typecheck),
  switchBlock.generatesConditionsForStatements(newVarname)
}->select(s: String | s.trim().size() > 0)
/]

[template private generatesSwitchCaseBlockTypecheckCondition(switchBlock: SwitchCaseBlock, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(SwitchStatement)
[/template]

[template private generatesConditionsForStatements(switchBlock: SwitchCaseBlock, varname: String)]
let [switchBlock.getUniqueOclName() /]Blocks: OrderedSet(OrderedSet(Statement)) = [varname /].statements->iterate(tmpStmt: Statement; acc: OrderedSet(OrderedSet(Statement)) = OrderedSet(OrderedSet(Statement)){} |
	if(tmpStmt.oclIsKindOf(SwitchCase)) then
	  acc->append(OrderedSet(Statement){tmpStmt})
	else 
	  let lastSetAcc: OrderedSet(Statement) = acc->last()->append(tmpStmt) in
	  acc->excluding(acc->last())->including(lastSetAcc)
	endif
) in
[switchBlock.getUniqueOclName() /]Blocks->exists(switchBlockCaseTmp: OrderedSet(Statement) | [switchBlock.addElementExistsDeclaration() /]
[switchBlock.generatesMultivaluedFieldConditions('switchBlockCaseTmp', switchBlock.statements, 'ASTNode') /]
[/template]
