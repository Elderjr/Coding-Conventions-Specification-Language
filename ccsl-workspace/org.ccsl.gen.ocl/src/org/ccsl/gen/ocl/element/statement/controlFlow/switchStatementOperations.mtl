[comment encoding = UTF-8 /]
[module switchStatementOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]




[template public generatesSwitchCaseBlockTypecheckCondition(switchBlock: SwitchCaseBlock, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(SwitchStatement)
[/template]

[template public generatesConditionsForStatements(switchBlock: SwitchCaseBlock, varname: String)]
let [switchBlock.getUniqueOclName() /]Blocks: OrderedSet(OrderedSet(Statement)) = [varname /].statements->iterate(tmpStmt: Statement; acc: OrderedSet(OrderedSet(Statement)) = OrderedSet(OrderedSet(Statement)){} |
	if(tmpStmt.oclIsKindOf(SwitchCase)) then
	  acc->append(OrderedSet(Statement){tmpStmt})
	else 
	  let lastSetAcc: OrderedSet(Statement) = acc->last()->append(tmpStmt) in
	  acc->excluding(acc->last())->including(lastSetAcc)
	endif
) in
[switchBlock.getUniqueOclName() /]Blocks->exists(switchBlockCaseTmp: OrderedSet(Statement) | [switchBlock.addElementExistsDeclaration() /]
[switchBlock.generatesSetConditions('switchBlockCaseTmp', switchBlock.statements, 'ASTNode')/]
[/template]
