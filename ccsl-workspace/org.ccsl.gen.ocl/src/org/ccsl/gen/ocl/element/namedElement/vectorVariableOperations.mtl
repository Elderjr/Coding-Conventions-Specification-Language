[comment encoding = UTF-8 /]
[module vectorVariableOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::element::namedElement::variableOperations /]
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]



[query public getVectorVariableConditions(var: VariableVector, varname: String, typecheck: Boolean): OrderedSet(String) = 
OrderedSet(String){
  var.generatesConditionsForDimensions(varname)
}->addAll(var.getVariableConditions(varname, typecheck))
->select(s | s.trim().size() > 0)
/]

[query public getVectorVariableConditions(var: VariableVector, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let newVarname: String = varname.printVarname(typecheck, metaclass) in
let conditions: OrderedSet(String) = OrderedSet(String){
  var.generatesConditionsForDimensions(varname, metaclass)
}->addAll(var.getVariableConditions(varname, typecheck))
->select(s | s.trim().size() > 0) in
if typecheck then
  OrderedSet(String){varname.printKindOfCondition(metaclass)}->addAll(conditions)
else
  conditions
endif
/]

[template public generatesConditionsForDimensions(var: VariableVector, varname: String)]
[var.generatesLetIfObject(varname, 'extraArrayDimensions', var.getVariableMatchingJavaMetaclasses(), 'tmpDimensions', 'Integer') /] and
[if var.isSet('dimensions')]
tmpDimensions[if not var.exact ]>[/if]= [var.dimensions /][else]tmpDimensions >= 1[/if]
[/template]

[template public generatesConditionsForDimensions(var: VariableVector, varname: String, metaclass: String)]
[if var.isSet('dimensions')]
[varname /].extraArrayDimensions [if not var.exact ]>[/if]= [var.dimensions /][else]
[varname /].extraArrayDimensions >= 1[/if]
[/template]