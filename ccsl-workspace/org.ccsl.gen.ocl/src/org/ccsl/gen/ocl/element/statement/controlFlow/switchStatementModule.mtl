[comment encoding = UTF-8 /]
[module switchStatementModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]




[template public writeSwitchStatementTypecheckCondition(switchStmt: SwitchStatement, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(SwitchStatement)
[/template]


[template public writeCasesCondition(switchStmt: SwitchStatement, varname: String) ? (switchStmt.mustWriteConditionFor('cases')) {
  cases: String = switchStmt.getUniqueOclName().concat('_cases');
}]
let [cases /]: OrderedSet(OrderedSet(Statement)) = [varname /].statements->select(stmt | stmt.oclIsKindOf(SwitchCase)) in
[switchStmt.writeSetConditions(cases, switchStmt.cases, 'ASTNode', CollectionKind::ANY) /]
[/template]

