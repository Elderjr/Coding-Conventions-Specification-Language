[comment encoding = UTF-8 /]
[module switchStatementModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]




[template public writeSwitchStatementTypecheckCondition(switchStmt: SwitchStatement, varname: String, typecheck: Boolean, metaclass: String) ? (typecheck)]
[varname /].oclIsKindOf(SwitchStatement)
[/template]


[template public writeCasesCondition(switchStmt: SwitchStatement, varname: String, metaclass: String) ? (switchStmt.mustWriteConditionFor('cases'))]
let casesBlocks: OrderedSet(OrderedSet(Statement)) = [varname /].statements->iterate(tmpStmt: Statement; acc: OrderedSet(OrderedSet(Statement)) = OrderedSet(OrderedSet(Statement)){} |
	if(tmpStmt.oclIsKindOf(SwitchCase)) then
	  acc->append(OrderedSet(Statement){tmpStmt})
	else 
	  let lastSetAcc: OrderedSet(Statement) = acc->last()->append(tmpStmt) in
	  acc->excluding(acc->last())->including(lastSetAcc)
	endif
) in casesBlocks->size() > 1 and
[switchStmt.generatesSetConditions('casesBlocks', switchStmt.cases, 'OrderedSet(Statement)') /]
[/template]

