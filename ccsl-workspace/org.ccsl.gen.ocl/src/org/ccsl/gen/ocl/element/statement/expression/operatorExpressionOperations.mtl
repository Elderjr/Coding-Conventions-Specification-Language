[comment encoding = UTF-8 /]
[module operatorExpressionOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::element::statement::statementOperations /]
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]

[query public getOperatorExpressionMatchingJavaMetaclasses(operatorExpression: OperatorExpression): OrderedSet(String)=
  OrderedSet(String){'InfixExpression', 'PrefixExpression'}
/]

[query public getOperatorExpressionConditions(operatorExpression: OperatorExpression, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) = 
OrderedSet(String){
  operatorExpression.writeOperatorExpressionTypecheckCondition(varname, typecheck, metaclass),
  operatorExpression.writeOperandsCondition(varname, metaclass)
}->select(s | s.isNotEmpty())
->addAll(operatorExpression.getStatementConditions(varname, false, metaclass))

/]

[template public writeOperatorExpressionTypecheckCondition(operatorExpression: OperatorExpression, varname: String, typecheck: Boolean, metaclass: String) ? (typecheck)]
([varname /].oclIsKindOf(InfixExpression) or [varname /].oclIsKindOf(PrefixExpression)) 
[/template]

[template private writeOperandsCondition(booleanExp: OperatorExpression, varname: String, metaclass: String) /]

[template public writeGetOperands(opExpression: OperatorExpression, varname: String, metaclass: String)]
if [varname /].oclIsKindOf(PrefixExpression) then
  [varname /].oclAsType(PrefixExpression).operand
else if [varname /].oclIsKindOf(InfixExpression) then
  [varname /].oclAsType(InfixExpression).extendedOperands->append([varname /].oclAsType(InfixExpression).leftOperand)->append([varname /].oclAsType(InfixExpression.rightOperand))
else
  null
endif endif
[/template]

[comment ======= Boolean Expression Operands conditions ======= /]
[template private writeOperandsCondition(booleanExp: BooleanExpression, varname: String, metaclass: String) ? (booleanExp.mustWriteConditionFor('operands'))]
let operands: OrderedSet(ASTNode) =  [booleanExp.writeGetOperands(varname, metaclass) /] in operands <> null and
[booleanExp.generatesSetConditions('operands', booleanExp.operands, 'ASTNode') /]
[/template]
