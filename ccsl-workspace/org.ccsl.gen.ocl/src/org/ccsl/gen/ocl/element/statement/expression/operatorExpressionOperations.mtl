[comment encoding = UTF-8 /]
[module operatorExpressionOperations('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]


[template public writeOperatorExpressionTypecheckCondition(operatorExpression: OperatorExpression, varname: String, typecheck: Boolean, metaclass: String) ? (typecheck)]
([varname /].oclIsKindOf(InfixExpression) or [varname /].oclIsKindOf(PrefixExpression)) 
[/template]

[comment Write get operands for OperatorExpression metaclass /]
[template public writeGetOperands(opExpression: OperatorExpression, varname: String, metaclass: String)]
if [varname /].oclIsKindOf(PrefixExpression) then
  [varname /].oclAsType(PrefixExpression).operand->asOrderedSet()
elseif [varname /].oclIsKindOf(PostfixExpression) then
  [varname /].oclAsType(PostfixExpression).operand->asOrderedSet()
elseif [varname /].oclIsKindOf(InfixExpression) then
  [varname /].oclAsType(InfixExpression).extendedOperands->append([varname /].oclAsType(InfixExpression).leftOperand)->append([varname /].oclAsType(InfixExpression).rightOperand)
else
  null
endif
[/template]

[comment Write operands condition for OperatorExpression meatclass /]
[template public writeOperandsCondition(booleanExp: OperatorExpression, varname: String, metaclass: String) ? (booleanExp.mustWriteConditionFor('operands'))]
let operands: OrderedSet(ASTNode) =  [booleanExp.writeGetOperands(varname, metaclass) /] in operands <> null and
[booleanExp.generatesSetConditions('operands', booleanExp.operands, 'ASTNode') /]
[/template]

[comment ======= String Concatenation Operands conditions ======= /]
[template public writeGetOperands(strConcat: StringConcatenation, varname: String, metaclass: String)]
if [varname /].oclIsKindOf(Assignment) then
  [varname /].oclAsType(Assignment).rightHandSide->asOrderedSet()
else if [varname /].oclIsKindOf(InfixExpression) then
  [varname /].oclAsType(InfixExpression).extendedOperands->append([varname /].oclAsType(InfixExpression).leftOperand)->append([varname /].oclAsType(InfixExpression).rightOperand)
else
  null
endif endif
[/template]

[template public writeOperandsCondition(strConcat: StringConcatenation, varname: String, metaclass: String) ? (strConcat.mustWriteConditionFor('operands'))]
let operands: OrderedSet(ASTNode) =  [strConcat.writeGetOperands(varname, metaclass) /] in operands <> null and
[strConcat.generatesSetConditions('operands', strConcat.operands, 'ASTNode') /]
[/template]
