[comment encoding = UTF-8 /]
[module instanceCreationOperations('http://www.example.org/ccsl')]


[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]


[query public getInstanceCreationMatchingMetaclasses(inst: InstanceCreation): OrderedSet(String)=
  OrderedSet(String){'ClassInstanceCreation'}
/]

[query public getInstanceCreationConditions(inst: InstanceCreation, varname: String, typecheck: Boolean): OrderedSet(String) =
let newVarname: String = varname.printVarname(typecheck, 'ClassInstanceCreation') in
OrderedSet(String) {
  inst.generatesConditionForTypecheck(varname, typecheck),
  inst.generatesConditionsForType(newVarname)
}
->select(s | s.isNotEmpty())
/]

[template private generatesConditionForTypecheck(inst: InstanceCreation, varname: String, typecheck: Boolean) ? (typecheck)]
[varname /].oclIsKindOf(ClassInstanceCreation)
[/template]

[template private generatesConditionsForType(inst: InstanceCreation, varname: String) ? (not inst.type.oclIsUndefined())]
[inst.generatesMonovaluedFieldConditions(inst.type, varname, 'type.type', 'ASTNode') /]
[/template]

