[comment encoding = UTF-8 /]
[module variableDeclarationOperations('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::element::elementOperations /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::dispatchers::generatesElementConditionsDispatcher /]
[import org::ccsl::gen::ocl::commom::genericFieldConditionsGenerator /]

[query public getVariableDeclarationMatchingJavaMetaclasses(varDecl: VarDeclaration): OrderedSet(String)=
  OrderedSet(String){'SingleVariableDeclaration', 'VariableDeclarationFragment'}
/]

[query public getVariableDeclarationConditions(varDecl: VarDeclaration, varname: String, typecheck: Boolean): OrderedSet(String) =
OrderedSet(String){
  varDecl.generatesConditionForVariable(varname, typecheck)
}->select(s | s.trim().size() > 0)
/]

[query public getVariableDeclarationConditions(varDecl: VarDeclaration, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
if typecheck then
  OrderedSet(String){varname.printKindOfCondition(metaclass)}->addAll(varDecl.getVariableDeclarationConditions(varname.printWithCast(metaclass), false))
else
  varDecl.getVariableDeclarationConditions(varname, false)
endif
/]


[template public generatesConditionForVariable(varDecl: VarDeclaration, varname: String, typecheck: Boolean) ? ((not varDecl.variable.oclIsUndefined()) and varDecl.getVariableDeclarationMatchingJavaMetaclasses()->size() = 1)]
[varDecl.variable.generatesConditions(varname, typecheck, 'VariableDeclarationFragment') /]
[/template]