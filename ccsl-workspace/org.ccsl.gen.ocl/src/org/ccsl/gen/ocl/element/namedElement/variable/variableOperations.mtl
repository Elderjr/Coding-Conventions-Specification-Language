[comment encoding = UTF-8 /]
[module variableOperations('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /] 
[import org::ccsl::gen::ocl::commom::fieldWritterConditionsModule/]

[comment Type Check Conditions /]
[template public writeVariableTypecheckCondition(var: Variable, varname: String, typecheck: Boolean) ? (typecheck)]
([varname /].oclIsKindOf(VariableDeclarationFragment) or [varname /].oclIsKindOf(SingleVariableDeclaration)) and (not [varname /].oclIsKindOf(UnresolvedItem)) 
[/template]

[comment Generic condition for getting type of a variable /]
[template public writeTypeCondition(var: Variable, varname: String, metaclass: String) ? (var.mustWriteConditionFor('type') and not var.isMetaclassInMatchingMetaclasses(metaclass))]
let [var.type.getFieldName() /]: ASTNode = if [varname /].oclIsKindOf(SingleVariableDeclaration) and [varname /].oclAsType(SingleVariableDeclaration).type <> null then
  [varname /].oclAsType(SingleVariableDeclaration).type.type
elseif [varname /].oclIsKindOf(VariableDeclarationFragment) and [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.type <> null then
  [varname /].oclAsType(VariableDeclarationFragment).variablesContainer.type.type
else
  null
endif in
[var.generatesFieldCondition(var.type, var.type.getFieldName(), 'ASTNode') /]
[/template]

[comment Condition for getting type of a variable of VariableDeclarationFragment metaclass /]
[template public writeTypeCondition(var: Variable, varname: String, metaclass: String) ? (var.mustWriteConditionFor('type') and metaclass = 'VariableDeclarationFragment')]
[varname /].variablesContainer.type <> null and
[var.generatesMonovaluedFieldConditions(var.type, varname, 'variablesContainer.type.type', 'ASTNode') /]
[/template]

[comment Condition for getting type of a variable of SingleVariableDeclaration metaclass /]
[template public writeTypeCondition(var: Variable, varname: String, metaclass: String) ? (var.mustWriteConditionFor('type') and metaclass = 'SingleVariableDeclaration')]
[varname /].type <> null and
[var.generatesMonovaluedFieldConditions(var.type, varname, 'type.type', 'ASTNode') /]
[/template]