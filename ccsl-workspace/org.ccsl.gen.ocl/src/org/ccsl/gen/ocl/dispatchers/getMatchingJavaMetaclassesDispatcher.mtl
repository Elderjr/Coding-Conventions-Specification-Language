[comment encoding = UTF-8 /]
[module getMatchingJavaMetaclassesDispatcher('http://www.example.org/ccsl')]

[comment element/datatype /]
[import org::ccsl::gen::ocl::element::datatype::objectTypeOperations /]
[import org::ccsl::gen::ocl::element::datatype::parameterizedTypeOperations /]
[import org::ccsl::gen::ocl::element::datatype::arrayTypeOperations /]

[comment element/namedElements /]
[import org::ccsl::gen::ocl::element::namedElement::methodOperations /]
[import org::ccsl::gen::ocl::element::namedElement::complexTypeOperations /]
[import org::ccsl::gen::ocl::element::namedElement::variableOperations /]
[import org::ccsl::gen::ocl::element::namedElement::javaClassOperations /]
[import org::ccsl::gen::ocl::element::namedElement::interfaceOperations /]
[import org::ccsl::gen::ocl::element::namedElement::vectorVariableOperations /]

[comment statements /]
[import org::ccsl::gen::ocl::element::statement::statementOperations /]
[import org::ccsl::gen::ocl::element::statement::literalValueOperations /]
[import org::ccsl::gen::ocl::element::statement::methodInvocationOperations /]
[import org::ccsl::gen::ocl::element::statement::instanceCreationOperations /]
[import org::ccsl::gen::ocl::element::statement::arrayCreationOperations /]
[import org::ccsl::gen::ocl::element::statement::access::dataTypeAccessOperations /]
[import org::ccsl::gen::ocl::element::statement::blockOperations /]
[import org::ccsl::gen::ocl::element::statement::varAssignmentModule /]
[import org::ccsl::gen::ocl::element::statement::access::accessModule /]

[comment statements/controlFlow /]
[import org::ccsl::gen::ocl::element::statement::controlFlow::switchStatementOperations /]
[import org::ccsl::gen::ocl::element::statement::controlFlow::ifStatementOperations /]
[import org::ccsl::gen::ocl::element::statement::controlFlow::loopStatementModule /]

[comment statements/expression /]
[import org::ccsl::gen::ocl::element::statement::expression::infixExpressionOperations /]

[comment statements/tryCatch /]
[import org::ccsl::gen::ocl::element::statement::tryCatch::catchBlockModule /] 

[query public getGenericMatchingJavaMetaclass(element: Element): String =
  if element.getMatchingJavaMetaclasses()->size() = 1 then
     element.getMatchingJavaMetaclasses()->first()
  else
    'ASTNode'
  endif
/]
[query public getMatchingJavaMetaclasses (element : Element) : OrderedSet(String) =
--element/datatype
if element.oclIsTypeOf(ObjectType) then 
  element.oclAsType(ObjectType).getObjectTypeMatchingMetaclasses()
else if element.oclIsTypeOf(ParameterizedType) then
  element.oclAsType(ParameterizedType).getParameterizedTypeMatchingMetaclasses()
else if element.oclIsTypeOf(ArrayType) then
  element.oclAsType(ArrayType).getArrayTypeMatchingMetaclasses()
--element/namedElements
else if element.oclIsTypeOf(Method) then
  element.oclAsType(Method).getMethodMatchingJavaMetaclasses()
else if element.oclIsTypeOf(ComplexType) then
  element.oclAsType(ComplexType).getComplexTypeMatchingMetaclasses()
else if element.oclIsTypeOf(JavaClass) then
  element.oclAsType(JavaClass).getJavaClassMatchingMetaclasses()
else if element.oclIsTypeOf(JavaInterface) then
  element.oclAsType(JavaInterface).getInterfaceMatchingMetaclasses()
else if element.oclIsKindOf(Variable) then
  element.oclAsType(Variable).getVariableMatchingJavaMetaclasses()
--element/statements
else if element.oclIsTypeOf(Statement) then
  element.oclAsType(Statement).getStatementMatchingMetaclasses()
else if element.oclIsKindOf(LiteralValue) then
  element.oclAsType(LiteralValue).getLiteralMatchingMetaclasses()
else if element.oclIsTypeOf(MethodInvocation) then
  element.oclAsType(MethodInvocation).getMethodInvocationMatchingMetaclasses()
else if element.oclIsTypeOf(InstanceCreation) then
  element.oclAsType(InstanceCreation).getInstanceCreationMatchingMetaclasses()
else if element.oclIsTypeOf(ArrayCreation) then
  element.oclAsType(ArrayCreation).getArrayCreationMatchingMetaclasses()
else if element.oclIsTypeOf(DataTypeAccess) then
  element.oclAsType(DataTypeAccess).getTypeAccessMatchingMetaclasses()
else if element.oclIsTypeOf(Block) then
  element.oclAsType(Block).getBlockMatchingMetaclasses()
else if element.oclIsTypeOf(VarAssignment) then
  element.oclAsType(VarAssignment).getVariableAssignmentMatchingJavaMetaclasses()
--element/statements/access
else if element.oclIsTypeOf(Access) then
  element.oclAsType(Access).getAccessMatchingMetaclasses()
--element/statements/controlFow
else if element.oclIsTypeOf(SwitchStatement) then
  element.oclAsType(SwitchStatement).getSwitchStatementMatchingMetaclasses()
else if element.oclIsTypeOf(SwitchCaseBlock) then
  element.oclAsType(SwitchCaseBlock).getSwitchCaseBlockMatchingMetaclasses()
else if element.oclIsTypeOf(IfStatement) then
  element.oclAsType(IfStatement).getIfStatementMatchingMetaclasses()
else if element.oclIsTypeOf(LoopStatement) then
  element.oclAsType(LoopStatement).getLoopStatementMatchingMetaclasses()
--element/statements/expression
else if element.oclIsTypeOf(InfixExpression) then
  element.oclAsType(InfixExpression).getInfixMatchingMetaclasses()
--element/statements/tryCatch
else if element.oclIsTypeOf(CatchBlock) then
  element.oclAsType(CatchBlock).getCatchBlockMatchingMetaclasses()
else
  OrderedSet(String){'FIX GETTING MATCHING JAVA METACLASSES FOR CLASS '.concat(element.eClass().toString())}
endif endif endif endif endif endif endif endif endif endif endif endif
endif endif endif endif endif endif endif endif endif endif endif
/]
