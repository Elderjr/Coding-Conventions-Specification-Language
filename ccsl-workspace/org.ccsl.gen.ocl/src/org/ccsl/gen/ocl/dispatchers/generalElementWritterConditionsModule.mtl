[comment encoding = UTF-8 /]
[module generalElementWritterConditionsModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils/]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::elementUtils /]

[comment element /]
[import org::ccsl::gen::ocl::element::elementOperations /]
[import org::ccsl::gen::ocl::element::ancestorModule /]

[comment element/datatype /]
[import org::ccsl::gen::ocl::element::datatype::objectTypeOperations /]
[import org::ccsl::gen::ocl::element::datatype::parameterizedTypeOperations /]
[import org::ccsl::gen::ocl::element::datatype::arrayTypeOperations /]
[import org::ccsl::gen::ocl::element::datatype::primitiveTypeOperations /]

[comment element/namedElements /]
[import org::ccsl::gen::ocl::element::namedElement::namedElementOperations /]
[import org::ccsl::gen::ocl::element::namedElement::methodOperations /]
[import org::ccsl::gen::ocl::element::namedElement::complexTypeOperations /]
[import org::ccsl::gen::ocl::element::namedElement::variableOperations /]
[import org::ccsl::gen::ocl::element::namedElement::javaClassOperations /]
[import org::ccsl::gen::ocl::element::namedElement::interfaceOperations /]

[comment statements /]
[import org::ccsl::gen::ocl::element::statement::statementOperations /]
[import org::ccsl::gen::ocl::element::statement::literalValueOperations /]
[import org::ccsl::gen::ocl::element::statement::instanceCreationOperations /]
[import org::ccsl::gen::ocl::element::statement::arrayCreationOperations /]
[import org::ccsl::gen::ocl::element::statement::blockOperations /]
[import org::ccsl::gen::ocl::element::statement::synchronizedBlockModule /]
[import org::ccsl::gen::ocl::element::statement::varAssignmentModule /]

[comment statements/access /]
[import org::ccsl::gen::ocl::element::statement::throwStatementModule /]
[import org::ccsl::gen::ocl::element::statement::access::accessModule /]
[import org::ccsl::gen::ocl::element::statement::access::methodInvocationOperations /]
[import org::ccsl::gen::ocl::element::statement::access::variableAccessModule /]
[import org::ccsl::gen::ocl::element::statement::access::dataTypeAccessOperations /]

[ comment statements/controlFlow /]
[import org::ccsl::gen::ocl::element::statement::controlFlow::switchStatementOperations /]
[import org::ccsl::gen::ocl::element::statement::controlFlow::ifStatementOperations /]
[import org::ccsl::gen::ocl::element::statement::controlFlow::loopStatementModule /]

[comment statements/expression /]
[import org::ccsl::gen::ocl::element::statement::expression::operatorExpressionOperations /]
[import org::ccsl::gen::ocl::element::statement::expression::booleanExpressionModule /]
[import org::ccsl::gen::ocl::element::statement::expression::arithmeticExpressionModule /]
[import org::ccsl::gen::ocl::element::statement::expression::stringConcatenationOperations /]

[ comment statements/tryCatch /]
[import org::ccsl::gen::ocl::element::statement::tryCatch::catchBlockModule /]

[template private writeAllConditions(conditions: OrderedSet(String))]
[for (condition: String | conditions->select(s | s.isNotEmpty())) separator(' and\n')]
[condition.writeStr() /][/for]
[/template]

[comment queries to get element conditions /]
[query public getElementConditions(element: Element, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
OrderedSet(String){
  element.writeAncestorCondition(varname, metaclass),
  element.writePropertiesCondition(varname, element.oclAsType(CodeElement).properties)
}
/]


[query public getDataTypeConditions(dataType: DataType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
OrderedSet(String){
  ''
}->addAll(dataType.getElementConditions(dataType, varname, false, metaclass))
/]


[query public getObjectTypeConditions(objType: ObjectType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
OrderedSet(String){
  objType.writeObjectTypeTypecheckConditions(varname, typecheck, metaclass)
}->addAll(objType.getDataTypeConditions(objType, varname, false, metaclass))
/]

[query public getParameterizedTypeConditions(parameterizedType: ParameterizedType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = parameterizedType.addElementAsVisited(metaclass) in
let completeVarname: String = parameterizedType.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = parameterizedType.getConcreteElementMetaclass(metaclass) in
OrderedSet(String) {
  parameterizedType.writeParameterizedTypecheck(varname, typecheck),
  parameterizedType.writeTypeParametersConditions(completeVarname),
  parameterizedType.writeTypeConditions(completeVarname)
}->addAll(parameterizedType.getObjectTypeConditions(varname, false, concreteMetaclass))
/]

[query public getArrayTypeConditions(arrayType: ArrayType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let newVarname: String = varname.printVarname(typecheck, 'ArrayType') in
OrderedSet(String) {
  arrayType.generatesArraTypeTypecheckCondition(varname, typecheck),
  arrayType.generatesConditionsForType(newVarname)
}->addAll(arrayType.getObjectTypeConditions(varname, false, metaclass))
/]

[query public getPrimitiveTypeConditions(primitiveType: PrimitiveType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
OrderedSet(String){
  primitiveType.writePrimitiveTypecheckCondition(varname)
}->addAll(primitiveType.getDataTypeConditions(primitiveType, varname, false, metaclass))
/]

[query public getNamedElementConditions(namedElement: NamedElement, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
 OrderedSet(String){
  namedElement.writeNameCondition(varname, metaclass)
}->select(s | s.trim().size() > 0)
->addAll(namedElement.getElementConditions(varname, typecheck, metaclass))
/]

[query public getComplexTypeConditions(complexType: ComplexType, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = complexType.addElementAsVisited() in
let completeVarname: String = complexType.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = complexType.getConcreteElementMetaclass(metaclass) in
OrderedSet(String) {
  complexType.generatesComplexTypeTypecheckCondition(varname, typecheck, concreteMetaclass),
  complexType.generatesBodyDeclarationVariable(completeVarname, concreteMetaclass),
  complexType.generatesConditionForFields(completeVarname, concreteMetaclass),
  complexType.generatesConditionForMethods(completeVarname, concreteMetaclass),
  complexType.generatesConditionForSuperTypes(completeVarname, concreteMetaclass)
}->addAll(complexType.getNamedElementConditions(completeVarname, false, concreteMetaclass))
->select(s | s.trim().size() > 0)
/]

[query public getInterfaceConditions(interface: JInterface, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = interface.addElementAsVisited() in
OrderedSet(String) {
  interface.generatesClassTypecheckCondition(varname, typecheck)
}->select(cond | cond.isNotEmpty())
->addAll(interface.getComplexTypeConditions(varname, typecheck, metaclass))
/]

[query public getJavaClassConditions(javaClass: JClass, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = javaClass.addElementAsVisited() in
let completeVarname: String = javaClass.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = javaClass.getConcreteElementMetaclass(metaclass) in 
OrderedSet(String) {
  javaClass.generatesClassTypecheckCondition(varname, typecheck, metaclass),
  javaClass.generatesConditionsForImplements(completeVarname)
}->select(cond | cond.isNotEmpty())
->addAll(javaClass.getComplexTypeConditions(completeVarname, false, concreteMetaclass))
/]

[query public getMethodConditions(method: Method, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = method.addElementAsVisited(metaclass) in
let completeVarname: String = method.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = method.getConcreteElementMetaclass(metaclass) in
OrderedSet(String) {
  method.writeMethodTypecheckCondition(varname, typecheck),
  method.writeReturnTypeCondition(completeVarname),
  method.writeParamsCondition(completeVarname, typecheck)
}->addAll(method.getNamedElementConditions(completeVarname, typecheck, concreteMetaclass))
->select(s | s.trim().size() > 0)
/]

[query public getVariableConditions(var: Variable, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = var.addElementAsVisited(metaclass) in
let completeVarname: String = var.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = var.getConcreteElementMetaclass(metaclass) in
OrderedSet(String) {
  var.writeVariableTypecheckCondition(varname, typecheck),
  var.writeSkipUnresolvedItemCondition(varname),
  var.writeTypeCondition(completeVarname, concreteMetaclass),
  var.writeInitialValueCondition(completeVarname, concreteMetaclass)
}->select(s | s.trim().size() > 0)
->addAll(var.getNamedElementConditions(completeVarname, false, concreteMetaclass))
/]

[query public getArrayCreationConditions(inst: ArrayCreation, varname: String, typecheck: Boolean): OrderedSet(String) =
let newVarname: String = varname.printVarname(typecheck, 'ArrayCreation') in
OrderedSet(String) {
  inst.generatesArrayCreationTypecheckCondition(varname, typecheck),
  inst.generatesConditionsForType(newVarname)
}->select(cond | cond.isNotEmpty())
/]

[query public getBlockConditions(block: Block, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let newVarname: String = varname.printVarname(typecheck, 'Block') in
OrderedSet(String) {
  block.generatesBlockTypecheckConditions(varname, typecheck),
  block.generatesConditionsForStatements(newVarname)
}->select(s: String | s.isNotEmpty())
->addAll(block.getElementConditions(newVarname, false, metaclass))
/]

[query public getInstanceCreationConditions(inst: InstanceCreation, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = inst.addElementAsVisited(metaclass) in
let concreteMetaclass: String = inst.getConcreteElementMetaclass(metaclass) in
let completeVarname: String = inst.getCompleteElementVarname(varname, metaclass) in
OrderedSet(String) {
  inst.writeInstanceCreationTypecheckCondition(varname, typecheck),
  inst.writeTypeCondition(completeVarname)
}
->select(s | s.isNotEmpty())
/]

[query public getLiteralConditions(literal: LiteralValue, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) = 
let void: OclVoid = literal.addElementAsVisited() in
OrderedSet(String) {
  literal.generatesLiteralValueTypecheckCondition(varname, typecheck),
  literal.generatesConditionForValue(varname, typecheck)
}
->select(s | s.trim().size() > 0)
->addAll(literal.getStatementConditions(varname, false, metaclass))
/]

[query public getStatementConditions(stmt: Statement, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = stmt.addElementAsVisited() in
OrderedSet(String) {
  stmt.generatesStatementTypecheckConditions(varname, typecheck)
}->select(s: String | s.isNotEmpty())
->addAll(stmt.getElementConditions(varname, false, metaclass))
/]

[query public getSynchronizedBlockConditions(block: SynchronizedBlock, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let newVarname: String = varname.printVarname(typecheck, 'Block') in
OrderedSet(String) {
  block.writeSynchronizedBlockTypecheckCondition(varname, typecheck),
  block.writeBodyStatementsCondition(newVarname)
}->select(s: String | s.isNotEmpty())
->addAll(block.getElementConditions(newVarname, false, metaclass))
/]

[query public getThrowStatementConditions(throwStmt: ThrowStatement, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = throwStmt.addElementAsVisited(metaclass) in
let concreteMetaclass: String = throwStmt.getConcreteElementMetaclass(metaclass) in
let completeVarname: String = throwStmt.getCompleteElementVarname(varname, metaclass) in
OrderedSet(String) {
  throwStmt.writeThrowStatementTypechecker(varname, typecheck)
}->select(s: String | s.isNotEmpty())
/]

[query public getAssignmentConditions(assignment: Assignment, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = assignment.addElementAsVisited() in
let completeVarname: String = assignment.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = assignment.getConcreteElementMetaclass(metaclass) in
OrderedSet(String){
  assignment.writeAssignmentTypecheckCondition(varname, typecheck),
  assignment.writeOperatorCondition(completeVarname),
  assignment.writeLeftHandSideCondition(completeVarname),
  assignment.writeRightHandSideCondition(completeVarname)
}
->select(s | s.trim().size() > 0)
->addAll(assignment.getStatementConditions(varname, false, metaclass))
/]

[query public getAccessConditions(access: Access, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = access.addElementAsVisited(metaclass) in
let completeVarname: String = access.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = access.getConcreteElementMetaclass(metaclass) in 
OrderedSet(String) {
  access.writeAccessTypecheckCondition(varname, typecheck, concreteMetaclass),
  access.writeFromCondition(completeVarname, concreteMetaclass),
  access.writeElementAccessedCondition(completeVarname, concreteMetaclass)
}->addAll(access.getElementConditions(completeVarname, typecheck, concreteMetaclass))
->select(s | s.isNotEmpty())
/]

[query public getTypeAccessConditions(typeAccess: DataTypeAccess, varname: String, typecheck: Boolean): OrderedSet(String) =
let void: OclVoid = typeAccess.addElementAsVisited() in
let newVarname: String = varname.printVarname(typecheck, 'TypeAccess') in
OrderedSet(String) {
  typeAccess.generatesTypeAccessTypecheckCondition(varname, typecheck)
}->addAll(typeAccess.getAccessConditions(newVarname, false, 'TypeAccess'))
->select(s | s.isNotEmpty())
/]

[query public getMethodInvocationConditions(methodInv: MethodInvocation, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = methodInv.addElementAsVisited(metaclass) in
let concreteMetaclass: String = methodInv.getConcreteElementMetaclass(metaclass) in
let completeVarname: String = methodInv.getCompleteElementVarname(varname, metaclass) in
OrderedSet(String) {
  methodInv.writeMethodInvocationTypecheckCondition(varname, typecheck, metaclass),
  methodInv.writeToCondition(completeVarname, concreteMetaclass),
  methodInv.writeFromCondition(completeVarname, concreteMetaclass),
  methodInv.writeArgsCondition(completeVarname, concreteMetaclass)
}->select(s | s.trim().size() > 0)
->addAll(methodInv.getStatementConditions(completeVarname, false, concreteMetaclass))
/]

[query public getVariableAccessConditions(varAccess: VariableAccess, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = varAccess.addElementAsVisited(metaclass) in
let completeVarname: String = varAccess.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = varAccess.getConcreteElementMetaclass(metaclass) in 
OrderedSet(String) {
  varAccess.writeVariableAccessTypecheckCondition(varname, typecheck)
}->addAll(varAccess.getAccessConditions(completeVarname, false, concreteMetaclass))
->select(s | s.isNotEmpty())
/]

[query public getIfStatementConditions(ifStatement: IfStatement, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = ifStatement.addElementAsVisited() in
let newVarname: String = varname.printVarname(typecheck, 'IfStatement') in
OrderedSet(String){
  ifStatement.writeIfStatementTypecheckCondition(varname, typecheck),
  ifStatement.writeConditionCondition(newVarname),
  ifStatement.writeThenCondition(newVarname),
  ifStatement.writeElseCondition(newVarname)
}->select(s: String | s.isNotEmpty())
/]

[query public getLoopStatementConditions(loopStmt: LoopStatement, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
OrderedSet(String){
  loopStmt.generatesLoopStatementTypecheckerCondition(varname, typecheck),
  loopStmt.writeBodyCondition(varname)
}->select(s: String | s.isNotEmpty())
/]

[query public getSwitchStatementConditions(switch: SwitchStatement, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let newVarname: String = varname.printVarname(typecheck, 'SwitchStatement') in
let conditions: OrderedSet(String) = OrderedSet(String){
''}->select(s: String | s.trim().size() > 0) in
if typecheck then
  OrderedSet(String){varname.printKindOfCondition('SwitchStatement')}->addAll(conditions)
else
  conditions
endif
/]

[query public getSwitchCaseBlockConditions(switchBlock: SwitchCaseBlock, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let newVarname: String = varname.printVarname(typecheck, 'SwitchStatement') in
OrderedSet(String){
  switchBlock.generatesSwitchCaseBlockTypecheckCondition(varname, typecheck),
  switchBlock.generatesConditionsForStatements(newVarname)
}->select(s: String | s.trim().size() > 0)
/]

[query public getArithmeticExpressionConditions(arithmeticExpression: ArithmeticExpression, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) = 
let void: OclVoid = arithmeticExpression.addElementAsVisited(metaclass) in
let completeVarname: String = arithmeticExpression.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = arithmeticExpression.getConcreteElementMetaclass(metaclass) in
OrderedSet(String){
  arithmeticExpression.writeArithmeticExpressionTypecheckCondition(varname, typecheck, concreteMetaclass),
  arithmeticExpression.writeArithmeticOperatorCondition(completeVarname, concreteMetaclass)
}->select(s | s.isNotEmpty())
->addAll(arithmeticExpression.getOperatorExpressionConditions(completeVarname, false, concreteMetaclass))
/]

[query public getBooleanExpressionConditions(booleanExpression: BooleanExpression, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) = 
let void: OclVoid = booleanExpression.addElementAsVisited(metaclass) in
let completeVarname: String = booleanExpression.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = booleanExpression.getConcreteElementMetaclass(metaclass) in
OrderedSet(String){
  booleanExpression.writeBooleanExpressionTypecheckCondition(varname, typecheck, concreteMetaclass),
  booleanExpression.writeBooleanOperatorCondition(completeVarname, concreteMetaclass)
}->select(s | s.isNotEmpty())
->addAll(booleanExpression.getOperatorExpressionConditions(completeVarname, false, concreteMetaclass))
/]

[query public getOperatorExpressionConditions(operatorExpression: OperatorExpression, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) = 
OrderedSet(String){
  operatorExpression.writeOperatorExpressionTypecheckCondition(varname, typecheck, metaclass),
  operatorExpression.writeOperandsCondition(varname, metaclass)
}->select(s | s.isNotEmpty())
->addAll(operatorExpression.getStatementConditions(varname, false, metaclass))
/]

[query public getStringConcatenationConditions(strConcat: StringConcatenation, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) = 
let void: OclVoid = strConcat.addElementAsVisited(metaclass) in
let completeVarname: String = strConcat.getCompleteElementVarname(varname, metaclass) in
let concreteMetaclass: String = strConcat.getConcreteElementMetaclass(metaclass) in
OrderedSet(String) {
  strConcat.writeStringConcatenationTypechecker(varname, typecheck)
}->addAll(strConcat.getOperatorExpressionConditions(varname, false, 'ASTNode'))
/]

[query public getCatchBlockConditions(catch: CatchBlock, varname: String, typecheck: Boolean, metaclass: String): OrderedSet(String) =
let void: OclVoid = catch.addElementAsVisited() in
let completeVarname: String = catch.getCompleteElementVarname(varname, metaclass) in
OrderedSet(String) {
  catch.generatesCatchBlockTypecheckConditions(varname, typecheck),
  catch.generatesExceptionHandlingConditions(completeVarname)
}->select(s: String | s.isNotEmpty())
/]

[template public writeElementConditions(element: Element, varname: String, typecheck: Boolean, metaclass: String)]
[element.getElementConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(dataType: DataType, varname: String, typecheck: Boolean, metaclass: String)]
[dataType.getDataTypeConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(objType: ObjectType, varname: String, typecheck: Boolean, metaclass: String)]
[objType.getObjectTypeConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(parameterizedType: ParameterizedType, varname: String, typecheck: Boolean, metaclass: String)]
[parameterizedType.getParameterizedTypeConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(primitiveType: PrimitiveType, varname: String, typecheck: Boolean, metaclass: String)]
[primitiveType.getPrimitiveTypeConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(complexType: ComplexType, varname: String, typecheck: Boolean, metaclass: String)]
[complexType.getComplexTypeConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(interface: JInterface, varname: String, typecheck: Boolean, metaclass: String)]
[interface.getInterfaceConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(jClass: JClass, varname: String, typecheck: Boolean, metaclass: String)]
[jClass.getJavaClassConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(method: Method, varname: String, typecheck: Boolean, metaclass: String)]
[method.getMethodConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(var: Variable, varname: String, typecheck: Boolean, metaclass: String)]
[var.getVariableConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(arrayCreation: ArrayCreation, varname: String, typecheck: Boolean, metaclass: String)]

[/template]

[template public writeElementConditions(block: Block, varname: String, typecheck: Boolean, metaclass: String)]
[block.getBlockConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(instanceCreation: InstanceCreation, varname: String, typecheck: Boolean, metaclass: String)]
[instanceCreation.getInstanceCreationConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(lit: LiteralValue, varname: String, typecheck: Boolean, metaclass: String)]
[lit.getLiteralConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(stmt: Statement, varname: String, typecheck: Boolean, metaclass: String)]
[stmt.getStatementConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(syncBlock: SynchronizedBlock, varname: String, typecheck: Boolean, metaclass: String)]
[syncBlock.getSynchronizedBlockConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(throwStmt: ThrowStatement, varname: String, typecheck: Boolean, metaclass: String)]
[throwStmt.getThrowStatementConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(assignment: Assignment, varname: String, typecheck: Boolean, metaclass: String)]
[assignment.getAssignmentConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(access: Access, varname: String, typecheck: Boolean, metaclass: String)]
[access.getAccessConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]


[template public writeElementConditions(dataTypeAccess: DataTypeAccess, varname: String, typecheck: Boolean, metaclass: String)]

[/template]


[template public writeElementConditions(varAccess: VariableAccess, varname: String, typecheck: Boolean, metaclass: String)]
[varAccess.getVariableAccessConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]


[template public writeElementConditions(methodInv: MethodInvocation, varname: String, typecheck: Boolean, metaclass: String)]
[methodInv.getMethodInvocationConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(ifStmt: IfStatement, varname: String, typecheck: Boolean, metaclass: String)]
[ifStmt.getIfStatementConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]


[template public writeElementConditions(loopStmt: LoopStatement, varname: String, typecheck: Boolean, metaclass: String)]
[loopStmt.getLoopStatementConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]


[template public writeElementConditions(switchStmt: SwitchStatement, varname: String, typecheck: Boolean, metaclass: String)]
[switchStmt.getSwitchStatementConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(switchCase: SwitchCaseBlock, varname: String, typecheck: Boolean, metaclass: String)]
[switchCase.getSwitchCaseBlockConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]


[template public writeElementConditions(arithmeticExpression: ArithmeticExpression, varname: String, typecheck: Boolean, metaclass: String)]
[arithmeticExpression.getArithmeticExpressionConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]


[template public writeElementConditions(booleanExpression: BooleanExpression, varname: String, typecheck: Boolean, metaclass: String)]
[booleanExpression.getBooleanExpressionConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]


[template public writeElementConditions(operatorExp: OperatorExpression, varname: String, typecheck: Boolean, metaclass: String)]
[operatorExp.getOperatorExpressionConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(strConcat: StringConcatenation, varname: String, typecheck: Boolean, metaclass: String)]
[strConcat.getStringConcatenationConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]

[template public writeElementConditions(catchBlock: CatchBlock, varname: String, typecheck: Boolean, metaclass: String)]
[catchBlock.getCatchBlockConditions(varname, typecheck, metaclass)->writeAllConditions() /]
[/template]


