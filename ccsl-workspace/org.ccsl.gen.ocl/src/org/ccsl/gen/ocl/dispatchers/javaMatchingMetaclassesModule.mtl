[comment encoding = UTF-8 /]
[module javaMatchingMetaclassesModule('http://www.example.org/ccsl')]


[query public getMatchingJavaMetaclasses(element: Element): OrderedSet(String) =
  element.writeElementMatchingJavaMetaclasses().tokenize(',').trim()->asOrderedSet()
/]

[template private writeElementMatchingJavaMetaclasses(element: Element)]
ASTNode
[/template]

[template private writeElementMatchingJavaMetaclasses(dataType: DataType)]
ASTNode
[/template]

[template private writeElementMatchingJavaMetaclasses(objType: ObjectType)]
ClassDeclaration, InterfaceDeclaration, ParameterizedType, AnonymousClassDeclaration, TypeParameter
[/template]

[template private writeElementMatchingJavaMetaclasses(primitiveType: PrimitiveType)]
[if primitiveType.oclIsKindOf(BooleanPrimitiveType)]
PrimitiveTypeBoolean[elseif primitiveType.oclIsKindOf(ShortPrimitiveType)]
PrimitiveTypeShort[else]
PrimitiveType[/if]
[/template]

[template private writeElementMatchingJavaMetaclasses(element: ParameterizedType)]
ParameterizedType
[/template]

[template private writeElementMatchingJavaMetaclasses(element: ArrayType)]
ArrayType
[/template]

[template private writeElementMatchingJavaMetaclasses(namedElement: NamedElement)]
NamedElement
[/template]

[template private writeElementMatchingJavaMetaclasses(complexType: ComplexType)]
ClassDeclaration, InterfaceDeclaration, AnonymousClassDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(interface: JInterface)]
InterfaceDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(javaClass: JClass)]
ClassDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(method: Method)]
MethodDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(variable: Variable)]
VariableDeclarationFragment, SingleVariableDeclaration
[/template]

[template private writeElementMatchingJavaMetaclasses(fieldVariable: FieldVariable)]
VariableDeclarationFragment
[/template]

[template private writeElementMatchingJavaMetaclasses(stmt: Statement)]
Statement, Expression
[/template]

[template private writeElementMatchingJavaMetaclasses(block: Block)]
Block
[/template]

[template private writeElementMatchingJavaMetaclasses(block: SynchronizedBlock)]
SynchronizedStatement
[/template]

[template private writeElementMatchingJavaMetaclasses(throwStmt: ThrowStatement)]
ThrowStatement
[/template]

[template private writeElementMatchingJavaMetaclasses(assignment: Assignment)]
Assignment
[/template]

[template private writeElementMatchingJavaMetaclasses(access: Access)]
TypeAccess, MethodInvocation, SingleVariableAccess
[/template]

[template private writeElementMatchingJavaMetaclasses(dataTypeAccess: DataTypeAccess)]
TypeAccess
[/template]

[template private writeElementMatchingJavaMetaclasses(variableAccess: VariableAccess)]
SingleVariableAccess, FieldAccess, SuperFieldAccess
[/template]

[template private writeElementMatchingJavaMetaclasses(inst: InstanceCreation)]
ClassInstanceCreation
[/template]

[template private writeElementMatchingJavaMetaclasses(methodInv: SimpleMethodInvocation)]
MethodInvocation, SuperMethodInvocation
[/template]

[template private writeElementMatchingJavaMetaclasses(methodInv: MethodInvocation)]
MethodInvocation
[/template]

[template private writeElementMatchingJavaMetaclasses(ifStmt: IfStatement)]
IfStatement
[/template]

[template private writeElementMatchingJavaMetaclasses(loopStmt: LoopStatement)]
EnhancedForStatement, ForStatement, WhileStatement, DoStatement
[/template]

[template private writeElementMatchingJavaMetaclasses(switch: SwitchStatement)]
SwitchStatement
[/template]

[template private writeElementMatchingJavaMetaclasses(switchCase: SwitchCaseBlock)]
SwitchStatement
[/template]

[template private writeElementMatchingJavaMetaclasses(arithmeticExp: ArithmeticExpression)]
InfixExpression, PrefixExpression
[/template]

[template private writeElementMatchingJavaMetaclasses(booleanExp: BooleanExpression)]
[if (booleanExp.booleanOperator = BooleanOperator::ANY)]
InfixExpression, PrefixExpression[elseif(booleanExp.booleanOperator = BooleanOperator::NOT)]
PrefixExpression[else]
InfixExpression[/if]
[/template]

[template private writeElementMatchingJavaMetaclasses(operatorExp: OperatorExpression)]
InfixExpression, PrefixExpression, PostfixExpression
[/template]

[template private writeElementMatchingJavaMetaclasses(strConcat: StringConcatenation)]
InfixExpression
[/template]

[comment @TryStatementTemplate: Write all possible Modisco metaclass represented by the Ccsl TryStatement metaclass  /]
[template private writeElementMatchingJavaMetaclasses(tryStmt: TryStatement)]
TryStatement
[/template]

[comment @CatchClauseTemplate: Write all possible Modisco metaclass represented by the Ccsl CatchClause metaclass  /]
[template private writeElementMatchingJavaMetaclasses(catchBlock: CatchClause)]
CatchClause
[/template]

[comment @EmptyStatementTemplate: Write all possible Modisco metaclass represented by the Ccsl EmptyStatement metaclass  /]
[template private writeElementMatchingJavaMetaclasses(emptyStatement: EmptyStatement)]
EmptyStatement
[/template]

[comment @InstanceOfStatementTemplate: Write all possible Modisco metaclass represented by the Ccsl InstanceOfStatement metaclass  /]
[template private writeElementMatchingJavaMetaclasses(instanceofStmt: InstanceOf)]
InstanceofExpression
[/template]

[comment @ReturnStatementTemplate: Write all possible Modisco metaclass represented by the Ccsl ReturnStatement metaclass  /]
[template private writeElementMatchingJavaMetaclasses(returnStatement: ReturnStatement)]
ReturnStatement
[/template]

[comment @ReturnStatementTemplate: Write all possible Modisco metaclass represented by the Ccsl ReturnStatement metaclass  /]
[template private writeElementMatchingJavaMetaclasses(constructorInv: ConstructorInvocation)]
ClassInstanceCreation
[/template]

[comment @ConstrcutorTemplate: Write all possible Modisco metaclass represented by the Ccsl Constrcutor metaclass  /]
[template private writeElementMatchingJavaMetaclasses(constructor: Constructor)]
ConstructorDeclaration
[/template]

[comment @SuperMethodInvocationTemplate /]
[template private writeElementMatchingJavaMetaclasses(invocation: SuperMethodInvocation)]
SuperMethodInvocation
[/template]

[comment @ThisStatement /]
[template private writeElementMatchingJavaMetaclasses(thisStmt: ThisStatement)]
ThisExpression
[/template]

[comment @BreakStatement  /]
[template private writeElementMatchingJavaMetaclasses(breakStatement: BreakStatement)]
BreakStatement
[/template]

[comment @ContinueStatement  /]
[template private writeElementMatchingJavaMetaclasses(continueStmt: ContinueStatement)]
ContinueStatement
[/template]