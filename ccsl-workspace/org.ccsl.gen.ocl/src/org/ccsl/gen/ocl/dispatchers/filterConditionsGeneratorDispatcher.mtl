[comment encoding = UTF-8 /]
[module filterConditionsGeneratorDispatcher('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::filters::regexFilterOperations /]
[import org::ccsl::gen::ocl::filters::countFilterModule /]
[import org::ccsl::gen::ocl::filters::implicityOperandFilterModule /]
[import org::ccsl::gen::ocl::filters::implicityContainerFilterModule /]
[import org::ccsl::gen::ocl::filters::sameNameFilterModule /]
[import org::ccsl::gen::ocl::filters::isKindOfFilterModule /]
[import org::ccsl::gen::ocl::filters::isTypeOfFilterModule /]
[import org::ccsl::gen::ocl::filters::isStringFilterModule /]
[import org::ccsl::gen::ocl::filters::superMethodClosureFilterModule /]
[import org::ccsl::gen::ocl::filters::templateFilterOperations /]
[import org::ccsl::gen::ocl::filters::fromClosureFilterModule /]

[comment filters related to closure /]
[comment complex type closure filters /]
[import org::ccsl::gen::ocl::filters::childComplexTypeFilter /]

[template private oclOperator(op: LogicOperator)]
[if op = LogicOperator::AND] and [elseif(op = LogicOperator::OR)] or [else] implies [/if]
[/template]

[template public writeFiltersConditions(filters: OrderedSet(Filter))]
[let filterConditions: Sequence(String) = filters.generatesFilterConditions()->select(s| s.isNotEmpty())]
[for(cond: String | filterConditions) separator(' and\n')]
[cond.writeStr() /][/for][/let]
[/template]

[template public generatesFilterConditions(filter : Filter) /]

[template public generatesFilterConditions(compositeFilter : CompositeFilter) ? (not compositeFilter.negated)]
(
  -- Composite Filter ([compositeFilter.operator /])
[for(f: Filter | compositeFilter.filters) separator(compositeFilter.operator.oclOperator().concat('\n'))]
  (
    [f.generatesFilterConditions() /]
  )[/for]

  -- End Composite Filter ([compositeFilter.operator /])
) 
[/template]

[template public generatesFilterConditions(compositeFilter : CompositeFilter) ? (compositeFilter.negated)]
(
  -- Composite Filter ([compositeFilter.operator /])
  not (
[for(f: Filter | compositeFilter.filters) separator(compositeFilter.operator.oclOperator().concat('\n'))]
    (
      [f.generatesFilterConditions() /]
    )[/for]
  
  )
  -- End Composite Filter ([compositeFilter.operator /])
)
[/template]

[template public generatesFilterConditions(atomicFilter : AtomicFilter) ? (atomicFilter.negated)]
not (
[for(target: Element | atomicFilter.targets) separator(' and\n')]
  [atomicFilter.generatesSpecificFilterConditions(target) /][/for]

)
[/template]

[template public generatesFilterConditions(atomicFilter : AtomicFilter) ? (not atomicFilter.negated)]
[for(target: Element | atomicFilter.targets) separator(' and\n')]
[atomicFilter.generatesSpecificFilterConditions(target) /][/for]
[/template]

[template public generatesFilterConditions(atomicFilter : SameNameFilter) ? (atomicFilter.negated)]
not (
  [atomicFilter.generatesSpecificFilterConditions(atomicFilter.targets->first()) /]
)
[/template]

[template public generatesFilterConditions(atomicFilter : SameNameFilter) ? (not atomicFilter.negated)]
[atomicFilter.generatesSpecificFilterConditions(atomicFilter.targets->first()) /]
[/template]

[comment dispatchers /]
[template public generatesSpecificFilterConditions(atomicFilter: AtomicFilter, target: Element)]
[atomicFilter.eClass() /] dispatcher not implemented
[/template]

[template public generatesSpecificFilterConditions(regexFilter: RegexMatch, target: Element)]
[regexFilter.generatesRegexFilterConditions(target) /]
[/template]

[template public generatesSpecificFilterConditions(templFilter: TemplateFilter, target: Element)]
[templFilter.writeTemplateFilterCondition(target) /]
[/template]

[template public generatesSpecificFilterConditions(f: ImplicityContainerFilter, target: Element)]
[f.writeImplicityContainerFilter(target) /]
[/template]

[template public generatesSpecificFilterConditions(implicityOperandFilter: ImplicityOperandFilter, target: Element)]
[implicityOperandFilter.writeImplicityOperandFilterCondition(target) /]
[/template]

[template public generatesSpecificFilterConditions(sameNameFilter: SameNameFilter, target: Element)]
[sameNameFilter.generatesSameNameFilterConditions(sameNameFilter, target) /]
[/template]

[template public generatesSpecificFilterConditions(isKindOfFilter: IsKindOfFilter, target: Element)]
[isKindOfFilter.writeIsKindOfFilterCondition(target) /]
[/template]

[template public generatesSpecificFilterConditions(isTypeOfFilter: IsTypeOfFilter, target: Element)]
[isTypeOfFilter.writeIsTypeOfFilterCondition(target) /]
[/template]

[template public generatesSpecificFilterConditions(isStringFilter: IsStringFilter, target: Element)]
[isStringFilter.writeIsStringFilterCondition(target) /]
[/template]

[template public generatesSpecificFilterConditions(superMethodClosureFilter: SuperMethodClosureFilter, target: Element)]
[superMethodClosureFilter.writeSuperMethodClosureFilterModule(target) /]
[/template]

[template public generatesSpecificFilterConditions(f: ChildClosureComplexTypeFilter, target: Element)]
[f.writeChildComplexTypeFilter(target) /]
[/template]

[template public generatesSpecificFilterConditions(f: FromClosureFilter, target: Element)]
[f.writeFromClosureFilterCondition(target) /]
[/template]

[template public generatesSpecificFilterConditions(f: CountFilter, target: Element)]
[f.writeCountFilterCondition(target) /]
[/template]