[comment encoding = UTF-8 /]
[module generatesElementConditionsDispatcher('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::stringUtils/]

[comment element/datatype /]
[import org::ccsl::gen::ocl::element::datatype::objectTypeOperations /]
[import org::ccsl::gen::ocl::element::datatype::parameterizedTypeOperations /]
[import org::ccsl::gen::ocl::element::datatype::arrayTypeOperations /]

[comment element/namedElements /]
[import org::ccsl::gen::ocl::element::namedElement::methodOperations /]
[import org::ccsl::gen::ocl::element::namedElement::complexTypeOperations /]
[import org::ccsl::gen::ocl::element::namedElement::variableOperations /]
[import org::ccsl::gen::ocl::element::namedElement::vectorVariableOperations /]
[import org::ccsl::gen::ocl::element::namedElement::javaClassOperations /]
[import org::ccsl::gen::ocl::element::namedElement::interfaceOperations /]

[comment statements /]
[import org::ccsl::gen::ocl::element::statement::statementOperations /]
[import org::ccsl::gen::ocl::element::statement::literalValueOperations /]
[import org::ccsl::gen::ocl::element::statement::methodInvocationOperations /]
[import org::ccsl::gen::ocl::element::statement::instanceCreationOperations /]
[import org::ccsl::gen::ocl::element::statement::arrayCreationOperations /]
[import org::ccsl::gen::ocl::element::statement::dataTypeAccessOperations /]
[import org::ccsl::gen::ocl::element::statement::blockOperations /]
[import org::ccsl::gen::ocl::element::statement::access::accessModule /]

[comment statements/controlFlow /]
[import org::ccsl::gen::ocl::element::statement::controlFlow::switchStatementOperations /]
[import org::ccsl::gen::ocl::element::statement::controlFlow::ifStatementOperations /]
[import org::ccsl::gen::ocl::element::statement::controlFlow::loopStatementModule /]


[template private printConditions(element: Element, conditions: OrderedSet(String))]
[for (condition: String | conditions) separator(' and\n')]
[condition.printStringWithIdentation() /][/for]
[/template]

[template public generatesConditions(element: Element, varname: String, typecheck: Boolean) /]
[template public generatesConditions(element: Element, varname: String, typecheck: Boolean, metaclass: String) /]


[template public generatesConditions(obj: ObjectType, varname: String, typecheck: Boolean)]
[obj.printConditions(obj.getObjectTypeConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(obj: ObjectType, varname: String, typecheck: Boolean, metaclass: String)]
[obj.printConditions(obj.getObjectTypeConditions(varname, typecheck, metaclass)) /]
[/template]

[template public generatesConditions(obj: ParameterizedType, varname: String, typecheck: Boolean)]
[obj.printConditions(obj.getParameterizedTypeConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(obj: ParameterizedType, varname: String, typecheck: Boolean, metaclass: String)]
[obj.printConditions(obj.getObjectTypeConditions(varname, typecheck, metaclass)) /]
[/template]

[comment dataType/ArrayType /]
[template public generatesConditions(arrayType: ArrayType, varname: String, typecheck: Boolean)]
[arrayType.printConditions(arrayType.getArrayTypeConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(arrayType: ArrayType, varname: String, typecheck: Boolean, metaclass: String)]
[arrayType.printConditions(arrayType.getArrayTypeConditions(varname, typecheck)) /]
[/template]

[template public generatesConditions(method: Method, varname: String, typecheck: Boolean)]
[method.printConditions(method.getMethodConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(method: Method, varname: String, typecheck: Boolean, metaclass: String)]
[method.printConditions(method.getMethodConditions(varname, typecheck)) /]
[/template]

[template public generatesConditions(complexType: ComplexType, varname: String, typecheck: Boolean)]
[complexType.printConditions(complexType.getComplexTypeConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(complexType: ComplexType, varname: String, typecheck: Boolean, metaclass: String)]
[complexType.printConditions(complexType.getComplexTypeConditions(varname, typecheck, metaclass)) /]
[/template]

[template public generatesConditions(javaClass: JavaClass, varname: String, typecheck: Boolean)]
[javaClass.printConditions(javaClass.getJavaClassConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(javaClass: JavaClass, varname: String, typecheck: Boolean, metaclass: String)]
[javaClass.printConditions(javaClass.getJavaClassConditions(varname, typecheck, metaclass)) /]
[/template]

[template public generatesConditions(javaInterface: JavaInterface, varname: String, typecheck: Boolean)]
[javaInterface.printConditions(javaInterface.getInterfaceConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(javaInterface: JavaInterface, varname: String, typecheck: Boolean, metaclass: String)]
[javaInterface.printConditions(javaInterface.getInterfaceConditions(varname, typecheck)) /]
[/template]

[template public generatesConditions(var: Variable, varname: String, typecheck: Boolean)]
[var.printConditions(var.getVariableConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(var: Variable, varname: String, typecheck: Boolean, metaclass: String)]
[var.printConditions(var.getVariableConditions(varname, typecheck, metaclass)) /]
[/template]

[template public generatesConditions(var: VariableVector, varname: String, typecheck: Boolean)]
[var.printConditions(var.getVectorVariableConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(var: VariableVector, varname: String, typecheck: Boolean, metaclass: String)]
[var.printConditions(var.getVectorVariableConditions(varname, typecheck, metaclass)) /]
[/template]

[comment element/statement /]
[template public generatesConditions(stmt: Statement, varname: String, typecheck: Boolean)]
[stmt.printConditions(stmt.getStatementConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(stmt: Statement, varname: String, typecheck: Boolean, metaclass: String)]
[stmt.printConditions(stmt.getStatementConditions(varname, typecheck)) /]
[/template]


[template public generatesConditions(methodInv: MethodInvocation, varname: String, typecheck: Boolean)]
[methodInv.printConditions(methodInv.getMethodInvocationConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(methodInv: MethodInvocation, varname: String, typecheck: Boolean, metaclass: String)]
[methodInv.printConditions(methodInv.getMethodInvocationConditions(varname, typecheck, metaclass)) /]
[/template]

[template public generatesConditions(inst: InstanceCreation, varname: String, typecheck: Boolean)]
[inst.printConditions(inst.getInstanceCreationConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(inst: InstanceCreation, varname: String, typecheck: Boolean, metaclass: String)]
[inst.printConditions(inst.getInstanceCreationConditions(varname, typecheck)) /]
[/template]

[template public generatesConditions(inst: ArrayCreation, varname: String, typecheck: Boolean)]
[inst.printConditions(inst.getArrayCreationConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(inst: ArrayCreation, varname: String, typecheck: Boolean, metaclass: String)]
[inst.printConditions(inst.getArrayCreationConditions(varname, typecheck)) /]
[/template]

[comment statements/TypeAccess /]
[template public generatesConditions(typeAccess: DataTypeAccess, varname: String, typecheck: Boolean)]
[typeAccess.printConditions(typeAccess.getTypeAccessConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(typeAccess: DataTypeAccess, varname: String, typecheck: Boolean, metaclass: String)]
[typeAccess.printConditions(typeAccess.getTypeAccessConditions(varname, typecheck)) /]
[/template]

[comment statements/Block /]
[template public generatesConditions(block: Block, varname: String, typecheck: Boolean)]
[block.printConditions(block.getBlockConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(block: Block, varname: String, typecheck: Boolean, metaclass: String)]
[block.printConditions(block.getBlockConditions(varname, typecheck)) /]
[/template]

[comment statements/LiteralValue /]
[template public generatesConditions(lit: LiteralValue, varname: String, typecheck: Boolean)]
[lit.printConditions(lit.getLiteralConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(lit: LiteralValue, varname: String, typecheck: Boolean, metaclass: String)]
[lit.printConditions(lit.getLiteralConditions(varname, typecheck)) /]
[/template]

[comment statement/access /]
[template public generatesConditions(access: Access, varname: String, typecheck: Boolean)]
[access.printConditions(access.getAccessConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(access: Access, varname: String, typecheck: Boolean, metaclass: String)]
[access.printConditions(access.getAccessConditions(varname, typecheck, metaclass)) /]
[/template]

[comment statements/controlFlow/SwitchStatement /]
[template public generatesConditions(switch: SwitchStatement, varname: String, typecheck: Boolean)]
[switch.printConditions(switch.getSwitchStatementConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(switch: SwitchStatement, varname: String, typecheck: Boolean, metaclass: String)]
[switch.printConditions(switch.getSwitchStatementConditions(varname, typecheck)) /]
[/template]

[comment statements/controlFlow/SwitchCaseBlock /]
[template public generatesConditions(switch: SwitchCaseBlock, varname: String, typecheck: Boolean)]
[switch.printConditions(switch.getSwitchCaseBlockConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(switch: SwitchCaseBlock, varname: String, typecheck: Boolean, metaclass: String)]
[switch.printConditions(switch.getSwitchCaseBlockConditions(varname, typecheck)) /]
[/template]

[comment statements/controlFlow/IfStatement /]
[template public generatesConditions(ifStatement: IfStatement, varname: String, typecheck: Boolean)]
[ifStatement.printConditions(ifStatement.getIfStatementConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(ifStatement: IfStatement, varname: String, typecheck: Boolean, metaclass: String)]
[ifStatement.printConditions(ifStatement.getIfStatementConditions(varname, typecheck)) /]
[/template]

[comment statements/controlFlow/LoopStatement /]
[template public generatesConditions(loopStmt: LoopStatement, varname: String, typecheck: Boolean)]
[loopStmt.printConditions(loopStmt.getLoopStatementConditions(varname, typecheck)) /]
[/template]
[template public generatesConditions(loopStmt: LoopStatement, varname: String, typecheck: Boolean, metaclass: String)]
[loopStmt.printConditions(loopStmt.getLoopStatementConditions(varname, typecheck)) /]
[/template]