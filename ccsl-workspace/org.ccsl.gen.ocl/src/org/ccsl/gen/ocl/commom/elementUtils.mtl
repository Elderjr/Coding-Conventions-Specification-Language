[comment encoding = UTF-8 /]
[module elementUtils('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::dispatchers::getMatchingJavaMetaclassesDispatcher /]

[query public mustWriteConditionFor(element: Element, propertyName: String): Boolean = 
let features: Sequence(ecore::EStructuralFeature) = element.eClass().eAllStructuralFeatures->select(s | s.name = propertyName)->asSequence() in
let feature: ecore::EStructuralFeature = if features->size() > 0 then features->first() else null endif in
if feature <> null and element.eIsSet(feature) and not feature.many then 
  element.eGet(feature)->asSet()->exists(x: OclAny | x.oclIsKindOf(Element) and not element.isClosureRelation(element, x.oclAsType(Element)))
else if feature <> null and element.eIsSet(feature) and feature.many then
  element.eGet(feature)->flatten()->exists(x: OclAny | x.oclIsKindOf(Element) and not element.isClosureRelation(element, x.oclAsType(Element)))
else
  false
endif endif
/]

[query public isSet(obj: ecore:: EObject, propertyName: String): Boolean =  
  let properties: Sequence(ecore::EStructuralFeature) = obj.eClass().eAllStructuralFeatures->select(s | s.name = propertyName)->asSequence() in
  if properties->size() > 0 then 
    obj.eIsSet(properties->first())
  else
    false
  endif
/]

[query private getEStructuralFeatureValue(element: Element, feature: ecore::EStructuralFeature): OclAny = 

/]

[query public getRelationName(element: Element, field: Element): String =
let relatedFeature: OrderedSet(ecore::EStructuralFeature) = element.eClass().eAllStructuralFeatures->asOrderedSet()->select(feature: ecore::EStructuralFeature |
  let featureValue: OclAny = element.eGet(feature) in if (not featureValue.oclIsUndefined()) and (not feature.many) then
    featureValue = field
  else if (not featureValue.oclIsUndefined()) and (feature.many) then
    featureValue->flatten()->includes(field)
  else
    false
  endif endif 
) in if relatedFeature->size() > 0 then
  relatedFeature->first().name
else
  null
endif
/]

[query public hasAnyNotClosureRelationField(element: Element, fields: OrderedSet(Element)): Boolean =
  fields->exists(field: Element | not element.isClosureRelation(field))
/]

[query public isClosureRelation(element: Element, field: Element): Boolean = 
ImplicityOperandFilter.allInstances()->exists(f: ImplicityOperandFilter | 
  (f.operatorExpression = element and f.implicityOperand = field) or
  (f.operatorExpression = field and f.implicityOperand = element)
)
/]

[query public isMetaclassInMatchingMetaclasses(element: Element, metaclass: String): Boolean = 
  element.getMatchingJavaMetaclasses()->includes(metaclass)
/]

[query public getCompleteElementVarname(element: Element, baseVarname: String, metaclass: String): String = 
  if element.getMatchingJavaMetaclasses()->size() = 1 and element.getMatchingJavaMetaclasses()->first() <> metaclass then
    baseVarname.concat('.oclAsType(').concat(element.getMatchingJavaMetaclasses()->first()).concat(')')
  else
    baseVarname
  endif
/]

[query public getConcreteElementMetaclass(element: Element, metaclass: String): String =
  if element.getMatchingJavaMetaclasses()->size() = 1 and element.getMatchingJavaMetaclasses()->first() <> metaclass then
    element.getMatchingJavaMetaclasses()->first()
  else
    metaclass
  endif 
/]

[template public writeClosureToSkipParenthesis(element: Element, elementVarname: String, metaclass: String) ? (element <> null)]
let [elementVarname /]: [metaclass /] = if [elementVarname /] <> null then
  [elementVarname /]->asOrderedSet()->closure(v: ASTNode | 
    if v.oclIsKindOf(ParenthesizedExpression) then 
      v.oclAsType(ParenthesizedExpression).expression 
    else 
      v 
    endif
  )->last()
else
  null
endif in
[/template]