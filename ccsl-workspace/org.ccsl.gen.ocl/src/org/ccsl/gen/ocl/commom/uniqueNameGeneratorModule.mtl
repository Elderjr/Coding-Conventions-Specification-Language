[comment encoding = UTF-8 /]
[module uniqueNameGeneratorModule('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]

[template public getUniqueOclName(element : Element)]
[element.getUniqueName(element.getBaseName()) /]
[/template]

[template public getBaseName(e: Element)]
e
[/template]

[comment Variable Package /]

[template public getBaseName(e: Variable)]
var
[/template]

[template public getBaseName(e: Package)]
package
[/template]

[comment ComplexType Package /]

[template public getBaseName(e: TypeDeclaration)]
customType
[/template]

[template public getBaseName(e: ComplexType)]
complexType
[/template]

[template public getBaseName(e: ComplexTypeDeclaration)]
complexTypeDecl
[/template]

[template public getBaseName(e: ConstructComplexTypeDeclaration)]
constructComplexTypeDeclaration
[/template]

[template public getBaseName(e: JClass)]
clazz
[/template]

[template public getBaseName(e: JInterface)]
interface
[/template]

[template public getBaseName(e: JEnum)]
enum
[/template]

[template public getBaseName(e: EnumConstant)]
enumConstant
[/template]

[template public getBaseName(e: AnnotationType)]
annotationType
[/template]

[template public getBaseName(e: AnnotationField)]
annotationField
[/template]
[comment Method Package /]

[template public getBaseName(e: SimpleMethod)]
simpleMethod
[/template]

[template public getBaseName(e: Constructor)]
constructor
[/template]

[template public getBaseName(e: Method)]
method
[/template]

[comment DataType Package /]
[template public getBaseName(e: DataType)]
dataType
[/template]

[template public getBaseName(e: ObjectType)]
objType
[/template]

[template public getBaseName(e: ArrayType)]
arrayType
[/template]

[template public getBaseName(e: ParameterizedType)]
parameterizedType
[/template]

[template public getBaseName(e: WildCardType)]
wildCardType
[/template]

[template public getBaseName(e: TypeParameter)]
typeParameter
[/template]

[template private getBaseName(e: PrimitiveType)]
primitiveType
[/template]

[template private getBaseName(e: BytePrimitiveType)]
bytePrimitive
[/template]

[template private getBaseName(e: BooleanPrimitiveType)]
booleanPrimitive
[/template]

[template private getBaseName(e: CharPrimitiveType)]
charPrimitive
[/template]

[template private getBaseName(e: DoublePrimitiveType)]
doublePrimitive
[/template]

[template private getBaseName(e: ShortPrimitiveType)]
shortPrimitive
[/template]

[template private getBaseName(e: FloatPrimitiveType)]
floatPrimitive
[/template]

[template private getBaseName(e: LongPrimitiveType)]
longPrimitive
[/template]

[template private getBaseName(e: VoidType)]
voidPrimitive
[/template]

[template private getBaseName(e: IntPrimitiveType)]
intPrimitive
[/template]

[comment Expression Package /]
[template public getBaseName(e: Expression)]
expression
[/template]

[template public getBaseName(e: Annotation)]
annotation
[/template]

[template public getBaseName(e: InstanceofExpression)]
instanceof
[/template]

[template public getBaseName(e: CastExpression)]
castExp
[/template]

[template public getBaseName(e: TernaryExpression)]
ternary
[/template]

[template public getBaseName(e: Invocation)]
inv
[/template]

[template public getBaseName(e: MethodInvocation)]
methodInv
[/template]

[template public getBaseName(e: ConstructorInvocation)]
constructorInv
[/template]

[template public getBaseName(e: AnonymousClass)]
anonymousClass
[/template]

[template public getBaseName(e: VariableAccess)]
varAccess
[/template]

[template public getBaseName(e: LiteralValue)]
literalValue
[/template]

[template public getBaseName(e: BooleanLiteral)]
booleanLiteral
[/template]

[template public getBaseName(e: CharacterLiteral)]
characterLiteral
[/template]

[template public getBaseName(e: NumberLiteral)]
numberLiteral
[/template]

[template public getBaseName(e: NullLiteral)]
nullLiteral
[/template]

[template public getBaseName(e: StringLiteral)]
strLiteral
[/template]

[template public getBaseName(e: SimpleAssignment)]
simpleAssignment
[/template]

[template public getBaseName(e: UnaryAssignment)]
unaryAssignment
[/template]

[template public getBaseName(e: Assignment)]
Assignment
[/template]

[template public getBaseName(e: ArrayInitializer)]
arrayInitializer
[/template]

[template public getBaseName(e: ArrayCreation)]
arrayCreation
[/template]

[template public getBaseName(e: VarDeclaration)]
varDecl
[/template]

[template public getBaseName(e: ArrayIndexesAccess)]
arrAccess
[/template]

[template public getBaseName(e: DataTypeAccess)]
dataTypeAccess
[/template]

[template public getBaseName(e: OperandExpression)]
operandExpression
[/template]

[template public getBaseName(e: BooleanExpression)]
booleanExpression
[/template]

[template public getBaseName(e: BinaryExpression)]
binaryExpression
[/template]

[template public getBaseName(e: StringConcatenation)]
strConcat
[/template]

[template public getBaseName(e: ArithmeticExpression)]
arithmeticExpression
[/template]

[comment Statement Package /]
[template public getBaseName(e: ImportStatement)]
importStmt
[/template]

[template public getBaseName(e: AssertStatement)]
assertStmt
[/template]

[template public getBaseName(e: BreakStatement)]
breakStmt
[/template]

[template public getBaseName(e: ContinueStatement)]
continueStmt
[/template]

[template public getBaseName(e: ReturnStatement)]
returnStmt
[/template]