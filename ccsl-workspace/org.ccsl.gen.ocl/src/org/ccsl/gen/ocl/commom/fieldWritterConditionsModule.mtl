[comment encoding = UTF-8 /]
[module fieldWritterConditionsModule('http://www.example.org/ccsl')]

[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::commom::getOclElementReferenceModule /] 
[import org::ccsl::gen::ocl::commom::stringUtils /]
[import org::ccsl::gen::ocl::commom::elementUtils /]
[import org::ccsl::gen::ocl::facades::elementFacadeConditionsBuilder /]
[import org::ccsl::gen::ocl::facades::javaMatchingMetaclassesModule /]

[template public getFieldName(field: Element)]
[if field = null]
nullTmp[elseif getElementsVisited()->includes(field)]
[field.getBaseName() /]Tmp[else]
[field.getUniqueOclName() /][/if]
[/template]

[comment generates get field expression /]
[template public generatesGetFieldExpression(element: Element, elementOclVarname: String, fieldOclVarname: String, mappedFieldPropertyName: String, mappedFieldMetaclass: String) post(trim())]
let [fieldOclVarname /]: [mappedFieldMetaclass /] = [elementOclVarname /].[mappedFieldPropertyName /] in
[/template]

[template public generatesGetFieldExpression(element: Element, elementOclVarname: String, fieldOclVarname: String, mappedFieldPropertyName: String, mappedFieldMetaclass: String, elementMetaclasses: OrderedSet(String)) post(trim())]
let [fieldOclVarname /]: [mappedFieldMetaclass /] = [for(metaclass: String | elementMetaclasses) separator('else ')]
if [elementOclVarname /].oclIsKindOf([metaclass /]) then
  [elementOclVarname /].oclAsType([metaclass /]).[mappedFieldPropertyName /]
[/for]
else
  null
[for (Sequence(Integer){1..elementMetaclasses->size()}) separator(' ')]endif[/for] in
[/template]

[template public generatesGetFieldExpression(element: Element, elementOclVarname: String, fieldOclVarname: String, mappedFieldMetaclass: String, map: OrderedSet(OrderedSet(String)))]
let [fieldOclVarname /]: [mappedFieldMetaclass /] = [for(entry: OrderedSet(String) | map) separator('else ')]
if [elementOclVarname /].oclIsKindOf([entry->at(1) /]) then
  [elementOclVarname /].oclAsType([entry->at(1) /]).[entry->at(2) /]
[/for]
else
  null
[for (Sequence(Integer){1..map->size()}) separator(' ')]endif[/for] in
[/template]

[template private generatesFieldConditionPrvt(element: Element, field: Element, fieldOclVarname: String, mappedFieldMetaclass: String) ? (field = null)]
[fieldOclVarname /] = null
[/template]

[template private generatesFieldConditionPrvt(element: Element, field: Element, fieldOclVarname: String,  mappedFieldMetaclass: String) ? (field <> null and getElementsVisited()->includes(field))]
[fieldOclVarname /] = [field.getUniqueOclName() /]
[/template]

[template private generatesFieldConditionPrvt(element: Element, field: Element, fieldOclVarname: String,  mappedFieldMetaclass: String) ? (field <> null and not getElementsVisited()->includes(field))]
[let isTypecheckNeeded: Boolean = not field.getMatchingJavaMetaclasses()->includes(mappedFieldMetaclass)]
[let fieldCondition: String = field.writeElementConditions(field.getUniqueOclName(), isTypecheckNeeded, mappedFieldMetaclass)]
[fieldOclVarname /] <> null[if not fieldCondition.isEmpty()] and
[fieldCondition.writeStr() /][/if][/let][/let]
[/template]

[template public generatesFieldCondition(element: Element, field: Element, fieldOclVarname: String, mappedFieldMetaclass: String) ? (not element.isClosureRelation(field))]
[let fieldRef: String = if field <> null then
    field.getOclReferenceExpression(fieldOclVarname, mappedFieldMetaclass)
  else
    ''
  endif
]
[if fieldRef.isNotEmpty()]
[fieldRef.writeStr() /]
[/if][/let][element.generatesFieldConditionPrvt(field, fieldOclVarname, mappedFieldMetaclass) /]
[/template]

[comment generates get field expression for monovalued values /]
[template public generatesMonovaluedFieldConditions(element: Element, field: Element, elementOclVarname: String, mappedFieldPropertyName: String, mappedFieldMetaclass: String) ? (not element.isClosureRelation(field)) post(trim()) ]
[let fieldOclVarname: String = field.getFieldName()]
[element.generatesGetFieldExpression(elementOclVarname, fieldOclVarname, mappedFieldPropertyName, mappedFieldMetaclass) /]
[element.generatesFieldCondition(field, fieldOclVarname, mappedFieldMetaclass) /][/let]
[/template]

[template public generatesMonovaluedFieldConditions(element: Element, field: Element, elementOclVarname: String, mappedFieldPropertyName: String, mappedFieldMetaclass: String, elementMetaclasses: OrderedSet(String)) ? (not element.isClosureRelation(field)) post(trim())]
[let fieldOclVarname: String = field.getFieldName()]
[element.generatesGetFieldExpression(elementOclVarname, fieldOclVarname, mappedFieldPropertyName, mappedFieldMetaclass, elementMetaclasses) /]
[element.generatesFieldCondition(field, fieldOclVarname, mappedFieldMetaclass) /][/let]
[/template]

[template public generatesMonovaluedFieldConditions(element: Element, field: Element, elementOclVarname: String, mappedFieldMetaclass: String, map: OrderedSet(OrderedSet(String))) ? (not element.isClosureRelation(field)) post(trim())]
[let fieldOclVarname: String = field.getFieldName()]
[element.generatesGetFieldExpression(elementOclVarname, fieldOclVarname, mappedFieldMetaclass, map) /]
[element.generatesFieldCondition(field, fieldOclVarname, mappedFieldMetaclass) /][/let]
[/template]

[query private getElementsNotInClosureRelation(element: Element, fields: OrderedSet(Element)): OrderedSet(Element) =
  fields->select(field: Element | not element.isClosureRelation(field))
/]
[comment Gerar condicoes de atributo multivalorado com acesso direto /]
[template public generatesMultivaluedFieldConditions(element: Element, fields: OrderedSet(Element), elementOclVarname: String, fieldsOclVarname: String, mappedPropertyFieldName: String, mappedFieldMetaclass: String) ? (element.getElementsNotInClosureRelation(fields)->size() > 0)]
[element.generatesGetFieldExpression(elementOclVarname, fieldsOclVarname, mappedPropertyFieldName, 'OrderedSet('.concat(mappedFieldMetaclass).concat(')')) /]
[element.generatesSetConditions(fieldsOclVarname, fields, mappedFieldMetaclass) /]
[/template]

[**
 * Generates conditions for a multivalue property of @element.
*/]
[template public generatesMultivaluedFieldConditions(element: Element, fields: OrderedSet(Element), elementOclVarname: String, fieldsOclVarname: String , mappedPropertyFieldName: String, mappedFieldMetaclass: String, elementMetaclasses: OrderedSet(String))  ? (element.getElementsNotInClosureRelation(fields)->size() > 0)]
[element.generatesGetFieldExpression(elementOclVarname, fieldsOclVarname, mappedPropertyFieldName, 'OrderedSet('.concat(mappedFieldMetaclass).concat(')'), elementMetaclasses) /]
[element.generatesSetConditions(fieldsOclVarname, fields, mappedFieldMetaclass) /]
[/template]

[template public generatesSetConditions(element: Element,  setOclName: String, fields: OrderedSet(Element), mappedFieldMetaclass: String)  ? (element.getElementsNotInClosureRelation(fields)->size() > 0)]
[let tmpFields: OrderedSet(Element) = fields->select(field: Element | not element.isClosureRelation(field))]
[for (field: Element | tmpFields) separator(' and \n')]
[setOclName /]->[field.generatesExistsDeclaration(mappedFieldMetaclass) /][/for][/let]
[/template]

[template public generatesSetConditions(element: Element,  setOclName: String, fields: OrderedSet(Element), mappedFieldMetaclass: String, collectionKind: CollectionKind)  ? (element.getElementsNotInClosureRelation(fields)->size() > 0 and collectionKind = CollectionKind::ANY)]
[let tmpFields: OrderedSet(Element) = fields->select(field: Element | not element.isClosureRelation(field))]
[for (field: Element | tmpFields) separator(' and \n')]
[setOclName /]->[field.generatesExistsDeclaration(mappedFieldMetaclass) /][/for][/let]
[/template]


[template public generatesSetConditions(element: Element,  setOclName: String, fields: OrderedSet(Element), mappedFieldMetaclass: String, collectionKind: CollectionKind)  ? ((fields->size() = 0 or element.getElementsNotInClosureRelation(fields)->size() > 0) and collectionKind = CollectionKind::EXACT)]
[let tmpFields: OrderedSet(Element) = fields->select(field: Element | not element.isClosureRelation(field))]
[for (field: Element | tmpFields) separator(' and \n')]
[setOclName /]->[field.generatesExistsDeclaration(mappedFieldMetaclass) /][/for] [if tmpFields->size() > 0] and [/if]
[setOclName /]->size() = [tmpFields->size() /][/let]
[/template]




[comment write field exists condition /]
[template private generatesExistsDeclaration(field: Element, mappedFieldMetaclass: String) ? (getElementsVisited()->includes(field))]
[let fieldName: String = field.getFieldName()]
exists([fieldName /] | [field.generatesFieldCondition(field, fieldName, mappedFieldMetaclass) /])[/let]
[/template]

[template private generatesExistsDeclaration(field: Element, mappedFieldMetaclass: String) ? (not getElementsVisited()->includes(field))]
[let fieldName: String = field.getUniqueOclName()]
[let fieldCondition: String = field.generatesFieldCondition(field, fieldName, mappedFieldMetaclass)]
exists([fieldName /] | [field.addElementExistsDeclaration() /] 
[if not fieldCondition.isEmpty()]
  [fieldCondition.writeStr() /][else]
  true[/if][/let][/let]
[/template]

[template private writeFieldExistsCondition(element: Element, field: Element, setOclName: String, mappedFieldMetaclass: String) ? (getElementsVisited()->includes(field))]
[let fieldName: String = field.getFieldName()]
[setOclName /]->exists([fieldName /] | [field.generatesFieldCondition(field, fieldName, mappedFieldMetaclass) /])[/let]
[/template]

[template private writeFieldExistsCondition(element: Element, field: Element, setOclName: String, mappedFieldMetaclass: String) ? (not getElementsVisited()->includes(field))]
[let fieldName: String = field.getUniqueOclName()]
[let fieldCondition: String = field.generatesFieldCondition(field, fieldName, mappedFieldMetaclass)]
[setOclName /]->exists([fieldName /]: [mappedFieldMetaclass /] | [field.addElementExistsDeclaration() /] 
[if not fieldCondition.isEmpty()]
[fieldCondition.writeStr() /][else]
true[/if][/let][/let]
[/template]



[comment write ANY set Conditions /]
[template public writeSetConditions(element: Element,  setOclName: String, fields: OrderedSet(Element), mappedFieldMetaclass: String, collectionKind: CollectionKind)  ? ((element.getElementsNotInClosureRelation(fields)->size() > 0) and collectionKind = CollectionKind::ANY)]
[let tmpFields: OrderedSet(Element) = fields->select(field: Element | not element.isClosureRelation(field))]
[for (field: Element | tmpFields) separator(' and \n')]
[element.writeFieldExistsCondition(field, setOclName, mappedFieldMetaclass) /][/for][/let]
[/template]

[comment write EXACT set Conditions /]
[template public writeSetConditions(element: Element,  setOclName: String, fields: OrderedSet(Element), mappedFieldMetaclass: String, collectionKind: CollectionKind)  ? ((fields->size() = 0 or element.getElementsNotInClosureRelation(fields)->size() > 0) and collectionKind = CollectionKind::EXACT)]
[let tmpFields: OrderedSet(Element) = fields->select(field: Element | not element.isClosureRelation(field))]
[for (field: Element | tmpFields) separator(' and \n')]
[element.writeFieldExistsCondition(field, setOclName, mappedFieldMetaclass) /][/for][if tmpFields->size() > 0]
 and
[/if][setOclName /]->size() = [fields->size() /][/let]
[/template]

[comment write IMMEDIATE set conditions/]
[query private getPreviousElement(fields: OrderedSet(Element), element: Element): Element =
if(fields->first() <> element) then
  fields->at(fields->indexOf(element) - 1)
else
  null
endif 
/]

[template public writeSetConditions(element: Element,  setOclName: String, fields: OrderedSet(Element), mappedFieldMetaclass: String, collectionKind: CollectionKind)  ? (element.getElementsNotInClosureRelation(fields)->size() > 0 and collectionKind = CollectionKind::IMMEDIATE)]
[let tmpFields: OrderedSet(Element) = fields->select(field: Element | not element.isClosureRelation(field))]
[for (field: Element | tmpFields) separator(' and \n')]
[element.writeFieldExistsCondition(field, setOclName, mappedFieldMetaclass) /] and
[field.writeFieldIndexDeclaration(setOclName, tmpFields) /] [if i <> 1]
  and
[field.writeFieldIndexCondition(setOclName, tmpFields) /][/if][/for][/let]
[/template]

[template private writeFieldIndexDeclaration(field: Element, setOclName: String, fields: OrderedSet(Element))]
let [field.getUniqueOclName() /]Index: Integer = if [setOclName /]->includes([field.getUniqueOclName() /]) then
  [setOclName /]->indexOf([field.getUniqueOclName() /])
else
  -1
endif in [field.getUniqueOclName() /]Index <> - 1
[/template]

[template private writeFieldIndexDeclaration(field: MethodInvocation, setOclName: String, fields: OrderedSet(Element))]
let methodInvExpression: ASTNode = if [field.getUniqueOclName() /].oclContainer().oclIsKindOf(ExpressionStatement) then
  [field.getUniqueOclName() /].oclContainer().oclAsType(ExpressionStatement)
else
  [field.getUniqueOclName() /]
endif in
let [field.getUniqueOclName() /]Index: Integer = if [setOclName /]->includes(methodInvExpression) then
  [setOclName /]->indexOf(methodInvExpression)
else
  -1
endif in [field.getUniqueOclName() /]Index <> - 1
[/template]

[template private writeFieldIndexCondition(field: Element, setOclName: String, fields: OrderedSet(Element))]
[let previousElement: Element = fields->getPreviousElement(field)]
[field.getUniqueOclName() /]Index = [previousElement.getUniqueOclName() /]Index + 1[/let]
[/template]