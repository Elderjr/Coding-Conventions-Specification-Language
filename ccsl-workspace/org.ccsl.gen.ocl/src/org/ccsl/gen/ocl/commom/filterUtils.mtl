[comment encoding = UTF-8 /]
[module filterUtils('http://www.example.org/ccsl')]
[import org::ccsl::gen::ocl::commom::uniqueNameGeneratorModule /]
[import org::ccsl::gen::ocl::commom::walkHelperModule /]
[import org::ccsl::gen::ocl::facades::elementFacadeConditionsBuilder /]
[import org::ccsl::gen::ocl::facades::filterConditionsGeneratorDispatcher  /]
[import org::ccsl::gen::ocl::facades::javaMatchingMetaclassesModule /]
[import org::ccsl::gen::ocl::commom::stringUtils /]

[template public writeFiltersConditions(filters: OrderedSet(Filter))]
[let filterConditions: Sequence(String) = filters.generatesFilterConditions()->select(s| s.isNotEmpty())]
[for(cond: String | filterConditions) separator(' and\n')]
[cond.writeStr() /][/for][/let]
[/template]

[template public writeTemplateElementCondition(f: Filter, target: Element, templ: Element)]
[let templCondition: String = templ.writeElementConditions(templ.getUniqueOclName(), f.isElementShouldBeChecked(target,templ), target.getDeclaredElementMetaclass())] 
let [templ.getUniqueOclName() /]: [target.getDeclaredElementMetaclass() /] = [target.getUniqueOclName() /] in [if not templCondition.isEmpty()]

[templCondition /][else]true[/if][/let]
[/template]

[query public isElementShouldBeChecked(f: Filter, target: Element, templ: Element): Boolean =
  if target.eClass() = templ.eClass() then
    let targetMetaclasses: OrderedSet(String) = target.getMatchingJavaMetaclasses() in
    let targetTemplateMetaclasses: OrderedSet(String) = templ.getMatchingJavaMetaclasses() in
    not(targetMetaclasses->intersection(targetTemplateMetaclasses)->size() = targetMetaclasses->size() and
    targetTemplateMetaclasses->size() = targetMetaclasses->size())
  else
    templ.eClass().eAllSuperTypes->includes(target.eClass())
  endif
/]

[query public isElementDeclaredInFilter(f: Filter, e: Element): Boolean =
  e.eContainer()->asOrderedSet()->closure(c: ecore::EObject | 
   if(c <> null and c.oclIsKindOf(ecore::EObject)) then
     c.oclAsType(ecore::EObject).eContainer()
   else
     c
   endif
  )->exists(c | c = f) 
/]