<faultTypeRule>
  <ocl>
    InfixExpression.allInstances()->union(PrefixExpression.allInstances())->select(operatorExp |
      --AtomicRule Context Conditions
      (
        -- Composite Filter (OR)
        (
          let templateArithmeticExpression: ASTNode = operatorExp in
          --TemplateFilter Context Conditions
          if templateArithmeticExpression.oclIsKindOf(InfixExpression) then
            let arithmeticInfixExpressionOperators: Set(InfixExpressionKind) = Set(InfixExpressionKind){
              InfixExpressionKind::TIMES,
              InfixExpressionKind::DIVIDE,
              InfixExpressionKind::PLUS,
              InfixExpressionKind::MINUS,
              InfixExpressionKind::REMAINDER
            } in arithmeticInfixExpressionOperators->exists(op | op = templateArithmeticExpression.oclAsType(InfixExpression).operator) and
            not(
              (
                -- String concat checker
                (
                  -- Approach A
                  let closureIteration: OrderedSet(ASTNode) = templateArithmeticExpression->asOrderedSet()->closure(v: ASTNode |
                    if v.oclIsKindOf(InfixExpression) then
                      v.oclAsType(InfixExpression).extendedOperands
                        ->append(v.oclAsType(InfixExpression).leftOperand)
                        ->append(v.oclAsType(InfixExpression).rightOperand)
                    elseif v.oclIsKindOf(Assignment) then
                      v.oclAsType(Assignment).leftHandSide->asOrderedSet()->append(v.oclAsType(Assignment).rightHandSide)
                    elseif v.oclIsKindOf(ParenthesizedExpression) then
                      v.oclAsType(ParenthesizedExpression).expression
                    else
                      v
                    endif
                  ) in
                  closureIteration->exists(v: ASTNode |
                    if v.oclIsKindOf(StringLiteral) then
                      true
                    elseif v.oclIsKindOf(MethodInvocation) and v.oclAsType(MethodInvocation).method.oclIsKindOf(MethodDeclaration) and
                      v.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).name = 'toString' then
                      true
                    elseif v.oclIsKindOf(SuperMethodInvocation) and v.oclAsType(SuperMethodInvocation).method.oclIsKindOf(MethodDeclaration) and
                      v.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).name = 'toString' then
                      true
                    elseif v.oclIsKindOf(ClassInstanceCreation) and v.oclAsType(ClassInstanceCreation).type.type.oclIsKindOf(ClassDeclaration) and
                      v.oclAsType(ClassInstanceCreation).type.type.oclAsType(ClassDeclaration).name = 'String' then
                      true
                    else
                      let accessesClosure: OrderedSet(ASTNode) = v->asOrderedSet()->closure(v: ASTNode | 
                        if v.oclIsKindOf(ArrayAccess) then
                          v.oclAsType(ArrayAccess).array
                        else
                          v
                        endif
                      ) in
                      let totalAccesses: Integer = accessesClosure->select(v: ASTNode | v.oclIsKindOf(ArrayAccess))->size() in
                      let baseNode: ASTNode = accessesClosure->last() in
                      let baseNode: ASTNode = if baseNode.oclIsKindOf(SingleVariableAccess) then
                        baseNode.oclAsType(SingleVariableAccess).variable
                      elseif baseNode.oclIsKindOf(FieldAccess) then
                        baseNode.oclAsType(FieldAccess).field.variable
                      else
                        baseNode
                      endif in
                      let baseNodeType: ASTNode = if baseNode.oclIsKindOf(VariableDeclarationFragment) then
                        baseNode.oclAsType(VariableDeclarationFragment).variablesContainer.type.type
                      elseif baseNode.oclIsKindOf(SingleVariableDeclaration) then
                        baseNode.oclAsType(SingleVariableDeclaration).type.type
                      elseif baseNode.oclIsKindOf(MethodInvocation) and baseNode.oclAsType(MethodInvocation).method.oclIsKindOf(MethodDeclaration) and
                        (not baseNode.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
                        baseNode.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.type
                      elseif baseNode.oclIsKindOf(SuperMethodInvocation) and baseNode.oclAsType(SuperMethodInvocation).method.oclIsKindOf(MethodDeclaration) and
                        (not baseNode.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
                        baseNode.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).returnType.type
                      else
                        null
                      endif in (not baseNodeType.oclIsUndefined()) and
                      let baseNodeTypeDimensions: Integer = if baseNodeType.oclIsKindOf(ArrayType) then
                        baseNodeType.oclAsType(ArrayType).dimensions
                      else
                        0
                      endif in
                      let baseNodeDimensions: Integer = if baseNode.oclIsKindOf(VariableDeclaration) then
                        baseNode.oclAsType(VariableDeclaration).extraArrayDimensions
                      else
                        0
                      endif in
                      let dimensions: Integer = if baseNodeTypeDimensions > baseNodeDimensions then
                        baseNodeTypeDimensions
                      else
                        baseNodeDimensions
                      endif in
                      let baseNodeType: ASTNode = baseNodeType->asOrderedSet()->closure(v: ASTNode |
                        if v.oclIsKindOf(ArrayType) then
                          v.oclAsType(ArrayType).elementType.type
                        else
                          v
                        endif
                      )->last() in baseNodeType.oclIsKindOf(ClassDeclaration) and baseNodeType.oclAsType(ClassDeclaration).name = 'String' and
                      dimensions = totalAccesses
                    endif
                  )
                ) or
                (
                  -- Approach B
                  let closureIteration: OrderedSet(ASTNode) = templateArithmeticExpression->asOrderedSet()->closure(v: ASTNode |
                    if v.oclContainer() &lt;&gt; null and (v.oclContainer().oclIsKindOf(MethodInvocation) or 
                       v.oclContainer().oclIsKindOf(SuperMethodInvocation) or
                       v.oclContainer().oclIsKindOf(ClassInstanceCreation) or
                       v.oclContainer().oclIsKindOf(SuperConstructorInvocation)) then
                      v
                    elseif v.oclIsKindOf(VariableDeclarationFragment) or
                           v.oclIsKindOf(Assignment) then
                      v
                    else
                      v.oclContainer()
                    endif
                  ) in closureIteration->size() > 0 and
                  let lastClosure: ASTNode = closureIteration->last() in 
                  let parameterIndex: Integer = if lastClosure.oclContainer() &lt;&gt; null then
                    if lastClosure.oclContainer().oclIsKindOf(MethodInvocation) then
                      lastClosure.oclContainer().oclAsType(MethodInvocation).arguments->indexOf(lastClosure)
                    elseif lastClosure.oclContainer().oclIsKindOf(SuperMethodInvocation) then
                      lastClosure.oclContainer().oclAsType(SuperMethodInvocation).arguments->indexOf(lastClosure)
                    elseif lastClosure.oclContainer().oclIsKindOf(ClassInstanceCreation) then
                      lastClosure.oclContainer().oclAsType(ClassInstanceCreation).arguments->indexOf(lastClosure)
                    elseif lastClosure.oclContainer().oclIsKindOf(SuperConstructorInvocation) then
                      lastClosure.oclContainer().oclAsType(SuperConstructorInvocation).arguments->indexOf(lastClosure)
                    else
                      null
                    endif
                  else
                    null
                  endif in
                  let parameters: OrderedSet(ASTNode) = if lastClosure.oclContainer() &lt;&gt; null then
                    if lastClosure.oclContainer().oclIsKindOf(MethodInvocation) then
                      lastClosure.oclContainer().oclAsType(MethodInvocation).method.parameters
                    elseif lastClosure.oclContainer().oclIsKindOf(SuperMethodInvocation) then
                      lastClosure.oclContainer().oclAsType(SuperMethodInvocation).method.parameters
                    elseif lastClosure.oclContainer().oclIsKindOf(ClassInstanceCreation) then
                      lastClosure.oclContainer().oclAsType(ClassInstanceCreation).method.parameters
                    elseif lastClosure.oclContainer().oclIsKindOf(SuperConstructorInvocation) then
                      lastClosure.oclContainer().oclAsType(SuperConstructorInvocation).method.parameters
                    else
                      null
                    endif
                  else
                    null
                  endif in
                  let baseNode: ASTNode = if lastClosure.oclIsKindOf(Assignment) then
                    lastClosure.oclAsType(Assignment).leftHandSide
                  else
                    lastClosure
                  endif in
                  let accessesClosure: OrderedSet(ASTNode) = baseNode->asOrderedSet()->closure(v: ASTNode | 
                    if v.oclIsKindOf(ArrayAccess) then
                      v.oclAsType(ArrayAccess).array
                    else
                      v
                    endif
                  ) in
                  let totalAccesses: Integer = accessesClosure->select(v: ASTNode | v.oclIsKindOf(ArrayAccess))->size() in
                  let baseNode: ASTNode = if parameterIndex &lt;&gt; null then
                    parameters->at(parameterIndex)
                  else
                    accessesClosure->last()
                  endif in
                  let baseNode: ASTNode = if baseNode.oclIsKindOf(SingleVariableAccess) then
                    baseNode.oclAsType(SingleVariableAccess).variable
                  elseif baseNode.oclIsKindOf(FieldAccess) then
                    baseNode.oclAsType(FieldAccess).field.variable
                  else
                    baseNode
                  endif in
                  let baseNodeType: ASTNode = if baseNode.oclIsKindOf(VariableDeclarationFragment) then
                    baseNode.oclAsType(VariableDeclarationFragment).variablesContainer.type.type
                  elseif baseNode.oclIsKindOf(SingleVariableDeclaration) then
                    baseNode.oclAsType(SingleVariableDeclaration).type.type
                  elseif baseNode.oclIsKindOf(MethodInvocation) and baseNode.oclAsType(MethodInvocation).method.oclIsKindOf(MethodDeclaration) and
                    (not baseNode.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
                    baseNode.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.type
                  elseif baseNode.oclIsKindOf(SuperMethodInvocation) and baseNode.oclAsType(SuperMethodInvocation).method.oclIsKindOf(MethodDeclaration) and
                    (not baseNode.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
                    baseNode.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).returnType.type
                  else
                    null
                  endif in (not baseNodeType.oclIsUndefined()) and
                  let baseNodeTypeDimensions: Integer = if baseNodeType.oclIsKindOf(ArrayType) then
                    baseNodeType.oclAsType(ArrayType).dimensions
                  else
                    0
                  endif in
                  let baseNodeDimensions: Integer = if baseNode.oclIsKindOf(VariableDeclaration) then
                    baseNode.oclAsType(VariableDeclaration).extraArrayDimensions
                  else
                    0
                  endif in
                  let dimensions: Integer = if baseNodeTypeDimensions > baseNodeDimensions then
                    baseNodeTypeDimensions
                  else
                    baseNodeDimensions
                  endif in
                  let baseNodeType: ASTNode = baseNodeType->asOrderedSet()->closure(v: ASTNode |
                    if v.oclIsKindOf(ArrayType) then
                      v.oclAsType(ArrayType).elementType.type
                    else
                      v
                    endif
                  )->last() in baseNodeType.oclIsKindOf(ClassDeclaration) and baseNodeType.oclAsType(ClassDeclaration).name = 'String' and
                    dimensions = totalAccesses
                )
              )
            )
          elseif templateArithmeticExpression.oclIsKindOf(PrefixExpression) then
            let arithmeticPrefixExpressionOperators: Set(PrefixExpressionKind) = Set(PrefixExpressionKind){
              PrefixExpressionKind::PLUS,
              PrefixExpressionKind::MINUS
            } in arithmeticPrefixExpressionOperators->exists(op | op = templateArithmeticExpression.oclAsType(PrefixExpression).operator)
          else
            false
          endif and
          let methodInv1 : OclAny = templateArithmeticExpression.oclContainer()->asOrderedSet()->closure(container: OclAny | if container &lt;&gt; null and container.oclIsKindOf(ParenthesizedExpression) then
            container.oclAsType(ASTNode).oclContainer()
          elseif container &lt;&gt; null and container.oclIsKindOf(ASTNode) then
            container.oclAsType(ASTNode)
          else
           null
          endif)->last() in methodInv1 &lt;&gt; null and
          (methodInv1.oclIsKindOf(MethodInvocation) or methodInv1.oclIsKindOf(SuperMethodInvocation)) and
          let args: OrderedSet(ASTNode) = if methodInv1.oclIsKindOf(MethodInvocation) then
            methodInv1.oclAsType(MethodInvocation).arguments
          elseif methodInv1.oclIsKindOf(SuperMethodInvocation) then
            methodInv1.oclAsType(SuperMethodInvocation).arguments
          else
            null
          endif in (not args->oclIsUndefined()) and
          let args: OrderedSet(ASTNode) = args->collect(arg: ASTNode |
            arg->closure(v: ASTNode | if v.oclIsKindOf(ParenthesizedExpression) then
              v.oclAsType(ParenthesizedExpression).expression
            else
              v
            endif)
          ) in
          args->exists(stmtTmp | stmtTmp = templateArithmeticExpression)
        ) or 
        (
          let closureArithmeticExpression: ASTNode = operatorExp in
          --ImplicityOperandFilter Context Conditions
          if closureArithmeticExpression.oclIsKindOf(InfixExpression) then
            let arithmeticInfixExpressionOperators: Set(InfixExpressionKind) = Set(InfixExpressionKind){
              InfixExpressionKind::TIMES,
              InfixExpressionKind::DIVIDE,
              InfixExpressionKind::PLUS,
              InfixExpressionKind::MINUS,
              InfixExpressionKind::REMAINDER
            } in arithmeticInfixExpressionOperators->exists(op | op = closureArithmeticExpression.oclAsType(InfixExpression).operator) and
            not(
              (
                -- String concat checker
                (
                  -- Approach A
                  let closureIteration: OrderedSet(ASTNode) = closureArithmeticExpression->asOrderedSet()->closure(v: ASTNode |
                    if v.oclIsKindOf(InfixExpression) then
                      v.oclAsType(InfixExpression).extendedOperands
                        ->append(v.oclAsType(InfixExpression).leftOperand)
                        ->append(v.oclAsType(InfixExpression).rightOperand)
                    elseif v.oclIsKindOf(Assignment) then
                      v.oclAsType(Assignment).leftHandSide->asOrderedSet()->append(v.oclAsType(Assignment).rightHandSide)
                    elseif v.oclIsKindOf(ParenthesizedExpression) then
                      v.oclAsType(ParenthesizedExpression).expression
                    else
                      v
                    endif
                  ) in
                  closureIteration->exists(v: ASTNode |
                    if v.oclIsKindOf(StringLiteral) then
                      true
                    elseif v.oclIsKindOf(MethodInvocation) and v.oclAsType(MethodInvocation).method.oclIsKindOf(MethodDeclaration) and
                      v.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).name = 'toString' then
                      true
                    elseif v.oclIsKindOf(SuperMethodInvocation) and v.oclAsType(SuperMethodInvocation).method.oclIsKindOf(MethodDeclaration) and
                      v.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).name = 'toString' then
                      true
                    elseif v.oclIsKindOf(ClassInstanceCreation) and v.oclAsType(ClassInstanceCreation).type.type.oclIsKindOf(ClassDeclaration) and
                      v.oclAsType(ClassInstanceCreation).type.type.oclAsType(ClassDeclaration).name = 'String' then
                      true
                    else
                      let accessesClosure: OrderedSet(ASTNode) = v->asOrderedSet()->closure(v: ASTNode | 
                        if v.oclIsKindOf(ArrayAccess) then
                          v.oclAsType(ArrayAccess).array
                        else
                          v
                        endif
                      ) in
                      let totalAccesses: Integer = accessesClosure->select(v: ASTNode | v.oclIsKindOf(ArrayAccess))->size() in
                      let baseNode: ASTNode = accessesClosure->last() in
                      let baseNode: ASTNode = if baseNode.oclIsKindOf(SingleVariableAccess) then
                        baseNode.oclAsType(SingleVariableAccess).variable
                      elseif baseNode.oclIsKindOf(FieldAccess) then
                        baseNode.oclAsType(FieldAccess).field.variable
                      else
                        baseNode
                      endif in
                      let baseNodeType: ASTNode = if baseNode.oclIsKindOf(VariableDeclarationFragment) then
                        baseNode.oclAsType(VariableDeclarationFragment).variablesContainer.type.type
                      elseif baseNode.oclIsKindOf(SingleVariableDeclaration) then
                        baseNode.oclAsType(SingleVariableDeclaration).type.type
                      elseif baseNode.oclIsKindOf(MethodInvocation) and baseNode.oclAsType(MethodInvocation).method.oclIsKindOf(MethodDeclaration) and
                        (not baseNode.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
                        baseNode.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.type
                      elseif baseNode.oclIsKindOf(SuperMethodInvocation) and baseNode.oclAsType(SuperMethodInvocation).method.oclIsKindOf(MethodDeclaration) and
                        (not baseNode.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
                        baseNode.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).returnType.type
                      else
                        null
                      endif in (not baseNodeType.oclIsUndefined()) and
                      let baseNodeTypeDimensions: Integer = if baseNodeType.oclIsKindOf(ArrayType) then
                        baseNodeType.oclAsType(ArrayType).dimensions
                      else
                        0
                      endif in
                      let baseNodeDimensions: Integer = if baseNode.oclIsKindOf(VariableDeclaration) then
                        baseNode.oclAsType(VariableDeclaration).extraArrayDimensions
                      else
                        0
                      endif in
                      let dimensions: Integer = if baseNodeTypeDimensions > baseNodeDimensions then
                        baseNodeTypeDimensions
                      else
                        baseNodeDimensions
                      endif in
                      let baseNodeType: ASTNode = baseNodeType->asOrderedSet()->closure(v: ASTNode |
                        if v.oclIsKindOf(ArrayType) then
                          v.oclAsType(ArrayType).elementType.type
                        else
                          v
                        endif
                      )->last() in baseNodeType.oclIsKindOf(ClassDeclaration) and baseNodeType.oclAsType(ClassDeclaration).name = 'String' and
                      dimensions = totalAccesses
                    endif
                  )
                ) or
                (
                  -- Approach B
                  let closureIteration: OrderedSet(ASTNode) = closureArithmeticExpression->asOrderedSet()->closure(v: ASTNode |
                    if v.oclContainer() &lt;&gt; null and (v.oclContainer().oclIsKindOf(MethodInvocation) or 
                       v.oclContainer().oclIsKindOf(SuperMethodInvocation) or
                       v.oclContainer().oclIsKindOf(ClassInstanceCreation) or
                       v.oclContainer().oclIsKindOf(SuperConstructorInvocation)) then
                      v
                    elseif v.oclIsKindOf(VariableDeclarationFragment) or
                           v.oclIsKindOf(Assignment) then
                      v
                    else
                      v.oclContainer()
                    endif
                  ) in closureIteration->size() > 0 and
                  let lastClosure: ASTNode = closureIteration->last() in 
                  let parameterIndex: Integer = if lastClosure.oclContainer() &lt;&gt; null then
                    if lastClosure.oclContainer().oclIsKindOf(MethodInvocation) then
                      lastClosure.oclContainer().oclAsType(MethodInvocation).arguments->indexOf(lastClosure)
                    elseif lastClosure.oclContainer().oclIsKindOf(SuperMethodInvocation) then
                      lastClosure.oclContainer().oclAsType(SuperMethodInvocation).arguments->indexOf(lastClosure)
                    elseif lastClosure.oclContainer().oclIsKindOf(ClassInstanceCreation) then
                      lastClosure.oclContainer().oclAsType(ClassInstanceCreation).arguments->indexOf(lastClosure)
                    elseif lastClosure.oclContainer().oclIsKindOf(SuperConstructorInvocation) then
                      lastClosure.oclContainer().oclAsType(SuperConstructorInvocation).arguments->indexOf(lastClosure)
                    else
                      null
                    endif
                  else
                    null
                  endif in
                  let parameters: OrderedSet(ASTNode) = if lastClosure.oclContainer() &lt;&gt; null then
                    if lastClosure.oclContainer().oclIsKindOf(MethodInvocation) then
                      lastClosure.oclContainer().oclAsType(MethodInvocation).method.parameters
                    elseif lastClosure.oclContainer().oclIsKindOf(SuperMethodInvocation) then
                      lastClosure.oclContainer().oclAsType(SuperMethodInvocation).method.parameters
                    elseif lastClosure.oclContainer().oclIsKindOf(ClassInstanceCreation) then
                      lastClosure.oclContainer().oclAsType(ClassInstanceCreation).method.parameters
                    elseif lastClosure.oclContainer().oclIsKindOf(SuperConstructorInvocation) then
                      lastClosure.oclContainer().oclAsType(SuperConstructorInvocation).method.parameters
                    else
                      null
                    endif
                  else
                    null
                  endif in
                  let baseNode: ASTNode = if lastClosure.oclIsKindOf(Assignment) then
                    lastClosure.oclAsType(Assignment).leftHandSide
                  else
                    lastClosure
                  endif in
                  let accessesClosure: OrderedSet(ASTNode) = baseNode->asOrderedSet()->closure(v: ASTNode | 
                    if v.oclIsKindOf(ArrayAccess) then
                      v.oclAsType(ArrayAccess).array
                    else
                      v
                    endif
                  ) in
                  let totalAccesses: Integer = accessesClosure->select(v: ASTNode | v.oclIsKindOf(ArrayAccess))->size() in
                  let baseNode: ASTNode = if parameterIndex &lt;&gt; null then
                    parameters->at(parameterIndex)
                  else
                    accessesClosure->last()
                  endif in
                  let baseNode: ASTNode = if baseNode.oclIsKindOf(SingleVariableAccess) then
                    baseNode.oclAsType(SingleVariableAccess).variable
                  elseif baseNode.oclIsKindOf(FieldAccess) then
                    baseNode.oclAsType(FieldAccess).field.variable
                  else
                    baseNode
                  endif in
                  let baseNodeType: ASTNode = if baseNode.oclIsKindOf(VariableDeclarationFragment) then
                    baseNode.oclAsType(VariableDeclarationFragment).variablesContainer.type.type
                  elseif baseNode.oclIsKindOf(SingleVariableDeclaration) then
                    baseNode.oclAsType(SingleVariableDeclaration).type.type
                  elseif baseNode.oclIsKindOf(MethodInvocation) and baseNode.oclAsType(MethodInvocation).method.oclIsKindOf(MethodDeclaration) and
                    (not baseNode.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
                    baseNode.oclAsType(MethodInvocation).method.oclAsType(MethodDeclaration).returnType.type
                  elseif baseNode.oclIsKindOf(SuperMethodInvocation) and baseNode.oclAsType(SuperMethodInvocation).method.oclIsKindOf(MethodDeclaration) and
                    (not baseNode.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).returnType.oclIsUndefined()) then
                    baseNode.oclAsType(SuperMethodInvocation).method.oclAsType(MethodDeclaration).returnType.type
                  else
                    null
                  endif in (not baseNodeType.oclIsUndefined()) and
                  let baseNodeTypeDimensions: Integer = if baseNodeType.oclIsKindOf(ArrayType) then
                    baseNodeType.oclAsType(ArrayType).dimensions
                  else
                    0
                  endif in
                  let baseNodeDimensions: Integer = if baseNode.oclIsKindOf(VariableDeclaration) then
                    baseNode.oclAsType(VariableDeclaration).extraArrayDimensions
                  else
                    0
                  endif in
                  let dimensions: Integer = if baseNodeTypeDimensions > baseNodeDimensions then
                    baseNodeTypeDimensions
                  else
                    baseNodeDimensions
                  endif in
                  let baseNodeType: ASTNode = baseNodeType->asOrderedSet()->closure(v: ASTNode |
                    if v.oclIsKindOf(ArrayType) then
                      v.oclAsType(ArrayType).elementType.type
                    else
                      v
                    endif
                  )->last() in baseNodeType.oclIsKindOf(ClassDeclaration) and baseNodeType.oclAsType(ClassDeclaration).name = 'String' and
                    dimensions = totalAccesses
                )
              )
            )
          elseif closureArithmeticExpression.oclIsKindOf(PrefixExpression) then
            let arithmeticPrefixExpressionOperators: Set(PrefixExpressionKind) = Set(PrefixExpressionKind){
              PrefixExpressionKind::PLUS,
              PrefixExpressionKind::MINUS
            } in arithmeticPrefixExpressionOperators->exists(op | op = closureArithmeticExpression.oclAsType(PrefixExpression).operator)
          else
            false
          endif and
          --Closure Condition
          let closureSet: OrderedSet(ASTNode) = closureArithmeticExpression->closure(n: ASTNode |
            let container: OclAny = n.oclContainer() in
            if container &lt;&gt; null and container.oclIsKindOf(InfixExpression) and
              container.oclAsType(InfixExpression).extendedOperands
                ->append(container.oclAsType(InfixExpression).leftOperand)
                ->append(container.oclAsType(InfixExpression).rightOperand)
                ->exists(x | x = n) then
              container
            else if container.oclIsKindOf(PrefixExpression) and container.oclAsType(PrefixExpression).operand = n then
              container
            else if container.oclIsKindOf(ParenthesizedExpression) then
              container
            else if n.oclIsKindOf(ParenthesizedExpression) then
              n.oclAsType(ParenthesizedExpression).expression
            else
              null
            endif endif endif endif
          )->excluding(closureArithmeticExpression) in
          closureSet->exists(anyOperatorExpression: ASTNode |
            (anyOperatorExpression.oclIsKindOf(InfixExpression) or anyOperatorExpression.oclIsKindOf(PrefixExpression))  and
            let methodInv2 : OclAny = anyOperatorExpression.oclContainer()->asOrderedSet()->closure(container: OclAny | if container &lt;&gt; null and container.oclIsKindOf(ParenthesizedExpression) then
              container.oclAsType(ASTNode).oclContainer()
            elseif container &lt;&gt; null and container.oclIsKindOf(ASTNode) then
              container.oclAsType(ASTNode)
            else
             null
            endif)->last() in methodInv2 &lt;&gt; null and
            (methodInv2.oclIsKindOf(MethodInvocation) or methodInv2.oclIsKindOf(SuperMethodInvocation)) and
            let args: OrderedSet(ASTNode) = if methodInv2.oclIsKindOf(MethodInvocation) then
              methodInv2.oclAsType(MethodInvocation).arguments
            elseif methodInv2.oclIsKindOf(SuperMethodInvocation) then
              methodInv2.oclAsType(SuperMethodInvocation).arguments
            else
              null
            endif in (not args->oclIsUndefined()) and
            let args: OrderedSet(ASTNode) = args->collect(arg: ASTNode |
              arg->closure(v: ASTNode | if v.oclIsKindOf(ParenthesizedExpression) then
                v.oclAsType(ParenthesizedExpression).expression
              else
                v
              endif)
            ) in
            args->exists(stmtTmp | stmtTmp = anyOperatorExpression)
          )
        )
        -- End Composite Filter (OR)
      )
    )
    ->reject(node: ASTNode | node.originalCompilationUnit.oclIsUndefined())
    ->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
  </ocl>
  <strategy name="All" custom="false" />
  <actions>
    <action name="WrongArithmeticExpressionInParameterOfAFunctionCallStep1" />
  </actions>
</faultTypeRule>
