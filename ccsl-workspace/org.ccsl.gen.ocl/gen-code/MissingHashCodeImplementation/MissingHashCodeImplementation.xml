<faultTypeRule>
  <ocl>
    MethodDeclaration.allInstances()->select(method1 |
      --AtomicRule Context Conditions
      method1.oclAsType(NamedElement).name = 'hashCode' and
      let clazz2 : OclAny = method1.oclContainer()->asOrderedSet()->closure(container: OclAny | if container &lt;&gt; null and container.oclIsKindOf(ParenthesizedExpression) then
        container.oclAsType(ASTNode).oclContainer()
      elseif container &lt;&gt; null and container.oclIsKindOf(ASTNode) then
        container.oclAsType(ASTNode)
      else
       null
      endif)->last() in clazz2 &lt;&gt; null and
      (clazz2.oclIsKindOf(ClassDeclaration) or clazz2.oclIsKindOf(AnonymousClassDeclaration)) and
      let bodyDeclarations: OrderedSet(ASTNode) = if clazz2.oclIsKindOf(AbstractTypeDeclaration) then
        clazz2.oclAsType(AbstractTypeDeclaration).bodyDeclarations
      else if clazz2.oclIsKindOf(AnonymousClassDeclaration) then
        clazz2.oclAsType(AnonymousClassDeclaration).bodyDeclarations
      else
        null
      endif endif in (not bodyDeclarations->oclIsUndefined()) and
      let methods: OrderedSet(MethodDeclaration) = bodyDeclarations->select(method: ASTNode | method.oclIsKindOf(MethodDeclaration)) in
      methods->exists(methodTmp | methodTmp = method1) and
      let childrenClasses: OrderedSet(ASTNode) = clazz2->closure(children: ASTNode |
        if children &lt;&gt; null and children.oclIsKindOf(ClassDeclaration) then
          children.oclAsType(ClassDeclaration).usagesInTypeAccess
        elseif children &lt;&gt; null and children.oclIsKindOf(TypeAccess) and children.oclAsType(TypeAccess).oclContainer().oclIsKindOf(ClassDeclaration) then
          children.oclAsType(TypeAccess).oclContainer().oclAsType(ClassDeclaration)
        else
          null
        endif
      )->select(x | x &lt;&gt; null and x.oclIsKindOf(ClassDeclaration)) in
      childrenClasses->exists(clazz3: ASTNode |
        (clazz3.oclIsKindOf(ClassDeclaration) or clazz3.oclIsKindOf(AnonymousClassDeclaration)) and
        let bodyDeclarations: OrderedSet(ASTNode) = if clazz3.oclIsKindOf(AbstractTypeDeclaration) then
          clazz3.oclAsType(AbstractTypeDeclaration).bodyDeclarations
        else if clazz3.oclIsKindOf(AnonymousClassDeclaration) then
          clazz3.oclAsType(AnonymousClassDeclaration).bodyDeclarations
        else
          null
        endif endif in (not bodyDeclarations->oclIsUndefined()) and
        let methods: OrderedSet(MethodDeclaration) = bodyDeclarations->select(method: ASTNode | method.oclIsKindOf(MethodDeclaration)) in
        methods->exists(method4 |  
          method4 &lt;&gt; null and
            method4.oclAsType(NamedElement).name = 'equals'
      ))
    )
    ->select(node: ASTNode | 
      node->closure(n: ASTNode |
        if n.originalCompilationUnit &lt;&gt; null then n
        elseif n.oclContainer().oclIsKindOf(ASTNode) then n.oclContainer().oclAsType(ASTNode)
        else null
        endif
      )->exists(n: ASTNode | n.originalCompilationUnit &lt;&gt; null)
    )
    ->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
  </ocl>
  <strategy name="All" custom="false" />
  <actions>
    <action name="MissingHashCodeImplementationStep1" />
  </actions>
</faultTypeRule>
