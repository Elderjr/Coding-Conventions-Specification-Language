let violations: Set(ASTNode) = IfStatement.allInstances()->select(ifStmt1 |
  --AtomicRule Context Conditions
  let stmt2: ASTNode = ifStmt1.thenStatement in
  stmt2 <> null and
    (stmt2.oclIsKindOf(Statement) or stmt2.oclIsKindOf(Expression)) and
  let elseStmt: ASTNode = ifStmt1.elseStatement in
    elseStmt <> null and
      (elseStmt.oclIsKindOf(Statement) or elseStmt.oclIsKindOf(Expression))
)
->reject(node: ASTNode | node.originalCompilationUnit.oclIsUndefined())
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc))) in
violations->asSequence()->collect(node: ASTNode | 
	let container: NamedElement = node->asOrderedSet()->closure(x |
        if x.oclIsKindOf(AbstractMethodDeclaration) or x.oclIsKindOf(AbstractTypeDeclaration) then
		  x
		else
		  x.oclContainer()
	    endif
	)->last() in if (not container.oclIsUndefined()) and (not container.originalCompilationUnit.oclIsUndefined()) then
      'Violation Found at '.concat(container.originalCompilationUnit.originalFilePath).concat(' on ').concat(container.name)
    else
      ''
    endif
)->asSequence()->select(violation | violation.size() > 0)
->append('#violations: '.concat(violations->size().toString()))
