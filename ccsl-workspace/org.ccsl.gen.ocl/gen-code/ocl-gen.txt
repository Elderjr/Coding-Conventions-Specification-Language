let violations: Set(ASTNode) = MethodInvocation.allInstances()->select(runInvocation: MethodInvocation |
  let runMethod: MethodDeclaration = runInvocation.method in
  runMethod <> null and
    let threadClass : OclAny = runMethod.oclContainer() in threadClass <> null and
    threadClass.oclIsKindOf(ClassDeclaration) and
    threadClass.oclAsType(ClassDeclaration).package->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
      fullName.concat(p.name).concat('.')
    ).concat(threadClass.oclAsType(ClassDeclaration).name) = 'java.lang.Thread' and
    let bodyDeclarations: OrderedSet(ASTNode) = threadClass.oclAsType(ClassDeclaration).bodyDeclarations in bodyDeclarations <> null and
    let methods: OrderedSet(MethodDeclaration) = bodyDeclarations->select(method: ASTNode | method.oclIsKindOf(MethodDeclaration)) in
    methods->exists(methodTmp | methodTmp = runMethod) and
    runMethod.oclAsType(NamedElement).name = 'run' and
  
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
