let violations: Set(ASTNode) = ClassInstanceCreation.allInstances()->select(stmt1 |
  --AtomicRule Context Conditions
  let stmt2: ASTNode = stmt1 in true and
  let implicityContainerSet: OrderedSet(ASTNode) = stmt2->asOrderedSet()->closure(node: ASTNode |
    let container: OclAny = node.oclContainer() in  
    if container <> null and container.oclIsKindOf(ASTNode) then
      container
    else
      null
    endif
  ) in
  implicityContainerSet->exists(stmt3: ASTNode |
    (stmt3.oclIsKindOf(EnhancedForStatement) or stmt3.oclIsKindOf(ForStatement) or stmt3.oclIsKindOf(WhileStatement) or stmt3.oclIsKindOf(DoStatement))  and
    let loopBody = if stmt3.oclIsKindOf(EnhancedForStatement) then
      stmt3.oclAsType(EnhancedForStatement).body
    elseif stmt3.oclIsKindOf(ForStatement) then
      stmt3.oclAsType(ForStatement).body
    elseif stmt3.oclIsKindOf(WhileStatement) then
      stmt3.oclAsType(WhileStatement).body
    elseif stmt3.oclIsKindOf(DoStatement) then
      stmt3.oclAsType(DoStatement).body
    else 
      null
    endif in loopBody <> null and
    implicityContainerSet->exists(x | x = loopBody)->size() > 0
  ) and
  not (
    let implicityContainerSet: OrderedSet(ASTNode) = stmt1->asOrderedSet()->closure(node: ASTNode |
      let container: OclAny = node.oclContainer() in  
      if container <> null and container.oclIsKindOf(ASTNode) then
        container
      else
        null
      endif
    ) in
    implicityContainerSet->exists(e4: ASTNode |
      e4.oclIsKindOf(ThrowStatement)
    )
  )
)
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
