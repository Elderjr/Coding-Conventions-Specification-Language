let violations: Set(ASTNode) = (
  MethodInvocation.allInstances()->union(SuperMethodInvocation.allInstances())->select(methodInv1: ASTNode |
    (methodInv1.oclIsKindOf(MethodInvocation) or methodInv1.oclIsKindOf(SuperMethodInvocation)) and
    let method2: MethodDeclaration = if methodInv1.oclIsKindOf(MethodInvocation) then
      methodInv1.oclAsType(MethodInvocation).method
    elseif methodInv1.oclIsKindOf(SuperMethodInvocation) then
      methodInv1.oclAsType(SuperMethodInvocation).method
    else
      null
    endif in 
    method2 <> null and
      method2.oclAsType(NamedElement).name = 'append' and
      let clazz3 : OclAny = method2.oclContainer()->asOrderedSet()->closure(container: OclAny | if container <> null and container.oclIsKindOf(ParenthesizedExpression) then
        container.oclAsType(ASTNode).oclContainer()
      elseif container <> null and container.oclIsKindOf(ASTNode) then
        container.oclAsType(ASTNode)
      else
       null
      endif)->last() in clazz3 <> null and
      (clazz3.oclIsKindOf(ClassDeclaration) or clazz3.oclIsKindOf(AnonymousClassDeclaration)) and
      let bodyDeclarations: OrderedSet(ASTNode) = if clazz3.oclIsKindOf(AbstractTypeDeclaration) then
        clazz3.oclAsType(AbstractTypeDeclaration).bodyDeclarations
      else if clazz3.oclIsKindOf(AnonymousClassDeclaration) then
        clazz3.oclAsType(AnonymousClassDeclaration).bodyDeclarations
      else
        null
      endif endif in (not bodyDeclarations->oclIsUndefined()) and
      let methods: OrderedSet(MethodDeclaration) = bodyDeclarations->select(method: ASTNode | method.oclIsKindOf(MethodDeclaration)) in
      methods->exists(methodTmp | methodTmp = method2) and
    let args: OrderedSet(ASTNode) = if methodInv1.oclIsKindOf(MethodInvocation) then
        methodInv1.oclAsType(MethodInvocation).arguments
      elseif methodInv1.oclIsKindOf(SuperMethodInvocation) then
        methodInv1.oclAsType(SuperMethodInvocation).arguments
      else
        null
      endif in (not args->oclIsUndefined()) and
      let args: OrderedSet(ASTNode) = args->collect(arg: ASTNode |
        arg->closure(v: ASTNode | if v.oclIsKindOf(ParenthesizedExpression) then
          v.oclAsType(ParenthesizedExpression).expression
        else
          v
        endif)
      ) in
      args->exists(literal4 |  
        literal4 <> null and
          (literal4.oclIsKindOf(StringLiteral) or literal4.oclIsKindOf(CharacterLiteral) or literal4.oclIsKindOf(NumberLiteral) or literal4.oclIsKindOf(BooleanLiteral) or literal4.oclIsKindOf(NullLiteral)) and
    let block5 : OclAny = if methodInv1.oclContainer() <> null and methodInv1.oclContainer().oclIsKindOf(ExpressionStatement) then
            methodInv1.oclContainer().oclContainer()
          else
            methodInv1.oclContainer()
          endif in block5 <> null and
          block5.oclIsKindOf(Block) and
          let blockStatements: OrderedSet(Statement) = block5.oclAsType(Block).statements in
          blockStatements->exists(methodInvTmp | let methodInvTmp: Statement = if methodInvTmp <> null and methodInvTmp.oclIsKindOf(ExpressionStatement) then
            methodInvTmp.oclAsType(ExpressionStatement).expression
          else
            methodInvTmp
          endif in
          methodInvTmp = methodInv1) and
          let methodInvExpression: ASTNode = if methodInv1.oclContainer().oclIsKindOf(ExpressionStatement) then
            methodInv1.oclContainer().oclAsType(ExpressionStatement)
          else
            methodInv1
          endif in
          let methodInv1Index: Integer = if blockStatements->includes(methodInvExpression) then
            blockStatements->indexOf(methodInvExpression)
          else
            -1
          endif in methodInv1Index <> - 1 and 
          blockStatements->exists(methodInv6: Statement |  
            let methodInv6: Statement = if methodInv6 <> null and methodInv6.oclIsKindOf(ExpressionStatement) then
              methodInv6.oclAsType(ExpressionStatement).expression
            else
              methodInv6
            endif in
            methodInv6 <> null and
              (methodInv6.oclIsKindOf(MethodInvocation) or methodInv6.oclIsKindOf(SuperMethodInvocation)) and
          let methodInvExpression: ASTNode = if methodInv6.oclContainer().oclIsKindOf(ExpressionStatement) then
            methodInv6.oclContainer().oclAsType(ExpressionStatement)
          else
            methodInv6
          endif in
          let methodInv6Index: Integer = if blockStatements->includes(methodInvExpression) then
            blockStatements->indexOf(methodInvExpression)
          else
            -1
          endif in methodInv6Index <> - 1  and
          methodInv6Index = methodInv1Index + 1 and
    let className: String = if clazz3.oclIsKindOf(ClassDeclaration) then
      clazz3.oclAsType(ClassDeclaration).name
    else if clazz3.oclIsKindOf(AnonymousClassDeclaration) then
      clazz3.oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).name
    else
      null
    endif endif in (not className.oclIsUndefined()) and
    let classPackage: Package = if clazz3.oclIsKindOf(ClassDeclaration) then
      clazz3.oclAsType(ClassDeclaration).package
    else if clazz3.oclIsKindOf(AnonymousClassDeclaration) then
      clazz3.oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).package
    else
      null
    endif endif in (not className.oclIsUndefined()) and
    classPackage->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
      fullName.concat(p.name).concat('.')
    ).concat(className).matches('java\\.lang\\.String(Builder|Buffer)') and
    let fromClosureSet: OrderedSet(ASTNode) = methodInv6->asOrderedSet()->closure(node: ASTNode |
      if node.oclIsKindOf(MethodInvocation) then
        node.oclAsType(MethodInvocation).expression
      else
        node
      endif
    ) in
    fromClosureSet->exists(methodInv7: ASTNode |
      (methodInv7.oclIsKindOf(MethodInvocation)) and
      let stmt8: ASTNode = if methodInv7.oclIsKindOf(MethodInvocation) then
        methodInv7.oclAsType(MethodInvocation).expression
      else
        null
      endif in 
      stmt8 <> null and
        stmt8.oclIsKindOf(Statement) or stmt8.oclIsKindOf(Expression) and
      let args: OrderedSet(ASTNode) = if methodInv7.oclIsKindOf(MethodInvocation) then
          methodInv7.oclAsType(MethodInvocation).arguments
        elseif methodInv7.oclIsKindOf(SuperMethodInvocation) then
          methodInv7.oclAsType(SuperMethodInvocation).arguments
        else
          null
        endif in (not args->oclIsUndefined()) and
        let args: OrderedSet(ASTNode) = args->collect(arg: ASTNode |
          arg->closure(v: ASTNode | if v.oclIsKindOf(ParenthesizedExpression) then
            v.oclAsType(ParenthesizedExpression).expression
          else
            v
          endif)
        ) in
        args->exists(literal9 |  
          literal9 <> null and
            (literal9.oclIsKindOf(StringLiteral) or literal9.oclIsKindOf(CharacterLiteral) or literal9.oclIsKindOf(NumberLiteral) or literal9.oclIsKindOf(BooleanLiteral) or literal9.oclIsKindOf(NullLiteral))  and
      not (
        let methodInv10: ASTNode = stmt8 in 
        (methodInv10.oclIsKindOf(MethodInvocation) or methodInv10.oclIsKindOf(SuperMethodInvocation)) and
        let methodTmp: MethodDeclaration = if methodInv10.oclIsKindOf(MethodInvocation) then
          methodInv10.oclAsType(MethodInvocation).method
        elseif methodInv10.oclIsKindOf(SuperMethodInvocation) then
          methodInv10.oclAsType(SuperMethodInvocation).method
        else
          null
        endif in 
        methodTmp = method2
      ) )
    )
    ))
  )->union(
    MethodInvocation.allInstances()->union(SuperMethodInvocation.allInstances())->select(methodInv1: ASTNode |
    (methodInv1.oclIsKindOf(MethodInvocation)) and
    let method2: MethodDeclaration = if methodInv1.oclIsKindOf(MethodInvocation) then
      methodInv1.oclAsType(MethodInvocation).method
    elseif methodInv1.oclIsKindOf(SuperMethodInvocation) then
      methodInv1.oclAsType(SuperMethodInvocation).method
    else
      null
    endif in 
    method2 <> null and
      method2.oclAsType(NamedElement).name = 'append' and
      let clazz3 : OclAny = method2.oclContainer()->asOrderedSet()->closure(container: OclAny | if container <> null and container.oclIsKindOf(ParenthesizedExpression) then
        container.oclAsType(ASTNode).oclContainer()
      elseif container <> null and container.oclIsKindOf(ASTNode) then
        container.oclAsType(ASTNode)
      else
       null
      endif)->last() in clazz3 <> null and
      (clazz3.oclIsKindOf(ClassDeclaration) or clazz3.oclIsKindOf(AnonymousClassDeclaration)) and
      let bodyDeclarations: OrderedSet(ASTNode) = if clazz3.oclIsKindOf(AbstractTypeDeclaration) then
        clazz3.oclAsType(AbstractTypeDeclaration).bodyDeclarations
      else if clazz3.oclIsKindOf(AnonymousClassDeclaration) then
        clazz3.oclAsType(AnonymousClassDeclaration).bodyDeclarations
      else
        null
      endif endif in (not bodyDeclarations->oclIsUndefined()) and
      let methods: OrderedSet(MethodDeclaration) = bodyDeclarations->select(method: ASTNode | method.oclIsKindOf(MethodDeclaration)) in
      methods->exists(methodTmp | methodTmp = method2) and
    let methodInv4: ASTNode = if methodInv1.oclIsKindOf(MethodInvocation) then
        methodInv1.oclAsType(MethodInvocation).expression
      else
        null
      endif in 
      let methodInv4: ASTNode = if methodInv4 <> null and methodInv4.oclIsKindOf(ExpressionStatement) then
        methodInv4.oclAsType(ExpressionStatement).expression
      else
        methodInv4
      endif in
      methodInv4 <> null and
        (methodInv4.oclIsKindOf(MethodInvocation) or methodInv4.oclIsKindOf(SuperMethodInvocation)) and
        let methodTmp: MethodDeclaration = if methodInv4.oclIsKindOf(MethodInvocation) then
          methodInv4.oclAsType(MethodInvocation).method
        elseif methodInv4.oclIsKindOf(SuperMethodInvocation) then
          methodInv4.oclAsType(SuperMethodInvocation).method
        else
          null
        endif in 
        methodTmp = method2 and
        let args: OrderedSet(ASTNode) = if methodInv4.oclIsKindOf(MethodInvocation) then
          methodInv4.oclAsType(MethodInvocation).arguments
        elseif methodInv4.oclIsKindOf(SuperMethodInvocation) then
          methodInv4.oclAsType(SuperMethodInvocation).arguments
        else
          null
        endif in (not args->oclIsUndefined()) and
        let args: OrderedSet(ASTNode) = args->collect(arg: ASTNode |
          arg->closure(v: ASTNode | if v.oclIsKindOf(ParenthesizedExpression) then
            v.oclAsType(ParenthesizedExpression).expression
          else
            v
          endif)
        ) in
        args->exists(literal5 |  
          literal5 <> null and
            (literal5.oclIsKindOf(StringLiteral) or literal5.oclIsKindOf(CharacterLiteral) or literal5.oclIsKindOf(NumberLiteral) or literal5.oclIsKindOf(BooleanLiteral) or literal5.oclIsKindOf(NullLiteral)) and
    let args: OrderedSet(ASTNode) = if methodInv1.oclIsKindOf(MethodInvocation) then
              methodInv1.oclAsType(MethodInvocation).arguments
            elseif methodInv1.oclIsKindOf(SuperMethodInvocation) then
              methodInv1.oclAsType(SuperMethodInvocation).arguments
            else
              null
            endif in (not args->oclIsUndefined()) and
            let args: OrderedSet(ASTNode) = args->collect(arg: ASTNode |
              arg->closure(v: ASTNode | if v.oclIsKindOf(ParenthesizedExpression) then
                v.oclAsType(ParenthesizedExpression).expression
              else
                v
              endif)
            ) in
            args->exists(literal6 |  
              literal6 <> null and
                (literal6.oclIsKindOf(StringLiteral) or literal6.oclIsKindOf(CharacterLiteral) or literal6.oclIsKindOf(NumberLiteral) or literal6.oclIsKindOf(BooleanLiteral) or literal6.oclIsKindOf(NullLiteral)) and
    let className: String = if clazz3.oclIsKindOf(ClassDeclaration) then
      clazz3.oclAsType(ClassDeclaration).name
    else if clazz3.oclIsKindOf(AnonymousClassDeclaration) then
      clazz3.oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).name
    else
      null
    endif endif in (not className.oclIsUndefined()) and
    let classPackage: Package = if clazz3.oclIsKindOf(ClassDeclaration) then
      clazz3.oclAsType(ClassDeclaration).package
    else if clazz3.oclIsKindOf(AnonymousClassDeclaration) then
      clazz3.oclAsType(AnonymousClassDeclaration).classInstanceCreation.type.type.oclAsType(AbstractTypeDeclaration).package
    else
      null
    endif endif in (not className.oclIsUndefined()) and
    classPackage->asOrderedSet()->closure(package)->reverse()->iterate(p: Package; fullName: String = '' |
      fullName.concat(p.name).concat('.')
    ).concat(className).matches('java\\.lang\\.String(Builder|Buffer)')
    ))
  ))
) 
->reject(node: ASTNode | node->closure(oclContainer())->exists(oclIsKindOf(Javadoc)))
->collect(node: ASTNode |
  if node.originalCompilationUnit <> null then
    node
  else
    let nodesWithOriginalCompilationUnit: OrderedSet(ASTNode) = node->asOrderedSet()->closure(n: ASTNode | 
  	  if n.originalCompilationUnit <> null then 
        n 
      elseif n.oclContainer().oclIsKindOf(ASTNode) then 
        n.oclContainer().oclAsType(ASTNode) 
      else 
        null 
      endif
    )->select(n | n <> null and not n.originalCompilationUnit.oclIsUndefined()) in 
    if nodesWithOriginalCompilationUnit->size() > 0 then 
      nodesWithOriginalCompilationUnit->first() 
    else 
      null 
    endif
  endif
)
->select(node: ASTNode | node <> null) in
violations
