AtomicRule {
    elements: [
        //Encontra um método que declara uma conexão
        m as Method {
            statements: [
                vd: VarDeclaration: {
                    variable: v as Variable {
                    type: JClass {
                        name: "Connection"
                    }
                }
            }
        }
    ],
    filters: [
        CompositeFilter: {
            operator: "AND",
            filters:[

                //O Método não pode retornar a variável de conexão (evita falso-positivo)
                TemplateFilter {
                    negated: true,
                    target: m,
                    template: Method {
                        statements: ReturnStatement {
                            return: VariableAccess{elementAccessed: v}
                        }
                    }
                },

                //A declaração não está em um try-catch with resources
                TemplateFilter {
                    negated: true,
                    target: m,
                    template: Method {
                        statements: JTryCatch {
                            resources: [vr]
                        }
                    }
                }

                //O Método não tem try-catch que utiliza o finally para garantir o fechamento da conexão
                TemplateFilter {
                    negated: true,
                    target: m,
                    template: Method {
                        statements: JTryCatch {
                            finallyStatements: [ MethodInvocation {
                                from: v,
                                to: Method {
                                    name: "close"
                                }
                            }]
                        }
                    }
                }
            ]
        }
    ]
}