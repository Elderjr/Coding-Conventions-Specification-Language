AtomicRule{
    elements:[
        c as ComplexType {
            methods:[m as Method{}]
        },
        inv as MethodInvocation {
            elementAccessed: m
        },
        cons as Constructor {}
    ],
    filters:[
        CompositeFilter {
            operator: "and"
            filters: [
                // c e m não são final
                PropertyFilter{
                    negated:true,
                    target: c,m
                    properties: Property{
                        name: "final"
                    }
                },
                // m não é privado
                PropertyFilter{
                    negated: true,
                    target: m,
                    properties: Property {
                        name: "private"
                    }
                },
                //Busca em profundidade da invoção
                DepthFilter {
                    target: const,
                    search: inv
                }
            }
        }
    ]
}