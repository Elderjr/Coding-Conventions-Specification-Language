/**
 */
package codingConvention.elements.statements.provider;

import codingConvention.elements.statements.util.StatementsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StatementsItemProviderAdapterFactory extends StatementsAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StatementsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link codingConvention.elements.statements.MethodInvocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodInvocationItemProvider methodInvocationItemProvider;

	/**
	 * This creates an adapter for a {@link codingConvention.elements.statements.MethodInvocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodInvocationAdapter() {
		if (methodInvocationItemProvider == null) {
			methodInvocationItemProvider = new MethodInvocationItemProvider(this);
		}

		return methodInvocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link codingConvention.elements.statements.MethodChaining} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodChainingItemProvider methodChainingItemProvider;

	/**
	 * This creates an adapter for a {@link codingConvention.elements.statements.MethodChaining}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodChainingAdapter() {
		if (methodChainingItemProvider == null) {
			methodChainingItemProvider = new MethodChainingItemProvider(this);
		}

		return methodChainingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link codingConvention.elements.statements.AccessModifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccessModifierItemProvider accessModifierItemProvider;

	/**
	 * This creates an adapter for a {@link codingConvention.elements.statements.AccessModifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccessModifierAdapter() {
		if (accessModifierItemProvider == null) {
			accessModifierItemProvider = new AccessModifierItemProvider(this);
		}

		return accessModifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link codingConvention.elements.statements.JavaExceptionHandling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaExceptionHandlingItemProvider javaExceptionHandlingItemProvider;

	/**
	 * This creates an adapter for a {@link codingConvention.elements.statements.JavaExceptionHandling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaExceptionHandlingAdapter() {
		if (javaExceptionHandlingItemProvider == null) {
			javaExceptionHandlingItemProvider = new JavaExceptionHandlingItemProvider(this);
		}

		return javaExceptionHandlingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link codingConvention.elements.statements.CatchClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CatchClauseItemProvider catchClauseItemProvider;

	/**
	 * This creates an adapter for a {@link codingConvention.elements.statements.CatchClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCatchClauseAdapter() {
		if (catchClauseItemProvider == null) {
			catchClauseItemProvider = new CatchClauseItemProvider(this);
		}

		return catchClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link codingConvention.elements.statements.FinallyClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinallyClauseItemProvider finallyClauseItemProvider;

	/**
	 * This creates an adapter for a {@link codingConvention.elements.statements.FinallyClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinallyClauseAdapter() {
		if (finallyClauseItemProvider == null) {
			finallyClauseItemProvider = new FinallyClauseItemProvider(this);
		}

		return finallyClauseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link codingConvention.elements.statements.TryClause} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TryClauseItemProvider tryClauseItemProvider;

	/**
	 * This creates an adapter for a {@link codingConvention.elements.statements.TryClause}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTryClauseAdapter() {
		if (tryClauseItemProvider == null) {
			tryClauseItemProvider = new TryClauseItemProvider(this);
		}

		return tryClauseItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (methodInvocationItemProvider != null)
			methodInvocationItemProvider.dispose();
		if (methodChainingItemProvider != null)
			methodChainingItemProvider.dispose();
		if (accessModifierItemProvider != null)
			accessModifierItemProvider.dispose();
		if (javaExceptionHandlingItemProvider != null)
			javaExceptionHandlingItemProvider.dispose();
		if (catchClauseItemProvider != null)
			catchClauseItemProvider.dispose();
		if (finallyClauseItemProvider != null)
			finallyClauseItemProvider.dispose();
		if (tryClauseItemProvider != null)
			tryClauseItemProvider.dispose();
	}

}
